<svg xmlns="http://www.w3.org/2000/svg" xmlns:fg="http://github.com/jonhoo/inferno" xmlns:xlink="http://www.w3.org/1999/xlink" width="1200" height="1910" onload="init(evt)" version="1.1" viewBox="0 0 1200 1910"><defs><linearGradient id="background" x1="0" x2="0" y1="0" y2="1"><stop offset="5%" stop-color="#eee"/><stop offset="95%" stop-color="#eeeeb0"/></linearGradient></defs><style type="text/css">text { font-family:monospace; font-size:12px } #title { text-anchor:middle; font-size:17px; } #matched { text-anchor:end; } #search { text-anchor:end; opacity:0.1; cursor:pointer; } #search:hover, #search.show { opacity:1; } #subtitle { text-anchor:middle; font-color:rgb(160,160,160); } #unzoom { cursor:pointer; } #frames &gt; *:hover { stroke:black; stroke-width:0.5; cursor:pointer; } .hide { display:none; } .parent { opacity:0.5; }</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect width="100%" height="1910" x="0" y="0" fill="url(#background)"/><text id="title" x="50%" y="24" fill="#000">Flame Graph</text><text id="unzoom" x="10" y="24" fill="#000" class="hide">Reset Zoom</text><text id="search" x="1190" y="24" fill="#000">Search</text><svg id="frames" width="1180" x="10" total_samples="4340"><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.02%)</title><rect width=".023%" height="15" x="0%" y="1749" fill="#E30007" fg:w="1" fg:x="0"/></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.02%)</title><rect width=".023%" height="15" x="0%" y="1733" fill="#D90018" fg:w="1" fg:x="0"/></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.02%)</title><rect width=".023%" height="15" x="0%" y="1717" fill="#DDC136" fg:w="1" fg:x="0"/></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.02%)</title><rect width=".023%" height="15" x="0%" y="1701" fill="#F8D406" fg:w="1" fg:x="0"/></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.02%)</title><rect width=".023%" height="15" x="0%" y="1685" fill="#D04423" fg:w="1" fg:x="0"/></g><g><title>alloc::alloc::alloc (1 samples, 0.02%)</title><rect width=".023%" height="15" x="0%" y="1669" fill="#E88000" fg:w="1" fg:x="0"/></g><g><title>__GI___libc_malloc (1 samples, 0.02%)</title><rect width=".023%" height="15" x="0%" y="1653" fill="#CFA02F" fg:w="1" fg:x="0"/></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (3 samples, 0.07%)</title><rect width=".069%" height="15" x="0%" y="1829" fill="#E41722" fg:w="3" fg:x="0"/></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (3 samples, 0.07%)</title><rect width=".069%" height="15" x="0%" y="1813" fill="#DA1E1A" fg:w="3" fg:x="0"/></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (3 samples, 0.07%)</title><rect width=".069%" height="15" x="0%" y="1797" fill="#DC7A13" fg:w="3" fg:x="0"/></g><g><title>alloc::slice::hack::to_vec (3 samples, 0.07%)</title><rect width=".069%" height="15" x="0%" y="1781" fill="#FAE42A" fg:w="3" fg:x="0"/></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (3 samples, 0.07%)</title><rect width=".069%" height="15" x="0%" y="1765" fill="#F0C11C" fg:w="3" fg:x="0"/></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (2 samples, 0.05%)</title><rect width=".046%" height="15" x=".023%" y="1749" fill="#D81425" fg:w="2" fg:x="1"/></g><g><title>core::intrinsics::copy_nonoverlapping (2 samples, 0.05%)</title><rect width=".046%" height="15" x=".023%" y="1733" fill="#CEBC27" fg:w="2" fg:x="1"/></g><g><title>__memmove_avx_unaligned_erms (2 samples, 0.05%)</title><rect width=".046%" height="15" x=".023%" y="1717" fill="#D9CF0D" fg:w="2" fg:x="1"/></g><g><title>&lt;str as core::fmt::Display&gt;::fmt (1 samples, 0.02%)</title><rect width=".023%" height="15" x=".069%" y="1829" fill="#E74926" fg:w="1" fg:x="3"/></g><g><title>ASN1_mbstring_ncopy (1 samples, 0.02%)</title><rect width=".023%" height="15" x=".092%" y="1829" fill="#E1142E" fg:w="1" fg:x="4"/></g><g><title>CRYPTO_THREAD_run_once (1 samples, 0.02%)</title><rect width=".023%" height="15" x=".115%" y="1829" fill="#D21F29" fg:w="1" fg:x="5"/></g><g><title>OBJ_NAME_remove (1 samples, 0.02%)</title><rect width=".023%" height="15" x=".138%" y="1829" fill="#DDC82F" fg:w="1" fg:x="6"/></g><g><title>_int_free (1 samples, 0.02%)</title><rect width=".023%" height="15" x=".138%" y="1813" fill="#E21A05" fg:w="1" fg:x="6"/></g><g><title>OBJ_obj2nid (1 samples, 0.02%)</title><rect width=".023%" height="15" x=".161%" y="1829" fill="#F9211A" fg:w="1" fg:x="7"/></g><g><title>OPENSSL_sk_new_null (1 samples, 0.02%)</title><rect width=".023%" height="15" x=".184%" y="1829" fill="#EBB71C" fg:w="1" fg:x="8"/></g><g><title>PEM_read_bio_ex (1 samples, 0.02%)</title><rect width=".023%" height="15" x=".207%" y="1829" fill="#DD0526" fg:w="1" fg:x="9"/></g><g><title>[unknown] (1 samples, 0.02%)</title><rect width=".023%" height="15" x=".23%" y="1829" fill="#F7122A" fg:w="1" fg:x="10"/></g><g><title>_RINvXNvXsh_NtNtCs4tzRlw4u1YC_5serde2de5implsINtNtCsgVEU3eNk0wn_5alloc3vec3VecpENtBb_11Deserialize11deserializeINtB3_10VecVisitorNtNtNtCs91RHfw1kJHZ_5cargo4util9interning14InternedStringENtBb_7Visitor9visit_seqINtCs5VGRQ9yd1Sa_13serde_ignored9SeqAccessQNtNtCsd54lCtrCTyZ_4toml5value15SeqDeserializerNCNvNtB26_4toml22read_manifest_from_strs_0EEB28_ (1 samples, 0.02%)</title><rect width=".023%" height="15" x=".23%" y="1813" fill="#F1832D" fg:w="1" fg:x="10"/></g><g><title>__GI___libc_malloc (1 samples, 0.02%)</title><rect width=".023%" height="15" x=".23%" y="1797" fill="#F91F1D" fg:w="1" fg:x="10"/></g><g><title>_RINvMNtCsd54lCtrCTyZ_4toml3mapINtB3_3MapNtNtCsgVEU3eNk0wn_5alloc6string6StringNtNtB5_5value5ValueE5entryRBC_EB5_ (1 samples, 0.02%)</title><rect width=".023%" height="15" x=".254%" y="1829" fill="#E16F35" fg:w="1" fg:x="11"/></g><g><title>__memcmp_avx2_movbe (1 samples, 0.02%)</title><rect width=".023%" height="15" x=".254%" y="1813" fill="#EEA011" fg:w="1" fg:x="11"/></g><g><title>_RINvMs5_NtCs5u79KavszpI_9hashbrown3rawINtB6_8RawTableTReuEE14reserve_rehashNCINvNtB8_3map11make_hasherBQ_uNtNtNtNtCsbGDwpR2ddnS_3std11collections4hash3map11RandomStateE0ECs91RHfw1kJHZ_5cargo.llvm.17241685589328308574 (1 samples, 0.02%)</title><rect width=".023%" height="15" x=".277%" y="1829" fill="#D69430" fg:w="1" fg:x="12"/></g><g><title>_RINvMs5_NtNtCsaYwJY09qFLB_9hashbrown3raw5innerINtB6_8RawTablejE14reserve_rehashNCINvNtNtCsbXkKDtJpnLc_8indexmap3map4core8get_hashNtNtCsjXfa599Qfro_9toml_edit15internal_string14InternalStringNtNtB27_5table13TableKeyValueE0EB27_ (2 samples, 0.05%)</title><rect width=".046%" height="15" x=".299%" y="1829" fill="#E82431" fg:w="2" fg:x="13"/></g><g><title>__GI___libc_malloc (1 samples, 0.02%)</title><rect width=".023%" height="15" x=".323%" y="1813" fill="#D16718" fg:w="1" fg:x="14"/></g><g><title>_int_malloc (1 samples, 0.02%)</title><rect width=".023%" height="15" x=".323%" y="1797" fill="#E55808" fg:w="1" fg:x="14"/></g><g><title>_RINvMs_NtNtNtCsgVEU3eNk0wn_5alloc11collections5btree6searchINtNtB7_4node7NodeRefNtNtBY_6marker3MutNtNtNtCs91RHfw1kJHZ_5cargo4core10package_id9PackageIdNtNtB1C_10dependency10DependencyNtB1i_14LeafOrInternalE11search_treeB1y_EB1E_ (1 samples, 0.02%)</title><rect width=".023%" height="15" x=".346%" y="1829" fill="#D5B513" fg:w="1" fg:x="15"/></g><g><title>_RINvNtCs341v5OBXvdv_10serde_json3ser27format_escaped_str_contentsQINtNtCsgVEU3eNk0wn_5alloc3vec3VechENtB2_16CompactFormatterECsjoxAk7uGzBK_5cargo.llvm.17432363443719017836 (1 samples, 0.02%)</title><rect width=".023%" height="15" x=".369%" y="1829" fill="#FEBF36" fg:w="1" fg:x="16"/></g><g><title>_RINvNtCs5SG5FiVtMak_4core3ptr13drop_in_placeNtNtCsaBmMM8Aev1H_14cargo_platform3cfg7CfgExprECs91RHfw1kJHZ_5cargo.llvm.7281415397597749530 (1 samples, 0.02%)</title><rect width=".023%" height="15" x=".392%" y="1829" fill="#F15325" fg:w="1" fg:x="17"/></g><g><title>_int_free (1 samples, 0.02%)</title><rect width=".023%" height="15" x=".392%" y="1813" fill="#E92427" fg:w="1" fg:x="17"/></g><g><title>_RINvNtCs5SG5FiVtMak_4core3ptr13drop_in_placeNtNtNtCs91RHfw1kJHZ_5cargo3ops21cargo_output_metadata10ExportInfoECsjoxAk7uGzBK_5cargo (1 samples, 0.02%)</title><rect width=".023%" height="15" x=".415%" y="1829" fill="#E20336" fg:w="1" fg:x="18"/></g><g><title>__GI___libc_free (1 samples, 0.02%)</title><rect width=".023%" height="15" x=".415%" y="1813" fill="#F5C028" fg:w="1" fg:x="18"/></g><g><title>_RINvNtCs5SG5FiVtMak_4core3ptr13drop_in_placeNtNtNtCs91RHfw1kJHZ_5cargo4util4toml14TomlDependencyEBM_.llvm.11294386640889789425 (1 samples, 0.02%)</title><rect width=".023%" height="15" x=".438%" y="1829" fill="#EEA71D" fg:w="1" fg:x="19"/></g><g><title>_RINvNtCs5SG5FiVtMak_4core3ptr13drop_in_placeNtNtNtNtCs91RHfw1kJHZ_5cargo4core8resolver6encode16EncodableResolveEBO_ (1 samples, 0.02%)</title><rect width=".023%" height="15" x=".461%" y="1829" fill="#E8B633" fg:w="1" fg:x="20"/></g><g><title>_int_free (1 samples, 0.02%)</title><rect width=".023%" height="15" x=".461%" y="1813" fill="#E73C27" fg:w="1" fg:x="20"/></g><g><title>__GI___libc_malloc (1 samples, 0.02%)</title><rect width=".023%" height="15" x=".484%" y="1813" fill="#D0450C" fg:w="1" fg:x="21"/></g><g><title>_RINvNtCsgVEU3eNk0wn_5alloc7raw_vec11finish_growNtNtB4_5alloc6GlobalECsjXfa599Qfro_9toml_edit.llvm.9746813815476944100 (2 samples, 0.05%)</title><rect width=".046%" height="15" x=".484%" y="1829" fill="#EB5D25" fg:w="2" fg:x="21"/></g><g><title>__GI___libc_realloc (1 samples, 0.02%)</title><rect width=".023%" height="15" x=".507%" y="1813" fill="#D57427" fg:w="1" fg:x="22"/></g><g><title>_int_realloc (1 samples, 0.02%)</title><rect width=".023%" height="15" x=".507%" y="1797" fill="#DECF1D" fg:w="1" fg:x="22"/></g><g><title>_int_malloc (1 samples, 0.02%)</title><rect width=".023%" height="15" x=".507%" y="1781" fill="#CE601E" fg:w="1" fg:x="22"/></g><g><title>_RINvNtCsgVEU3eNk0wn_5alloc7raw_vec11finish_growNtNtB4_5alloc6GlobalECsjoxAk7uGzBK_5cargo.llvm.2525401338274485303 (1 samples, 0.02%)</title><rect width=".023%" height="15" x=".53%" y="1829" fill="#DA8A04" fg:w="1" fg:x="23"/></g><g><title>__GI___libc_realloc (1 samples, 0.02%)</title><rect width=".023%" height="15" x=".53%" y="1813" fill="#FABF0E" fg:w="1" fg:x="23"/></g><g><title>_int_realloc (1 samples, 0.02%)</title><rect width=".023%" height="15" x=".53%" y="1797" fill="#EF3C28" fg:w="1" fg:x="23"/></g><g><title>__memmove_avx_unaligned_erms (1 samples, 0.02%)</title><rect width=".023%" height="15" x=".53%" y="1781" fill="#CE1B30" fg:w="1" fg:x="23"/></g><g><title>_RINvNtCslAJt4rsqvXy_6winnow5token12take_while1_TINtNtNtCs5SG5FiVtMak_4core3ops5range14RangeInclusivehEBK_BK_hhEINtNtB4_6stream7LocatedRNtB1O_4BStrENtNtB4_5error12ContextErrorKb0_ECsjXfa599Qfro_9toml_edit (1 samples, 0.02%)</title><rect width=".023%" height="15" x=".553%" y="1829" fill="#E12308" fg:w="1" fg:x="24"/></g><g><title>_RINvNtNtCs5SG5FiVtMak_4core5slice4sort10merge_sortTNtNtNtCs91RHfw1kJHZ_5cargo4util9interning14InternedStringINtNtCsgVEU3eNk0wn_5alloc3vec3VecBN_EENCINvMNtB1N_5sliceSBM_7sort_byNCINvXs1e_NtNtNtB1N_11collections5btree3mapINtB2Y_8BTreeMapBN_B1I_EINtNtNtNtB6_4iter6traits7collect12FromIteratorBM_E9from_iterINtNtNtB40_8adapters3map3MapINtB2Y_4IterBN_IB1J_NtNtNtBT_4core7summary12FeatureValueEENCNvMs0_NtB5H_7packageNtB6n_7Package10serializeds_0EE0E0NCINvB2q_11stable_sortBM_B2k_E0NCB7b_s_0NCB7b_s0_0NCB7b_s1_0EBT_ (1 samples, 0.02%)</title><rect width=".023%" height="15" x=".576%" y="1829" fill="#FAD518" fg:w="1" fg:x="25"/></g><g><title>_RINvXs0_NtNtCsjXfa599Qfro_9toml_edit2de3keyNtB6_15KeyDeserializerNtNtCs4tzRlw4u1YC_5serde2de12Deserializer15deserialize_anyNtNtB13_5impls13StringVisitorECsd54lCtrCTyZ_4toml (1 samples, 0.02%)</title><rect width=".023%" height="15" x=".599%" y="1829" fill="#F77B16" fg:w="1" fg:x="26"/></g><g><title>__memmove_avx_unaligned_erms (1 samples, 0.02%)</title><rect width=".023%" height="15" x=".599%" y="1813" fill="#E78A26" fg:w="1" fg:x="26"/></g><g><title>_RINvXs15_NtCsbGDwpR2ddnS_3std4pathNtB7_4PathNtNtCs5SG5FiVtMak_4core4hash4Hash4hashNtNtNtNtB9_11collections4hash3map13DefaultHasherECs91RHfw1kJHZ_5cargo (1 samples, 0.02%)</title><rect width=".023%" height="15" x=".622%" y="1829" fill="#E7912E" fg:w="1" fg:x="27"/></g><g><title>_RINvXs2_Cs5VGRQ9yd1Sa_13serde_ignoredINtB6_4WrapINtNvXs31_NtNtCs4tzRlw4u1YC_5serde2de5implsINtNtNtNtCsgVEU3eNk0wn_5alloc11collections5btree3map8BTreeMapppENtBW_11Deserialize11deserialize10MapVisitorNtNtNtCs91RHfw1kJHZ_5cargo4util9interning14InternedStringINtNtB1A_3vec3VecB3a_EENCNvNtB3e_4toml22read_manifest_from_strs_0ENtBW_7Visitor9visit_mapQNtNtCsd54lCtrCTyZ_4toml5value15MapDeserializerEB3g_ (1 samples, 0.02%)</title><rect width=".023%" height="15" x=".645%" y="1829" fill="#FB760B" fg:w="1" fg:x="28"/></g><g><title>_RINvXsb_NtCsaBmMM8Aev1H_14cargo_platform3cfgNtB6_7CfgExprNtNtCs5SG5FiVtMak_4core4hash4Hash4hashNtNtNtNtCsbGDwpR2ddnS_3std11collections4hash3map13DefaultHasherECs91RHfw1kJHZ_5cargo (1 samples, 0.02%)</title><rect width=".023%" height="15" x=".668%" y="1829" fill="#D99319" fg:w="1" fg:x="29"/></g><g><title>_RINvXsc_NtNtCs91RHfw1kJHZ_5cargo4core10dependencyNtB6_10DependencyNtNtCs5SG5FiVtMak_4core4hash4Hash4hashNtNtNtNtCsbGDwpR2ddnS_3std11collections4hash3map13DefaultHasherEBa_.llvm.14666074212130275466 (1 samples, 0.02%)</title><rect width=".023%" height="15" x=".691%" y="1829" fill="#F75125" fg:w="1" fg:x="30"/></g><g><title>_RINvXsh_NtCsd54lCtrCTyZ_4toml5valueNtB6_5ValueNtNtCs4tzRlw4u1YC_5serde2de12Deserializer15deserialize_anyINtCs5VGRQ9yd1Sa_13serde_ignored4WrapNtNvNtNtCs91RHfw1kJHZ_5cargo4util4toml23version_trim_whitespace7VisitorNCNvB2j_22read_manifest_from_strs_0EEB2n_ (1 samples, 0.02%)</title><rect width=".023%" height="15" x=".714%" y="1829" fill="#D10C26" fg:w="1" fg:x="31"/></g><g><title>_RNCNvNtNtCsjXfa599Qfro_9toml_edit6parser5array11array_value0B7_ (1 samples, 0.02%)</title><rect width=".023%" height="15" x=".737%" y="1829" fill="#E30109" fg:w="1" fg:x="32"/></g><g><title>_RNCNvNtNtCsjXfa599Qfro_9toml_edit6parser5value5value0B7_ (1 samples, 0.02%)</title><rect width=".023%" height="15" x=".76%" y="1829" fill="#F82F2B" fg:w="1" fg:x="33"/></g><g><title>_RNvMNtNtNtCs91RHfw1kJHZ_5cargo4core8resolver9dep_cacheNtB2_15RegistryQueryer10build_deps (1 samples, 0.02%)</title><rect width=".023%" height="15" x=".783%" y="1829" fill="#DD0A1E" fg:w="1" fg:x="34"/></g><g><title>__memcmp_avx2_movbe (1 samples, 0.02%)</title><rect width=".023%" height="15" x=".783%" y="1813" fill="#D2E501" fg:w="1" fg:x="34"/></g><g><title>_RNvMs5_NtNtCs91RHfw1kJHZ_5cargo4util9interningNtB5_14InternedString3new (1 samples, 0.02%)</title><rect width=".023%" height="15" x=".806%" y="1829" fill="#DE9425" fg:w="1" fg:x="35"/></g><g><title>_RNvMs_NtCsjXfa599Qfro_9toml_edit4itemNtB4_4Item4span (1 samples, 0.02%)</title><rect width=".023%" height="15" x=".83%" y="1829" fill="#EA4321" fg:w="1" fg:x="36"/></g><g><title>_RNvMsu_NtNtCs91RHfw1kJHZ_5cargo4util4tomlNtB5_12TomlManifest16to_real_manifest (1 samples, 0.02%)</title><rect width=".023%" height="15" x=".853%" y="1829" fill="#F76223" fg:w="1" fg:x="37"/></g><g><title>_RNvMsx_NtNtNtCsgVEU3eNk0wn_5alloc11collections5btree3mapINtB5_8IntoIterNtNtBb_6string6StringNtNtCsd54lCtrCTyZ_4toml5value5ValueE10dying_nextCs91RHfw1kJHZ_5cargo.llvm.11294386640889789425 (1 samples, 0.02%)</title><rect width=".023%" height="15" x=".876%" y="1829" fill="#F78A34" fg:w="1" fg:x="38"/></g><g><title>_RNvNtNtCs91RHfw1kJHZ_5cargo4core7summary17build_feature_map (1 samples, 0.02%)</title><rect width=".023%" height="15" x=".899%" y="1829" fill="#D54F1E" fg:w="1" fg:x="39"/></g><g><title>_RNvNtNtCs91RHfw1kJHZ_5cargo4core8resolver7resolve (1 samples, 0.02%)</title><rect width=".023%" height="15" x=".922%" y="1829" fill="#F6B117" fg:w="1" fg:x="40"/></g><g><title>_RNvNtNtCsjXfa599Qfro_9toml_edit6parser5value9apply_raw (2 samples, 0.05%)</title><rect width=".046%" height="15" x=".945%" y="1829" fill="#E63E1B" fg:w="2" fg:x="41"/></g><g><title>__memmove_avx_unaligned_erms (1 samples, 0.02%)</title><rect width=".023%" height="15" x=".968%" y="1813" fill="#D89A08" fg:w="1" fg:x="42"/></g><g><title>_RNvNtNtCsjXfa599Qfro_9toml_edit6parser7strings12basic_string (1 samples, 0.02%)</title><rect width=".023%" height="15" x=".991%" y="1829" fill="#F4232D" fg:w="1" fg:x="43"/></g><g><title>_RNvNtNtNtCs91RHfw1kJHZ_5cargo4core8resolver6encode20encodable_package_id (1 samples, 0.02%)</title><rect width=".023%" height="15" x="1.014%" y="1829" fill="#FB730C" fg:w="1" fg:x="44"/></g><g><title>_RNvNtNtNtCsbiWzh4JGXYx_6memchr6memchr3x863avx6memchr (2 samples, 0.05%)</title><rect width=".046%" height="15" x="1.037%" y="1829" fill="#F03632" fg:w="2" fg:x="45"/></g><g><title>_RNvXs3_NtNtCs5SG5FiVtMak_4core4hash3sipINtB5_6HasherNtB5_11Sip13RoundsENtB7_6Hasher5writeCs91RHfw1kJHZ_5cargo.llvm.11294386640889789425 (1 samples, 0.02%)</title><rect width=".023%" height="15" x="1.083%" y="1829" fill="#E95434" fg:w="1" fg:x="47"/></g><g><title>_RNvXs3_NtNtCs5SG5FiVtMak_4core4hash3sipINtB5_6HasherNtB5_11Sip13RoundsENtB7_6Hasher5writeCs91RHfw1kJHZ_5cargo.llvm.14666074212130275466 (1 samples, 0.02%)</title><rect width=".023%" height="15" x="1.106%" y="1829" fill="#CF752F" fg:w="1" fg:x="48"/></g><g><title>_RNvXs3_NtNtCs5SG5FiVtMak_4core4hash3sipINtB5_6HasherNtB5_11Sip13RoundsENtB7_6Hasher5writeCs91RHfw1kJHZ_5cargo.llvm.6137529569853853886 (1 samples, 0.02%)</title><rect width=".023%" height="15" x="1.129%" y="1829" fill="#F92B27" fg:w="1" fg:x="49"/></g><g><title>_RNvXs8_NtCsgVEU3eNk0wn_5alloc3vecINtB5_3VecNtCs7eLoBKV2qX3_6semver10ComparatorENtNtCs5SG5FiVtMak_4core5clone5Clone5cloneCs91RHfw1kJHZ_5cargo (1 samples, 0.02%)</title><rect width=".023%" height="15" x="1.152%" y="1829" fill="#D1262C" fg:w="1" fg:x="50"/></g><g><title>__GI___libc_malloc (1 samples, 0.02%)</title><rect width=".023%" height="15" x="1.152%" y="1813" fill="#ECD417" fg:w="1" fg:x="50"/></g><g><title>_RNvXs8_NtCsgVEU3eNk0wn_5alloc3vecINtB5_3VecNtNtB7_6string6StringENtNtCs5SG5FiVtMak_4core5clone5Clone5cloneCs91RHfw1kJHZ_5cargo (1 samples, 0.02%)</title><rect width=".023%" height="15" x="1.175%" y="1829" fill="#F24F15" fg:w="1" fg:x="51"/></g><g><title>_RNvXsd_NtNtCs91RHfw1kJHZ_5cargo4core8manifestNtB5_8ManifestNtNtCs5SG5FiVtMak_4core5clone5Clone5clone.llvm.17410322496986008596 (1 samples, 0.02%)</title><rect width=".023%" height="15" x="1.198%" y="1829" fill="#D36023" fg:w="1" fg:x="52"/></g><g><title>__memmove_avx_unaligned_erms (1 samples, 0.02%)</title><rect width=".023%" height="15" x="1.198%" y="1813" fill="#FDD728" fg:w="1" fg:x="52"/></g><g><title>_RNvXsk_NtNtNtCsgVEU3eNk0wn_5alloc11collections5btree3mapINtB5_4IterNtNtBb_6string6StringINtNtNtCs91RHfw1kJHZ_5cargo4util4toml14MaybeWorkspaceNtB1r_14TomlDependencyNtB1r_23TomlWorkspaceDependencyEENtNtNtNtCs5SG5FiVtMak_4core4iter6traits8iterator8Iterator4nextB1v_ (1 samples, 0.02%)</title><rect width=".023%" height="15" x="1.221%" y="1829" fill="#D35115" fg:w="1" fg:x="53"/></g><g><title>_RNvXsm_NtCsgVEU3eNk0wn_5alloc3vecINtB5_3VecTNtNtNtCs91RHfw1kJHZ_5cargo4core10dependency10DependencyINtNtB7_2rc2RcIBw_NtNtBK_7summary7SummaryEEIB1A_INtNtNtNtB7_11collections5btree3set8BTreeSetNtNtNtBM_4util9interning14InternedStringEEEENtNtNtCs5SG5FiVtMak_4core3ops4drop4Drop4dropBM_ (1 samples, 0.02%)</title><rect width=".023%" height="15" x="1.244%" y="1829" fill="#D0BE26" fg:w="1" fg:x="54"/></g><g><title>_start (1 samples, 0.02%)</title><rect width=".023%" height="15" x="1.267%" y="1829" fill="#EBD526" fg:w="1" fg:x="55"/></g><g><title>_dl_start (1 samples, 0.02%)</title><rect width=".023%" height="15" x="1.267%" y="1813" fill="#ED7A26" fg:w="1" fg:x="55"/></g><g><title>_dl_sysdep_start (1 samples, 0.02%)</title><rect width=".023%" height="15" x="1.267%" y="1797" fill="#F4DA23" fg:w="1" fg:x="55"/></g><g><title>dl_main (1 samples, 0.02%)</title><rect width=".023%" height="15" x="1.267%" y="1781" fill="#F0442F" fg:w="1" fg:x="55"/></g><g><title>_dl_relocate_object (1 samples, 0.02%)</title><rect width=".023%" height="15" x="1.267%" y="1765" fill="#D21035" fg:w="1" fg:x="55"/></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.02%)</title><rect width=".023%" height="15" x="1.29%" y="1829" fill="#EB7C0C" fg:w="1" fg:x="56"/></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.02%)</title><rect width=".023%" height="15" x="1.29%" y="1813" fill="#E0A90B" fg:w="1" fg:x="56"/></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.02%)</title><rect width=".023%" height="15" x="1.29%" y="1797" fill="#FAA602" fg:w="1" fg:x="56"/></g><g><title>alloc::alloc::realloc (1 samples, 0.02%)</title><rect width=".023%" height="15" x="1.29%" y="1781" fill="#F2D81D" fg:w="1" fg:x="56"/></g><g><title>__GI___libc_realloc (1 samples, 0.02%)</title><rect width=".023%" height="15" x="1.29%" y="1765" fill="#E6741B" fg:w="1" fg:x="56"/></g><g><title>_int_realloc (1 samples, 0.02%)</title><rect width=".023%" height="15" x="1.29%" y="1749" fill="#E46330" fg:w="1" fg:x="56"/></g><g><title>_int_free (1 samples, 0.02%)</title><rect width=".023%" height="15" x="1.29%" y="1733" fill="#FD0B06" fg:w="1" fg:x="56"/></g><g><title>asn1_item_embed_free (1 samples, 0.02%)</title><rect width=".023%" height="15" x="1.313%" y="1829" fill="#F78F27" fg:w="1" fg:x="57"/></g><g><title>_int_free (1 samples, 0.02%)</title><rect width=".023%" height="15" x="1.313%" y="1813" fill="#EC610A" fg:w="1" fg:x="57"/></g><g><title>curl_mvsnprintf (1 samples, 0.02%)</title><rect width=".023%" height="15" x="1.336%" y="1829" fill="#E9D013" fg:w="1" fg:x="58"/></g><g><title>git__strntol64 (3 samples, 0.07%)</title><rect width=".069%" height="15" x="1.359%" y="1829" fill="#D8A402" fg:w="3" fg:x="59"/></g><g><title>git_packfile_free (1 samples, 0.02%)</title><rect width=".023%" height="15" x="1.429%" y="1829" fill="#DC8105" fg:w="1" fg:x="62"/></g><g><title>_int_free (1 samples, 0.02%)</title><rect width=".023%" height="15" x="1.429%" y="1813" fill="#F2110A" fg:w="1" fg:x="62"/></g><g><title>malloc_consolidate (1 samples, 0.02%)</title><rect width=".023%" height="15" x="1.429%" y="1797" fill="#F26B00" fg:w="1" fg:x="62"/></g><g><title>git_tree__parse_raw (1 samples, 0.02%)</title><rect width=".023%" height="15" x="1.452%" y="1829" fill="#FB1C1F" fg:w="1" fg:x="63"/></g><g><title>inflateInit_ (2 samples, 0.05%)</title><rect width=".046%" height="15" x="1.475%" y="1829" fill="#E9DF0A" fg:w="2" fg:x="64"/></g><g><title>__GI___libc_malloc (1 samples, 0.02%)</title><rect width=".023%" height="15" x="1.498%" y="1813" fill="#D7151B" fg:w="1" fg:x="65"/></g><g><title>_int_malloc (1 samples, 0.02%)</title><rect width=".023%" height="15" x="1.498%" y="1797" fill="#E81715" fg:w="1" fg:x="65"/></g><g><title>inflate_fast (2 samples, 0.05%)</title><rect width=".046%" height="15" x="1.521%" y="1829" fill="#F40517" fg:w="2" fg:x="66"/></g><g><title>pack_entry_find_offset (2 samples, 0.05%)</title><rect width=".046%" height="15" x="1.567%" y="1829" fill="#E2512E" fg:w="2" fg:x="68"/></g><g><title>__memcmp_avx2_movbe (2 samples, 0.05%)</title><rect width=".046%" height="15" x="1.567%" y="1813" fill="#F7461E" fg:w="2" fg:x="68"/></g><g><title>sha1_compression_states (2 samples, 0.05%)</title><rect width=".046%" height="15" x="1.613%" y="1829" fill="#D44413" fg:w="2" fg:x="70"/></g><g><title>std::path::Components::parse_next_component_back (1 samples, 0.02%)</title><rect width=".023%" height="15" x="1.659%" y="1829" fill="#F0BB0D" fg:w="1" fg:x="72"/></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::rposition (1 samples, 0.02%)</title><rect width=".023%" height="15" x="1.659%" y="1813" fill="#DF711A" fg:w="1" fg:x="72"/></g><g><title>stdalloc__malloc (1 samples, 0.02%)</title><rect width=".023%" height="15" x="1.682%" y="1829" fill="#CEC002" fg:w="1" fg:x="73"/></g><g><title>__GI___libc_malloc (1 samples, 0.02%)</title><rect width=".023%" height="15" x="1.682%" y="1813" fill="#F16C04" fg:w="1" fg:x="73"/></g><g><title>_int_malloc (1 samples, 0.02%)</title><rect width=".023%" height="15" x="1.682%" y="1797" fill="#F7AD31" fg:w="1" fg:x="73"/></g><g><title>cargo (76 samples, 1.75%)</title><rect width="1.751%" height="15" x="0%" y="1845" fill="#E07223" fg:w="76" fg:x="0"/></g><g><title>ubc_check (2 samples, 0.05%)</title><rect width=".046%" height="15" x="1.705%" y="1829" fill="#F59F1B" fg:w="2" fg:x="74"/></g><g><title>__libc_start_main (1 samples, 0.02%)</title><rect width=".023%" height="15" x="1.751%" y="1813" fill="#F5AC2C" fg:w="1" fg:x="76"/></g><g><title>main (1 samples, 0.02%)</title><rect width=".023%" height="15" x="1.751%" y="1797" fill="#EC170B" fg:w="1" fg:x="76"/></g><g><title>std::rt::lang_start_internal (1 samples, 0.02%)</title><rect width=".023%" height="15" x="1.751%" y="1781" fill="#CD7526" fg:w="1" fg:x="76"/></g><g><title>std::panic::catch_unwind (1 samples, 0.02%)</title><rect width=".023%" height="15" x="1.751%" y="1765" fill="#ED4819" fg:w="1" fg:x="76"/></g><g><title>std::panicking::try (1 samples, 0.02%)</title><rect width=".023%" height="15" x="1.751%" y="1749" fill="#F44609" fg:w="1" fg:x="76"/></g><g><title>std::panicking::try::do_call (1 samples, 0.02%)</title><rect width=".023%" height="15" x="1.751%" y="1733" fill="#D97D27" fg:w="1" fg:x="76"/></g><g><title>std::rt::lang_start_internal::_{{closure}} (1 samples, 0.02%)</title><rect width=".023%" height="15" x="1.751%" y="1717" fill="#EB240A" fg:w="1" fg:x="76"/></g><g><title>std::panic::catch_unwind (1 samples, 0.02%)</title><rect width=".023%" height="15" x="1.751%" y="1701" fill="#FB7B2F" fg:w="1" fg:x="76"/></g><g><title>std::panicking::try (1 samples, 0.02%)</title><rect width=".023%" height="15" x="1.751%" y="1685" fill="#DD0D0D" fg:w="1" fg:x="76"/></g><g><title>std::panicking::try::do_call (1 samples, 0.02%)</title><rect width=".023%" height="15" x="1.751%" y="1669" fill="#EE8309" fg:w="1" fg:x="76"/></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (1 samples, 0.02%)</title><rect width=".023%" height="15" x="1.751%" y="1653" fill="#D33208" fg:w="1" fg:x="76"/></g><g><title>std::rt::lang_start::_{{closure}} (1 samples, 0.02%)</title><rect width=".023%" height="15" x="1.751%" y="1637" fill="#F5B618" fg:w="1" fg:x="76"/></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (1 samples, 0.02%)</title><rect width=".023%" height="15" x="1.751%" y="1621" fill="#F20E25" fg:w="1" fg:x="76"/></g><g><title>core::ops::function::FnOnce::call_once (1 samples, 0.02%)</title><rect width=".023%" height="15" x="1.751%" y="1605" fill="#F6E40C" fg:w="1" fg:x="76"/></g><g><title>deserialize_struct::main (1 samples, 0.02%)</title><rect width=".023%" height="15" x="1.751%" y="1589" fill="#D5370F" fg:w="1" fg:x="76"/></g><g><title>deserialize_struct::benches (1 samples, 0.02%)</title><rect width=".023%" height="15" x="1.751%" y="1573" fill="#D10903" fg:w="1" fg:x="76"/></g><g><title>deserialize_struct::bench_twitter_Twitter (1 samples, 0.02%)</title><rect width=".023%" height="15" x="1.751%" y="1557" fill="#E63B1E" fg:w="1" fg:x="76"/></g><g><title>serde_json::de::from_slice (1 samples, 0.02%)</title><rect width=".023%" height="15" x="1.751%" y="1541" fill="#D17915" fg:w="1" fg:x="76"/></g><g><title>serde_json::de::from_trait (1 samples, 0.02%)</title><rect width=".023%" height="15" x="1.751%" y="1525" fill="#DC6D0D" fg:w="1" fg:x="76"/></g><g><title>json_benchmark::copy::twitter::_::&lt;impl serde::de::Deserialize for json_benchmark::copy::twitter::Twitter&gt;::deserialize (1 samples, 0.02%)</title><rect width=".023%" height="15" x="1.751%" y="1509" fill="#E81201" fg:w="1" fg:x="76"/></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_struct (1 samples, 0.02%)</title><rect width=".023%" height="15" x="1.751%" y="1493" fill="#D7292A" fg:w="1" fg:x="76"/></g><g><title>&lt;json_benchmark::copy::twitter::_::&lt;impl serde::de::Deserialize for json_benchmark::copy::twitter::Twitter&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.02%)</title><rect width=".023%" height="15" x="1.751%" y="1477" fill="#E07B24" fg:w="1" fg:x="76"/></g><g><title>serde::de::MapAccess::next_value (1 samples, 0.02%)</title><rect width=".023%" height="15" x="1.751%" y="1461" fill="#F07D03" fg:w="1" fg:x="76"/></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.02%)</title><rect width=".023%" height="15" x="1.751%" y="1445" fill="#CD6232" fg:w="1" fg:x="76"/></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.02%)</title><rect width=".023%" height="15" x="1.751%" y="1429" fill="#CDB925" fg:w="1" fg:x="76"/></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize (1 samples, 0.02%)</title><rect width=".023%" height="15" x="1.751%" y="1413" fill="#EECF0F" fg:w="1" fg:x="76"/></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_seq (1 samples, 0.02%)</title><rect width=".023%" height="15" x="1.751%" y="1397" fill="#D5C72A" fg:w="1" fg:x="76"/></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.02%)</title><rect width=".023%" height="15" x="1.751%" y="1381" fill="#EBC90B" fg:w="1" fg:x="76"/></g><g><title>serde::de::SeqAccess::next_element (1 samples, 0.02%)</title><rect width=".023%" height="15" x="1.751%" y="1365" fill="#CF2E0B" fg:w="1" fg:x="76"/></g><g><title>&lt;serde_json::de::SeqAccess&lt;R&gt; as serde::de::SeqAccess&gt;::next_element_seed (1 samples, 0.02%)</title><rect width=".023%" height="15" x="1.751%" y="1349" fill="#F12323" fg:w="1" fg:x="76"/></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.02%)</title><rect width=".023%" height="15" x="1.751%" y="1333" fill="#F3202F" fg:w="1" fg:x="76"/></g><g><title>json_benchmark::copy::twitter::_::&lt;impl serde::de::Deserialize for json_benchmark::copy::twitter::Status&gt;::deserialize (1 samples, 0.02%)</title><rect width=".023%" height="15" x="1.751%" y="1317" fill="#F7CA17" fg:w="1" fg:x="76"/></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_struct (1 samples, 0.02%)</title><rect width=".023%" height="15" x="1.751%" y="1301" fill="#DB660B" fg:w="1" fg:x="76"/></g><g><title>&lt;json_benchmark::copy::twitter::_::&lt;impl serde::de::Deserialize for json_benchmark::copy::twitter::Status&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.02%)</title><rect width=".023%" height="15" x="1.751%" y="1285" fill="#F36E2C" fg:w="1" fg:x="76"/></g><g><title>serde::de::MapAccess::next_value (1 samples, 0.02%)</title><rect width=".023%" height="15" x="1.751%" y="1269" fill="#DE4A36" fg:w="1" fg:x="76"/></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.02%)</title><rect width=".023%" height="15" x="1.751%" y="1253" fill="#D8630C" fg:w="1" fg:x="76"/></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.02%)</title><rect width=".023%" height="15" x="1.751%" y="1237" fill="#E2161A" fg:w="1" fg:x="76"/></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for core::option::Option&lt;T&gt;&gt;::deserialize (1 samples, 0.02%)</title><rect width=".023%" height="15" x="1.751%" y="1221" fill="#D9A30A" fg:w="1" fg:x="76"/></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_option (1 samples, 0.02%)</title><rect width=".023%" height="15" x="1.751%" y="1205" fill="#D51935" fg:w="1" fg:x="76"/></g><g><title>&lt;serde::de::impls::OptionVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_some (1 samples, 0.02%)</title><rect width=".023%" height="15" x="1.751%" y="1189" fill="#FC691A" fg:w="1" fg:x="76"/></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for alloc::boxed::Box&lt;T&gt;&gt;::deserialize (1 samples, 0.02%)</title><rect width=".023%" height="15" x="1.751%" y="1173" fill="#DC272B" fg:w="1" fg:x="76"/></g><g><title>json_benchmark::copy::twitter::_::&lt;impl serde::de::Deserialize for json_benchmark::copy::twitter::Status&gt;::deserialize (1 samples, 0.02%)</title><rect width=".023%" height="15" x="1.751%" y="1157" fill="#E54430" fg:w="1" fg:x="76"/></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_struct (1 samples, 0.02%)</title><rect width=".023%" height="15" x="1.751%" y="1141" fill="#FC0820" fg:w="1" fg:x="76"/></g><g><title>&lt;json_benchmark::copy::twitter::_::&lt;impl serde::de::Deserialize for json_benchmark::copy::twitter::Status&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.02%)</title><rect width=".023%" height="15" x="1.751%" y="1125" fill="#DF142B" fg:w="1" fg:x="76"/></g><g><title>serde::de::MapAccess::next_value (1 samples, 0.02%)</title><rect width=".023%" height="15" x="1.751%" y="1109" fill="#E55131" fg:w="1" fg:x="76"/></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.02%)</title><rect width=".023%" height="15" x="1.751%" y="1093" fill="#EC1C24" fg:w="1" fg:x="76"/></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.02%)</title><rect width=".023%" height="15" x="1.751%" y="1077" fill="#F9B91A" fg:w="1" fg:x="76"/></g><g><title>json_benchmark::copy::twitter::_::&lt;impl serde::de::Deserialize for json_benchmark::copy::twitter::User&gt;::deserialize (1 samples, 0.02%)</title><rect width=".023%" height="15" x="1.751%" y="1061" fill="#F9AE21" fg:w="1" fg:x="76"/></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_struct (1 samples, 0.02%)</title><rect width=".023%" height="15" x="1.751%" y="1045" fill="#E9C925" fg:w="1" fg:x="76"/></g><g><title>&lt;json_benchmark::copy::twitter::_::&lt;impl serde::de::Deserialize for json_benchmark::copy::twitter::User&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.02%)</title><rect width=".023%" height="15" x="1.751%" y="1029" fill="#DD4E1A" fg:w="1" fg:x="76"/></g><g><title>serde::de::MapAccess::next_value (1 samples, 0.02%)</title><rect width=".023%" height="15" x="1.751%" y="1013" fill="#FA7F1E" fg:w="1" fg:x="76"/></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.02%)</title><rect width=".023%" height="15" x="1.751%" y="997" fill="#E6312C" fg:w="1" fg:x="76"/></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.02%)</title><rect width=".023%" height="15" x="1.751%" y="981" fill="#E54317" fg:w="1" fg:x="76"/></g><g><title>&lt;json_benchmark::color::Color as serde::de::Deserialize&gt;::deserialize (1 samples, 0.02%)</title><rect width=".023%" height="15" x="1.751%" y="965" fill="#F9532F" fg:w="1" fg:x="76"/></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_str (1 samples, 0.02%)</title><rect width=".023%" height="15" x="1.751%" y="949" fill="#D72B03" fg:w="1" fg:x="76"/></g><g><title>&lt;serde_json::read::SliceRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.02%)</title><rect width=".023%" height="15" x="1.751%" y="933" fill="#EE9A0D" fg:w="1" fg:x="76"/></g><g><title>&lt;serde_json::read::SliceRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.02%)</title><rect width=".023%" height="15" x="1.751%" y="917" fill="#DB3802" fg:w="1" fg:x="76"/></g><g><title>[unknown] (2 samples, 0.05%)</title><rect width=".046%" height="15" x="1.751%" y="1829" fill="#E90004" fg:w="2" fg:x="76"/></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter_batched (1 samples, 0.02%)</title><rect width=".023%" height="15" x="1.774%" y="1813" fill="#EB1E07" fg:w="1" fg:x="77"/></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (1 samples, 0.02%)</title><rect width=".023%" height="15" x="1.774%" y="1797" fill="#FA4F0D" fg:w="1" fg:x="77"/></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.02%)</title><rect width=".023%" height="15" x="1.774%" y="1781" fill="#D39222" fg:w="1" fg:x="77"/></g><g><title>?? (1 samples, 0.02%)</title><rect width=".023%" height="15" x="1.774%" y="1765" fill="#E41626" fg:w="1" fg:x="77"/></g><g><title>core::iter::traits::iterator::Iterator::for_each (1 samples, 0.02%)</title><rect width=".023%" height="15" x="1.774%" y="1749" fill="#EBA805" fg:w="1" fg:x="77"/></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.02%)</title><rect width=".023%" height="15" x="1.774%" y="1733" fill="#DD9B10" fg:w="1" fg:x="77"/></g><g><title>core::iter::traits::iterator::Iterator::fold (1 samples, 0.02%)</title><rect width=".023%" height="15" x="1.774%" y="1717" fill="#D7D735" fg:w="1" fg:x="77"/></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (1 samples, 0.02%)</title><rect width=".023%" height="15" x="1.774%" y="1701" fill="#DF040A" fg:w="1" fg:x="77"/></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (1 samples, 0.02%)</title><rect width=".023%" height="15" x="1.774%" y="1685" fill="#EA6706" fg:w="1" fg:x="77"/></g><g><title>deserialize_struct::bench_citm_catalog_CitmCatalog::_{{closure}}::_{{closure}} (1 samples, 0.02%)</title><rect width=".023%" height="15" x="1.774%" y="1669" fill="#E36100" fg:w="1" fg:x="77"/></g><g><title>deserialize_struct::simd_json_parse_struct (1 samples, 0.02%)</title><rect width=".023%" height="15" x="1.774%" y="1653" fill="#EA9635" fg:w="1" fg:x="77"/></g><g><title>simd_json::serde::from_slice (1 samples, 0.02%)</title><rect width=".023%" height="15" x="1.774%" y="1637" fill="#E4C936" fg:w="1" fg:x="77"/></g><g><title>simd_json::Deserializer::from_slice (1 samples, 0.02%)</title><rect width=".023%" height="15" x="1.774%" y="1621" fill="#DE1625" fg:w="1" fg:x="77"/></g><g><title>?? (1 samples, 0.02%)</title><rect width=".023%" height="15" x="1.774%" y="1605" fill="#ED3520" fg:w="1" fg:x="77"/></g><g><title>simd_json::Deserializer::from_slice (1 samples, 0.02%)</title><rect width=".023%" height="15" x="1.774%" y="1589" fill="#E91935" fg:w="1" fg:x="77"/></g><g><title>simd_json::numberparse::correct::&lt;impl simd_json::Deserializer&gt;::parse_number (1 samples, 0.02%)</title><rect width=".023%" height="15" x="1.774%" y="1573" fill="#D22822" fg:w="1" fg:x="77"/></g><g><title>&lt;criterion::Criterion as core::default::Default&gt;::default (1 samples, 0.02%)</title><rect width=".023%" height="15" x="1.797%" y="1557" fill="#F1DC2C" fg:w="1" fg:x="78"/></g><g><title>once_cell::imp::OnceCell&lt;T&gt;::initialize (1 samples, 0.02%)</title><rect width=".023%" height="15" x="1.797%" y="1541" fill="#EB1C23" fg:w="1" fg:x="78"/></g><g><title>once_cell::imp::initialize_or_wait (1 samples, 0.02%)</title><rect width=".023%" height="15" x="1.797%" y="1525" fill="#D23811" fg:w="1" fg:x="78"/></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (1 samples, 0.02%)</title><rect width=".023%" height="15" x="1.797%" y="1509" fill="#E0821D" fg:w="1" fg:x="78"/></g><g><title>once_cell::imp::OnceCell&lt;T&gt;::initialize::_{{closure}} (1 samples, 0.02%)</title><rect width=".023%" height="15" x="1.797%" y="1493" fill="#EBD408" fg:w="1" fg:x="78"/></g><g><title>core::ops::function::FnOnce::call_once (1 samples, 0.02%)</title><rect width=".023%" height="15" x="1.797%" y="1477" fill="#DF2132" fg:w="1" fg:x="78"/></g><g><title>&lt;serde_json::read::SliceRead as serde_json::read::Read&gt;::ignore_str (1 samples, 0.02%)</title><rect width=".023%" height="15" x="1.797%" y="1461" fill="#DB950D" fg:w="1" fg:x="78"/></g><g><title>_rjem_je_eset_remove (1 samples, 0.02%)</title><rect width=".023%" height="15" x="1.843%" y="885" fill="#FA9C1D" fg:w="1" fg:x="80"/></g><g><title>_rjem_je_edata_heap_remove (1 samples, 0.02%)</title><rect width=".023%" height="15" x="1.843%" y="869" fill="#D8C113" fg:w="1" fg:x="80"/></g><g><title>ph_remove (1 samples, 0.02%)</title><rect width=".023%" height="15" x="1.843%" y="853" fill="#D8870E" fg:w="1" fg:x="80"/></g><g><title>ph_merge_children (1 samples, 0.02%)</title><rect width=".023%" height="15" x="1.843%" y="837" fill="#F12F05" fg:w="1" fg:x="80"/></g><g><title>phn_merge_siblings (1 samples, 0.02%)</title><rect width=".023%" height="15" x="1.843%" y="821" fill="#E92A23" fg:w="1" fg:x="80"/></g><g><title>phn_merge (1 samples, 0.02%)</title><rect width=".023%" height="15" x="1.843%" y="805" fill="#E70D06" fg:w="1" fg:x="80"/></g><g><title>phn_merge_ordered (1 samples, 0.02%)</title><rect width=".023%" height="15" x="1.843%" y="789" fill="#CFB528" fg:w="1" fg:x="80"/></g><g><title>phn_prev_set (1 samples, 0.02%)</title><rect width=".023%" height="15" x="1.843%" y="773" fill="#FEAD31" fg:w="1" fg:x="80"/></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (3 samples, 0.07%)</title><rect width=".069%" height="15" x="1.82%" y="1077" fill="#DD0126" fg:w="3" fg:x="79"/></g><g><title>alloc::alloc::dealloc (3 samples, 0.07%)</title><rect width=".069%" height="15" x="1.82%" y="1061" fill="#CE7C2E" fg:w="3" fg:x="79"/></g><g><title>__rust_dealloc (3 samples, 0.07%)</title><rect width=".069%" height="15" x="1.82%" y="1045" fill="#F9150B" fg:w="3" fg:x="79"/></g><g><title>&lt;jemallocator::Jemalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (3 samples, 0.07%)</title><rect width=".069%" height="15" x="1.82%" y="1029" fill="#DEC928" fg:w="3" fg:x="79"/></g><g><title>_rjem_je_sdallocx_default (2 samples, 0.05%)</title><rect width=".046%" height="15" x="1.843%" y="1013" fill="#EB3D1D" fg:w="2" fg:x="80"/></g><g><title>_rjem_je_large_dalloc (2 samples, 0.05%)</title><rect width=".046%" height="15" x="1.843%" y="997" fill="#DBCF03" fg:w="2" fg:x="80"/></g><g><title>large_dalloc_finish_impl (2 samples, 0.05%)</title><rect width=".046%" height="15" x="1.843%" y="981" fill="#DE382E" fg:w="2" fg:x="80"/></g><g><title>pac_dalloc_impl (2 samples, 0.05%)</title><rect width=".046%" height="15" x="1.843%" y="965" fill="#EF4C36" fg:w="2" fg:x="80"/></g><g><title>_rjem_je_extent_record (2 samples, 0.05%)</title><rect width=".046%" height="15" x="1.843%" y="949" fill="#E77C1B" fg:w="2" fg:x="80"/></g><g><title>extent_try_coalesce_large (2 samples, 0.05%)</title><rect width=".046%" height="15" x="1.843%" y="933" fill="#F9C306" fg:w="2" fg:x="80"/></g><g><title>extent_try_coalesce_impl (2 samples, 0.05%)</title><rect width=".046%" height="15" x="1.843%" y="917" fill="#EDAE2F" fg:w="2" fg:x="80"/></g><g><title>extent_coalesce (2 samples, 0.05%)</title><rect width=".046%" height="15" x="1.843%" y="901" fill="#CEC91F" fg:w="2" fg:x="80"/></g><g><title>extent_merge_impl (1 samples, 0.02%)</title><rect width=".023%" height="15" x="1.866%" y="885" fill="#E73934" fg:w="1" fg:x="81"/></g><g><title>__pthread_mutex_unlock_usercnt (1 samples, 0.02%)</title><rect width=".023%" height="15" x="1.866%" y="869" fill="#F8B116" fg:w="1" fg:x="81"/></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (4 samples, 0.09%)</title><rect width=".092%" height="15" x="1.82%" y="1125" fill="#D7D325" fg:w="4" fg:x="79"/></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (4 samples, 0.09%)</title><rect width=".092%" height="15" x="1.82%" y="1109" fill="#F18033" fg:w="4" fg:x="79"/></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.09%)</title><rect width=".092%" height="15" x="1.82%" y="1093" fill="#E3A51F" fg:w="4" fg:x="79"/></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter_batched (1 samples, 0.02%)</title><rect width=".023%" height="15" x="1.889%" y="1077" fill="#E4A718" fg:w="1" fg:x="82"/></g><g><title>_rjem_je_large_dalloc (2 samples, 0.05%)</title><rect width=".046%" height="15" x="1.912%" y="949" fill="#E48F0C" fg:w="2" fg:x="83"/></g><g><title>large_dalloc_finish_impl (2 samples, 0.05%)</title><rect width=".046%" height="15" x="1.912%" y="933" fill="#F99508" fg:w="2" fg:x="83"/></g><g><title>pac_dalloc_impl (2 samples, 0.05%)</title><rect width=".046%" height="15" x="1.912%" y="917" fill="#F3232C" fg:w="2" fg:x="83"/></g><g><title>_rjem_je_extent_record (1 samples, 0.02%)</title><rect width=".023%" height="15" x="1.935%" y="901" fill="#F65909" fg:w="1" fg:x="84"/></g><g><title>extent_try_coalesce_large (1 samples, 0.02%)</title><rect width=".023%" height="15" x="1.935%" y="885" fill="#E9D50D" fg:w="1" fg:x="84"/></g><g><title>extent_try_coalesce_impl (1 samples, 0.02%)</title><rect width=".023%" height="15" x="1.935%" y="869" fill="#E98D29" fg:w="1" fg:x="84"/></g><g><title>_rjem_je_emap_try_acquire_edata_neighbor (1 samples, 0.02%)</title><rect width=".023%" height="15" x="1.935%" y="853" fill="#EFA704" fg:w="1" fg:x="84"/></g><g><title>core::ptr::drop_in_place&lt;simd_json::Deserializer&gt; (3 samples, 0.07%)</title><rect width=".069%" height="15" x="1.912%" y="1093" fill="#D1D910" fg:w="3" fg:x="83"/></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;simd_json::value::tape::Node&gt;&gt; (3 samples, 0.07%)</title><rect width=".069%" height="15" x="1.912%" y="1077" fill="#DB5823" fg:w="3" fg:x="83"/></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;simd_json::value::tape::Node&gt;&gt; (3 samples, 0.07%)</title><rect width=".069%" height="15" x="1.912%" y="1061" fill="#DCC117" fg:w="3" fg:x="83"/></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.07%)</title><rect width=".069%" height="15" x="1.912%" y="1045" fill="#E65A34" fg:w="3" fg:x="83"/></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (3 samples, 0.07%)</title><rect width=".069%" height="15" x="1.912%" y="1029" fill="#FC6A13" fg:w="3" fg:x="83"/></g><g><title>alloc::alloc::dealloc (3 samples, 0.07%)</title><rect width=".069%" height="15" x="1.912%" y="1013" fill="#CE4A14" fg:w="3" fg:x="83"/></g><g><title>__rust_dealloc (3 samples, 0.07%)</title><rect width=".069%" height="15" x="1.912%" y="997" fill="#E68A2C" fg:w="3" fg:x="83"/></g><g><title>&lt;jemallocator::Jemalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (3 samples, 0.07%)</title><rect width=".069%" height="15" x="1.912%" y="981" fill="#EBB62B" fg:w="3" fg:x="83"/></g><g><title>_rjem_je_sdallocx_default (3 samples, 0.07%)</title><rect width=".069%" height="15" x="1.912%" y="965" fill="#F21033" fg:w="3" fg:x="83"/></g><g><title>_rjem_je_te_event_trigger (1 samples, 0.02%)</title><rect width=".023%" height="15" x="1.958%" y="949" fill="#F80904" fg:w="1" fg:x="85"/></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (1 samples, 0.02%)</title><rect width=".023%" height="15" x="1.982%" y="1045" fill="#D21F16" fg:w="1" fg:x="86"/></g><g><title>serde::de::MapAccess::next_key (2 samples, 0.05%)</title><rect width=".046%" height="15" x="2.005%" y="1045" fill="#EF3627" fg:w="2" fg:x="87"/></g><g><title>&lt;simd_json::serde::de::CommaSeparated as serde::de::MapAccess&gt;::next_key_seed (2 samples, 0.05%)</title><rect width=".046%" height="15" x="2.005%" y="1029" fill="#E66329" fg:w="2" fg:x="87"/></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (2 samples, 0.05%)</title><rect width=".046%" height="15" x="2.005%" y="1013" fill="#FD6A0C" fg:w="2" fg:x="87"/></g><g><title>&lt;json_benchmark::copy::citm_catalog::_::&lt;impl serde::de::Deserialize for json_benchmark::copy::citm_catalog::CitmCatalog&gt;::deserialize::__Field as serde::de::Deserialize&gt;::deserialize (2 samples, 0.05%)</title><rect width=".046%" height="15" x="2.005%" y="997" fill="#D52E29" fg:w="2" fg:x="87"/></g><g><title>&lt;simd_json::serde::de::MapKey as serde::de::Deserializer&gt;::deserialize_identifier (2 samples, 0.05%)</title><rect width=".046%" height="15" x="2.005%" y="981" fill="#D78523" fg:w="2" fg:x="87"/></g><g><title>&lt;simd_json::serde::de::MapKey as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.05%)</title><rect width=".046%" height="15" x="2.005%" y="965" fill="#D51C05" fg:w="2" fg:x="87"/></g><g><title>serde::de::Visitor::visit_borrowed_str (2 samples, 0.05%)</title><rect width=".046%" height="15" x="2.005%" y="949" fill="#D74D31" fg:w="2" fg:x="87"/></g><g><title>&lt;json_benchmark::copy::citm_catalog::_::&lt;impl serde::de::Deserialize for json_benchmark::copy::citm_catalog::CitmCatalog&gt;::deserialize::__FieldVisitor as serde::de::Visitor&gt;::visit_str (2 samples, 0.05%)</title><rect width=".046%" height="15" x="2.005%" y="933" fill="#F86416" fg:w="2" fg:x="87"/></g><g><title>&lt;json_benchmark::prim_str::PrimStr&lt;T&gt; as core::cmp::Ord&gt;::cmp (5 samples, 0.12%)</title><rect width=".115%" height="15" x="2.12%" y="869" fill="#D04309" fg:w="5" fg:x="92"/></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for u32&gt;::cmp (5 samples, 0.12%)</title><rect width=".115%" height="15" x="2.12%" y="853" fill="#DB8515" fg:w="5" fg:x="92"/></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::read (1 samples, 0.02%)</title><rect width=".023%" height="15" x="2.235%" y="837" fill="#F62E1D" fg:w="1" fg:x="97"/></g><g><title>core::ptr::read (1 samples, 0.02%)</title><rect width=".023%" height="15" x="2.235%" y="821" fill="#F6B934" fg:w="1" fg:x="97"/></g><g><title>?? (2 samples, 0.05%)</title><rect width=".046%" height="15" x="2.235%" y="853" fill="#FC880B" fg:w="2" fg:x="97"/></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (1 samples, 0.02%)</title><rect width=".023%" height="15" x="2.258%" y="837" fill="#DB8A35" fg:w="1" fg:x="98"/></g><g><title>core::ptr::write (1 samples, 0.02%)</title><rect width=".023%" height="15" x="2.258%" y="821" fill="#D33317" fg:w="1" fg:x="98"/></g><g><title>_rjem_je_malloc_default (1 samples, 0.02%)</title><rect width=".023%" height="15" x="2.281%" y="741" fill="#F7DD1C" fg:w="1" fg:x="99"/></g><g><title>imalloc (1 samples, 0.02%)</title><rect width=".023%" height="15" x="2.281%" y="725" fill="#FBDE2D" fg:w="1" fg:x="99"/></g><g><title>imalloc_body (1 samples, 0.02%)</title><rect width=".023%" height="15" x="2.281%" y="709" fill="#D9A235" fg:w="1" fg:x="99"/></g><g><title>imalloc_no_sample (1 samples, 0.02%)</title><rect width=".023%" height="15" x="2.281%" y="693" fill="#E55D0E" fg:w="1" fg:x="99"/></g><g><title>iallocztm (1 samples, 0.02%)</title><rect width=".023%" height="15" x="2.281%" y="677" fill="#D14331" fg:w="1" fg:x="99"/></g><g><title>arena_malloc (1 samples, 0.02%)</title><rect width=".023%" height="15" x="2.281%" y="661" fill="#D5571D" fg:w="1" fg:x="99"/></g><g><title>tcache_alloc_small (1 samples, 0.02%)</title><rect width=".023%" height="15" x="2.281%" y="645" fill="#CD9734" fg:w="1" fg:x="99"/></g><g><title>_rjem_je_tcache_alloc_small_hard (1 samples, 0.02%)</title><rect width=".023%" height="15" x="2.281%" y="629" fill="#FDD727" fg:w="1" fg:x="99"/></g><g><title>_rjem_je_arena_cache_bin_fill_small (1 samples, 0.02%)</title><rect width=".023%" height="15" x="2.281%" y="613" fill="#DDDC29" fg:w="1" fg:x="99"/></g><g><title>arena_slab_alloc (1 samples, 0.02%)</title><rect width=".023%" height="15" x="2.281%" y="597" fill="#DA8515" fg:w="1" fg:x="99"/></g><g><title>_rjem_je_pa_alloc (1 samples, 0.02%)</title><rect width=".023%" height="15" x="2.281%" y="581" fill="#DDC12B" fg:w="1" fg:x="99"/></g><g><title>pai_alloc (1 samples, 0.02%)</title><rect width=".023%" height="15" x="2.281%" y="565" fill="#F08034" fg:w="1" fg:x="99"/></g><g><title>pac_alloc_impl (1 samples, 0.02%)</title><rect width=".023%" height="15" x="2.281%" y="549" fill="#FD720C" fg:w="1" fg:x="99"/></g><g><title>pac_alloc_real (1 samples, 0.02%)</title><rect width=".023%" height="15" x="2.281%" y="533" fill="#D7DF2F" fg:w="1" fg:x="99"/></g><g><title>_rjem_je_ecache_alloc_grow (1 samples, 0.02%)</title><rect width=".023%" height="15" x="2.281%" y="517" fill="#F8E117" fg:w="1" fg:x="99"/></g><g><title>extent_alloc_retained (1 samples, 0.02%)</title><rect width=".023%" height="15" x="2.281%" y="501" fill="#FA6C00" fg:w="1" fg:x="99"/></g><g><title>extent_recycle (1 samples, 0.02%)</title><rect width=".023%" height="15" x="2.281%" y="485" fill="#E4D007" fg:w="1" fg:x="99"/></g><g><title>extent_recycle_extract (1 samples, 0.02%)</title><rect width=".023%" height="15" x="2.281%" y="469" fill="#F42D0A" fg:w="1" fg:x="99"/></g><g><title>_rjem_je_eset_fit (1 samples, 0.02%)</title><rect width=".023%" height="15" x="2.281%" y="453" fill="#CF7D19" fg:w="1" fg:x="99"/></g><g><title>eset_first_fit (1 samples, 0.02%)</title><rect width=".023%" height="15" x="2.281%" y="437" fill="#D2C312" fg:w="1" fg:x="99"/></g><g><title>_rjem_je_edata_heap_first (1 samples, 0.02%)</title><rect width=".023%" height="15" x="2.281%" y="421" fill="#F9500C" fg:w="1" fg:x="99"/></g><g><title>ph_first (1 samples, 0.02%)</title><rect width=".023%" height="15" x="2.281%" y="405" fill="#DD4109" fg:w="1" fg:x="99"/></g><g><title>ph_merge_aux (1 samples, 0.02%)</title><rect width=".023%" height="15" x="2.281%" y="389" fill="#EB3124" fg:w="1" fg:x="99"/></g><g><title>alloc::boxed::Box&lt;T,A&gt;::new_uninit_in (2 samples, 0.05%)</title><rect width=".046%" height="15" x="2.281%" y="853" fill="#E12014" fg:w="2" fg:x="99"/></g><g><title>alloc::boxed::Box&lt;T,A&gt;::try_new_uninit_in (2 samples, 0.05%)</title><rect width=".046%" height="15" x="2.281%" y="837" fill="#D78D2E" fg:w="2" fg:x="99"/></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.05%)</title><rect width=".046%" height="15" x="2.281%" y="821" fill="#FAA02F" fg:w="2" fg:x="99"/></g><g><title>?? (2 samples, 0.05%)</title><rect width=".046%" height="15" x="2.281%" y="805" fill="#D8DE28" fg:w="2" fg:x="99"/></g><g><title>alloc::alloc::alloc (2 samples, 0.05%)</title><rect width=".046%" height="15" x="2.281%" y="789" fill="#EAD927" fg:w="2" fg:x="99"/></g><g><title>__rust_alloc (2 samples, 0.05%)</title><rect width=".046%" height="15" x="2.281%" y="773" fill="#CFB228" fg:w="2" fg:x="99"/></g><g><title>&lt;jemallocator::Jemalloc as core::alloc::global::GlobalAlloc&gt;::alloc (2 samples, 0.05%)</title><rect width=".046%" height="15" x="2.281%" y="757" fill="#DD880D" fg:w="2" fg:x="99"/></g><g><title>_rjem_malloc (1 samples, 0.02%)</title><rect width=".023%" height="15" x="2.304%" y="741" fill="#F9C70A" fg:w="1" fg:x="100"/></g><g><title>imalloc_fastpath (1 samples, 0.02%)</title><rect width=".023%" height="15" x="2.304%" y="725" fill="#F9DE0D" fg:w="1" fg:x="100"/></g><g><title>cache_bin_alloc_easy (1 samples, 0.02%)</title><rect width=".023%" height="15" x="2.304%" y="709" fill="#F4B926" fg:w="1" fg:x="100"/></g><g><title>cache_bin_alloc_impl (1 samples, 0.02%)</title><rect width=".023%" height="15" x="2.304%" y="693" fill="#ECCA09" fg:w="1" fg:x="100"/></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.05%)</title><rect width=".046%" height="15" x="2.327%" y="853" fill="#FAE525" fg:w="2" fg:x="101"/></g><g><title>?? (13 samples, 0.30%)</title><rect width=".299%" height="15" x="2.12%" y="885" fill="#CEAE17" fg:w="13" fg:x="92"/></g><g><title>?? (8 samples, 0.18%)</title><rect width=".184%" height="15" x="2.235%" y="869" fill="#D3212B" fg:w="8" fg:x="97"/></g><g><title>alloc::collections::btree::node::move_to_slice (2 samples, 0.05%)</title><rect width=".046%" height="15" x="2.373%" y="853" fill="#F53A32" fg:w="2" fg:x="103"/></g><g><title>core::intrinsics::copy_nonoverlapping (2 samples, 0.05%)</title><rect width=".046%" height="15" x="2.373%" y="837" fill="#F44424" fg:w="2" fg:x="103"/></g><g><title>__memmove_avx_unaligned_erms (2 samples, 0.05%)</title><rect width=".046%" height="15" x="2.373%" y="821" fill="#E8E50F" fg:w="2" fg:x="103"/></g><g><title>_rjem_je_bitmap_init (1 samples, 0.02%)</title><rect width=".023%" height="15" x="2.419%" y="613" fill="#FE1E17" fg:w="1" fg:x="105"/></g><g><title>_rjem_je_tcache_alloc_small_hard (2 samples, 0.05%)</title><rect width=".046%" height="15" x="2.419%" y="661" fill="#EBA00E" fg:w="2" fg:x="105"/></g><g><title>_rjem_je_arena_cache_bin_fill_small (2 samples, 0.05%)</title><rect width=".046%" height="15" x="2.419%" y="645" fill="#D49B2C" fg:w="2" fg:x="105"/></g><g><title>arena_slab_alloc (2 samples, 0.05%)</title><rect width=".046%" height="15" x="2.419%" y="629" fill="#E20232" fg:w="2" fg:x="105"/></g><g><title>_rjem_je_pa_alloc (1 samples, 0.02%)</title><rect width=".023%" height="15" x="2.442%" y="613" fill="#EAB106" fg:w="1" fg:x="106"/></g><g><title>pai_alloc (1 samples, 0.02%)</title><rect width=".023%" height="15" x="2.442%" y="597" fill="#D91809" fg:w="1" fg:x="106"/></g><g><title>pac_alloc_impl (1 samples, 0.02%)</title><rect width=".023%" height="15" x="2.442%" y="581" fill="#DC0D2E" fg:w="1" fg:x="106"/></g><g><title>pac_alloc_real (1 samples, 0.02%)</title><rect width=".023%" height="15" x="2.442%" y="565" fill="#EFDD1B" fg:w="1" fg:x="106"/></g><g><title>_rjem_je_ecache_alloc_grow (1 samples, 0.02%)</title><rect width=".023%" height="15" x="2.442%" y="549" fill="#DEC619" fg:w="1" fg:x="106"/></g><g><title>extent_alloc_retained (1 samples, 0.02%)</title><rect width=".023%" height="15" x="2.442%" y="533" fill="#D3630D" fg:w="1" fg:x="106"/></g><g><title>extent_recycle (1 samples, 0.02%)</title><rect width=".023%" height="15" x="2.442%" y="517" fill="#E86F1F" fg:w="1" fg:x="106"/></g><g><title>extent_recycle_split (1 samples, 0.02%)</title><rect width=".023%" height="15" x="2.442%" y="501" fill="#F55225" fg:w="1" fg:x="106"/></g><g><title>extent_split_interior (1 samples, 0.02%)</title><rect width=".023%" height="15" x="2.442%" y="485" fill="#E3952E" fg:w="1" fg:x="106"/></g><g><title>extent_split_impl (1 samples, 0.02%)</title><rect width=".023%" height="15" x="2.442%" y="469" fill="#DA2432" fg:w="1" fg:x="106"/></g><g><title>_rjem_je_edata_cache_get (1 samples, 0.02%)</title><rect width=".023%" height="15" x="2.442%" y="453" fill="#E25030" fg:w="1" fg:x="106"/></g><g><title>_rjem_je_edata_avail_remove (1 samples, 0.02%)</title><rect width=".023%" height="15" x="2.442%" y="437" fill="#EEE00F" fg:w="1" fg:x="106"/></g><g><title>ph_remove (1 samples, 0.02%)</title><rect width=".023%" height="15" x="2.442%" y="421" fill="#F1880A" fg:w="1" fg:x="106"/></g><g><title>ph_merge_children (1 samples, 0.02%)</title><rect width=".023%" height="15" x="2.442%" y="405" fill="#D0202D" fg:w="1" fg:x="106"/></g><g><title>phn_merge_siblings (1 samples, 0.02%)</title><rect width=".023%" height="15" x="2.442%" y="389" fill="#CF8709" fg:w="1" fg:x="106"/></g><g><title>alloc::boxed::Box&lt;T,A&gt;::new_uninit_in (3 samples, 0.07%)</title><rect width=".069%" height="15" x="2.419%" y="885" fill="#CE562C" fg:w="3" fg:x="105"/></g><g><title>alloc::boxed::Box&lt;T,A&gt;::try_new_uninit_in (3 samples, 0.07%)</title><rect width=".069%" height="15" x="2.419%" y="869" fill="#F5B10F" fg:w="3" fg:x="105"/></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (3 samples, 0.07%)</title><rect width=".069%" height="15" x="2.419%" y="853" fill="#CE4032" fg:w="3" fg:x="105"/></g><g><title>?? (3 samples, 0.07%)</title><rect width=".069%" height="15" x="2.419%" y="837" fill="#EA2428" fg:w="3" fg:x="105"/></g><g><title>alloc::alloc::alloc (3 samples, 0.07%)</title><rect width=".069%" height="15" x="2.419%" y="821" fill="#D54008" fg:w="3" fg:x="105"/></g><g><title>__rust_alloc (3 samples, 0.07%)</title><rect width=".069%" height="15" x="2.419%" y="805" fill="#D24B24" fg:w="3" fg:x="105"/></g><g><title>&lt;jemallocator::Jemalloc as core::alloc::global::GlobalAlloc&gt;::alloc (3 samples, 0.07%)</title><rect width=".069%" height="15" x="2.419%" y="789" fill="#E55815" fg:w="3" fg:x="105"/></g><g><title>_rjem_je_malloc_default (3 samples, 0.07%)</title><rect width=".069%" height="15" x="2.419%" y="773" fill="#FCCC2F" fg:w="3" fg:x="105"/></g><g><title>imalloc (3 samples, 0.07%)</title><rect width=".069%" height="15" x="2.419%" y="757" fill="#D04D1B" fg:w="3" fg:x="105"/></g><g><title>imalloc_body (3 samples, 0.07%)</title><rect width=".069%" height="15" x="2.419%" y="741" fill="#DD4C1A" fg:w="3" fg:x="105"/></g><g><title>imalloc_no_sample (3 samples, 0.07%)</title><rect width=".069%" height="15" x="2.419%" y="725" fill="#E18B12" fg:w="3" fg:x="105"/></g><g><title>iallocztm (3 samples, 0.07%)</title><rect width=".069%" height="15" x="2.419%" y="709" fill="#E6890B" fg:w="3" fg:x="105"/></g><g><title>arena_malloc (3 samples, 0.07%)</title><rect width=".069%" height="15" x="2.419%" y="693" fill="#D41C01" fg:w="3" fg:x="105"/></g><g><title>tcache_alloc_small (3 samples, 0.07%)</title><rect width=".069%" height="15" x="2.419%" y="677" fill="#F8A411" fg:w="3" fg:x="105"/></g><g><title>cache_bin_alloc (1 samples, 0.02%)</title><rect width=".023%" height="15" x="2.465%" y="661" fill="#DEAB2A" fg:w="1" fg:x="107"/></g><g><title>cache_bin_alloc_impl (1 samples, 0.02%)</title><rect width=".023%" height="15" x="2.465%" y="645" fill="#F3542D" fg:w="1" fg:x="107"/></g><g><title>?? (19 samples, 0.44%)</title><rect width=".438%" height="15" x="2.12%" y="901" fill="#FC3117" fg:w="19" fg:x="92"/></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (3 samples, 0.07%)</title><rect width=".069%" height="15" x="2.489%" y="885" fill="#D71307" fg:w="3" fg:x="108"/></g><g><title>?? (20 samples, 0.46%)</title><rect width=".461%" height="15" x="2.12%" y="917" fill="#EE5129" fg:w="20" fg:x="92"/></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert::_{{closure}} (1 samples, 0.02%)</title><rect width=".023%" height="15" x="2.558%" y="901" fill="#D2C725" fg:w="1" fg:x="111"/></g><g><title>?? (1 samples, 0.02%)</title><rect width=".023%" height="15" x="2.558%" y="885" fill="#F4C031" fg:w="1" fg:x="111"/></g><g><title>alloc::collections::btree::mem::take_mut (1 samples, 0.02%)</title><rect width=".023%" height="15" x="2.558%" y="869" fill="#E2D30B" fg:w="1" fg:x="111"/></g><g><title>alloc::collections::btree::mem::replace (1 samples, 0.02%)</title><rect width=".023%" height="15" x="2.558%" y="853" fill="#ECA236" fg:w="1" fg:x="111"/></g><g><title>alloc::collections::btree::mem::take_mut::_{{closure}} (1 samples, 0.02%)</title><rect width=".023%" height="15" x="2.558%" y="837" fill="#DCE509" fg:w="1" fg:x="111"/></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;::push_internal_level::_{{closure}} (1 samples, 0.02%)</title><rect width=".023%" height="15" x="2.558%" y="821" fill="#FA5716" fg:w="1" fg:x="111"/></g><g><title>?? (1 samples, 0.02%)</title><rect width=".023%" height="15" x="2.558%" y="805" fill="#EF2B11" fg:w="1" fg:x="111"/></g><g><title>?? (1 samples, 0.02%)</title><rect width=".023%" height="15" x="2.558%" y="789" fill="#E7B119" fg:w="1" fg:x="111"/></g><g><title>?? (1 samples, 0.02%)</title><rect width=".023%" height="15" x="2.558%" y="773" fill="#DBB301" fg:w="1" fg:x="111"/></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (1 samples, 0.02%)</title><rect width=".023%" height="15" x="2.558%" y="757" fill="#EEDB35" fg:w="1" fg:x="111"/></g><g><title>core::ptr::write (1 samples, 0.02%)</title><rect width=".023%" height="15" x="2.558%" y="741" fill="#E8A724" fg:w="1" fg:x="111"/></g><g><title>?? (22 samples, 0.51%)</title><rect width=".507%" height="15" x="2.12%" y="933" fill="#F41333" fg:w="22" fg:x="92"/></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.05%)</title><rect width=".046%" height="15" x="2.581%" y="917" fill="#E00616" fg:w="2" fg:x="112"/></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (25 samples, 0.58%)</title><rect width=".576%" height="15" x="2.074%" y="949" fill="#E09105" fg:w="25" fg:x="90"/></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.02%)</title><rect width=".023%" height="15" x="2.627%" y="933" fill="#EA8231" fg:w="1" fg:x="114"/></g><g><title>?? (1 samples, 0.02%)</title><rect width=".023%" height="15" x="2.742%" y="837" fill="#FE0602" fg:w="1" fg:x="119"/></g><g><title>&lt;simd_json::serde::de::CommaSeparated as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.02%)</title><rect width=".023%" height="15" x="2.742%" y="821" fill="#D0602E" fg:w="1" fg:x="119"/></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.02%)</title><rect width=".023%" height="15" x="2.857%" y="773" fill="#EF0327" fg:w="1" fg:x="124"/></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.02%)</title><rect width=".023%" height="15" x="2.857%" y="757" fill="#E9D201" fg:w="1" fg:x="124"/></g><g><title>&lt;u32 as core::num::FromStrRadixHelper&gt;::checked_add (1 samples, 0.02%)</title><rect width=".023%" height="15" x="2.88%" y="773" fill="#F48925" fg:w="1" fg:x="125"/></g><g><title>core::num::&lt;impl u32&gt;::checked_add (1 samples, 0.02%)</title><rect width=".023%" height="15" x="2.88%" y="757" fill="#F08802" fg:w="1" fg:x="125"/></g><g><title>core::num::&lt;impl u32&gt;::overflowing_add (1 samples, 0.02%)</title><rect width=".023%" height="15" x="2.88%" y="741" fill="#EF1225" fg:w="1" fg:x="125"/></g><g><title>&lt;u32 as core::num::FromStrRadixHelper&gt;::checked_mul (1 samples, 0.02%)</title><rect width=".023%" height="15" x="2.903%" y="773" fill="#DAB916" fg:w="1" fg:x="126"/></g><g><title>core::num::&lt;impl u32&gt;::checked_mul (1 samples, 0.02%)</title><rect width=".023%" height="15" x="2.903%" y="757" fill="#E1DA04" fg:w="1" fg:x="126"/></g><g><title>core::num::&lt;impl u32&gt;::overflowing_mul (1 samples, 0.02%)</title><rect width=".023%" height="15" x="2.903%" y="741" fill="#E6B620" fg:w="1" fg:x="126"/></g><g><title>&lt;simd_json::serde::de::CommaSeparated as serde::de::MapAccess&gt;::next_key_seed (9 samples, 0.21%)</title><rect width=".207%" height="15" x="2.742%" y="917" fill="#F2382B" fg:w="9" fg:x="119"/></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (9 samples, 0.21%)</title><rect width=".207%" height="15" x="2.742%" y="901" fill="#E96318" fg:w="9" fg:x="119"/></g><g><title>&lt;json_benchmark::prim_str::PrimStr&lt;T&gt; as serde::de::Deserialize&gt;::deserialize (9 samples, 0.21%)</title><rect width=".207%" height="15" x="2.742%" y="885" fill="#EAD12A" fg:w="9" fg:x="119"/></g><g><title>&lt;simd_json::serde::de::MapKey as serde::de::Deserializer&gt;::deserialize_str (9 samples, 0.21%)</title><rect width=".207%" height="15" x="2.742%" y="869" fill="#E3070C" fg:w="9" fg:x="119"/></g><g><title>&lt;simd_json::serde::de::MapKey as serde::de::Deserializer&gt;::deserialize_any (9 samples, 0.21%)</title><rect width=".207%" height="15" x="2.742%" y="853" fill="#F5CB2B" fg:w="9" fg:x="119"/></g><g><title>serde::de::Visitor::visit_borrowed_str (8 samples, 0.18%)</title><rect width=".184%" height="15" x="2.765%" y="837" fill="#EECD21" fg:w="8" fg:x="120"/></g><g><title>&lt;&lt;json_benchmark::prim_str::PrimStr&lt;T&gt; as serde::de::Deserialize&gt;::deserialize::Visitor&lt;T&gt; as serde::de::Visitor&gt;::visit_str (8 samples, 0.18%)</title><rect width=".184%" height="15" x="2.765%" y="821" fill="#E73807" fg:w="8" fg:x="120"/></g><g><title>core::num::&lt;impl core::str::traits::FromStr for u32&gt;::from_str (8 samples, 0.18%)</title><rect width=".184%" height="15" x="2.765%" y="805" fill="#F4BA1D" fg:w="8" fg:x="120"/></g><g><title>core::num::from_str_radix (8 samples, 0.18%)</title><rect width=".184%" height="15" x="2.765%" y="789" fill="#EA6F1F" fg:w="8" fg:x="120"/></g><g><title>core::char::methods::&lt;impl char&gt;::to_digit (1 samples, 0.02%)</title><rect width=".023%" height="15" x="2.926%" y="773" fill="#F1950A" fg:w="1" fg:x="127"/></g><g><title>core::num::&lt;impl u32&gt;::wrapping_sub (1 samples, 0.02%)</title><rect width=".023%" height="15" x="2.926%" y="757" fill="#F9CE2C" fg:w="1" fg:x="127"/></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (6 samples, 0.14%)</title><rect width=".138%" height="15" x="3.18%" y="837" fill="#FB991E" fg:w="6" fg:x="138"/></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (2 samples, 0.05%)</title><rect width=".046%" height="15" x="3.364%" y="741" fill="#EF9826" fg:w="2" fg:x="146"/></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.02%)</title><rect width=".023%" height="15" x="3.41%" y="725" fill="#F98B2F" fg:w="1" fg:x="148"/></g><g><title>?? (2 samples, 0.05%)</title><rect width=".046%" height="15" x="3.41%" y="741" fill="#F44023" fg:w="2" fg:x="148"/></g><g><title>core::slice::&lt;impl [T]&gt;::get (1 samples, 0.02%)</title><rect width=".023%" height="15" x="3.433%" y="725" fill="#D82E0F" fg:w="1" fg:x="149"/></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (1 samples, 0.02%)</title><rect width=".023%" height="15" x="3.433%" y="709" fill="#FA4A13" fg:w="1" fg:x="149"/></g><g><title>serde::de::MapAccess::next_key (16 samples, 0.37%)</title><rect width=".369%" height="15" x="3.318%" y="837" fill="#F92A21" fg:w="16" fg:x="144"/></g><g><title>&lt;simd_json::serde::de::CommaSeparated as serde::de::MapAccess&gt;::next_key_seed (16 samples, 0.37%)</title><rect width=".369%" height="15" x="3.318%" y="821" fill="#F29511" fg:w="16" fg:x="144"/></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (16 samples, 0.37%)</title><rect width=".369%" height="15" x="3.318%" y="805" fill="#F41D15" fg:w="16" fg:x="144"/></g><g><title>&lt;json_benchmark::copy::citm_catalog::_::&lt;impl serde::de::Deserialize for json_benchmark::copy::citm_catalog::Event&gt;::deserialize::__Field as serde::de::Deserialize&gt;::deserialize (16 samples, 0.37%)</title><rect width=".369%" height="15" x="3.318%" y="789" fill="#DC8225" fg:w="16" fg:x="144"/></g><g><title>&lt;simd_json::serde::de::MapKey as serde::de::Deserializer&gt;::deserialize_identifier (16 samples, 0.37%)</title><rect width=".369%" height="15" x="3.318%" y="773" fill="#D34302" fg:w="16" fg:x="144"/></g><g><title>&lt;simd_json::serde::de::MapKey as serde::de::Deserializer&gt;::deserialize_any (16 samples, 0.37%)</title><rect width=".369%" height="15" x="3.318%" y="757" fill="#EB4434" fg:w="16" fg:x="144"/></g><g><title>serde::de::Visitor::visit_borrowed_str (10 samples, 0.23%)</title><rect width=".23%" height="15" x="3.456%" y="741" fill="#F68E03" fg:w="10" fg:x="150"/></g><g><title>&lt;json_benchmark::copy::citm_catalog::_::&lt;impl serde::de::Deserialize for json_benchmark::copy::citm_catalog::Event&gt;::deserialize::__FieldVisitor as serde::de::Visitor&gt;::visit_str (10 samples, 0.23%)</title><rect width=".23%" height="15" x="3.456%" y="725" fill="#F11907" fg:w="10" fg:x="150"/></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (8 samples, 0.18%)</title><rect width=".184%" height="15" x="3.502%" y="709" fill="#F27727" fg:w="8" fg:x="152"/></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (8 samples, 0.18%)</title><rect width=".184%" height="15" x="3.502%" y="693" fill="#F1622D" fg:w="8" fg:x="152"/></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (8 samples, 0.18%)</title><rect width=".184%" height="15" x="3.502%" y="677" fill="#FE1C1E" fg:w="8" fg:x="152"/></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (8 samples, 0.18%)</title><rect width=".184%" height="15" x="3.502%" y="661" fill="#F18E36" fg:w="8" fg:x="152"/></g><g><title>_rjem_je_tcache_alloc_small_hard (2 samples, 0.05%)</title><rect width=".046%" height="15" x="3.733%" y="405" fill="#DE550F" fg:w="2" fg:x="162"/></g><g><title>_rjem_je_arena_cache_bin_fill_small (2 samples, 0.05%)</title><rect width=".046%" height="15" x="3.733%" y="389" fill="#D2552F" fg:w="2" fg:x="162"/></g><g><title>arena_slab_reg_alloc_batch (2 samples, 0.05%)</title><rect width=".046%" height="15" x="3.733%" y="373" fill="#E0CE19" fg:w="2" fg:x="162"/></g><g><title>_rjem_je_malloc_default (3 samples, 0.07%)</title><rect width=".069%" height="15" x="3.733%" y="517" fill="#F3C913" fg:w="3" fg:x="162"/></g><g><title>imalloc (3 samples, 0.07%)</title><rect width=".069%" height="15" x="3.733%" y="501" fill="#EC3B04" fg:w="3" fg:x="162"/></g><g><title>imalloc_body (3 samples, 0.07%)</title><rect width=".069%" height="15" x="3.733%" y="485" fill="#FEB32D" fg:w="3" fg:x="162"/></g><g><title>imalloc_no_sample (3 samples, 0.07%)</title><rect width=".069%" height="15" x="3.733%" y="469" fill="#E20E0A" fg:w="3" fg:x="162"/></g><g><title>iallocztm (3 samples, 0.07%)</title><rect width=".069%" height="15" x="3.733%" y="453" fill="#F41B29" fg:w="3" fg:x="162"/></g><g><title>arena_malloc (3 samples, 0.07%)</title><rect width=".069%" height="15" x="3.733%" y="437" fill="#EB2320" fg:w="3" fg:x="162"/></g><g><title>tcache_alloc_small (3 samples, 0.07%)</title><rect width=".069%" height="15" x="3.733%" y="421" fill="#DA441F" fg:w="3" fg:x="162"/></g><g><title>_rjem_je_tcache_bin_flush_stashed (1 samples, 0.02%)</title><rect width=".023%" height="15" x="3.779%" y="405" fill="#CF7825" fg:w="1" fg:x="164"/></g><g><title>_rjem_malloc (2 samples, 0.05%)</title><rect width=".046%" height="15" x="3.802%" y="501" fill="#E36200" fg:w="2" fg:x="165"/></g><g><title>cache_bin_alloc (1 samples, 0.02%)</title><rect width=".023%" height="15" x="3.848%" y="485" fill="#CF0703" fg:w="1" fg:x="167"/></g><g><title>cache_bin_alloc_impl (1 samples, 0.02%)</title><rect width=".023%" height="15" x="3.848%" y="469" fill="#CE6213" fg:w="1" fg:x="167"/></g><g><title>?? (7 samples, 0.16%)</title><rect width=".161%" height="15" x="3.733%" y="645" fill="#D9051A" fg:w="7" fg:x="162"/></g><g><title>?? (7 samples, 0.16%)</title><rect width=".161%" height="15" x="3.733%" y="629" fill="#EBBE26" fg:w="7" fg:x="162"/></g><g><title>?? (7 samples, 0.16%)</title><rect width=".161%" height="15" x="3.733%" y="613" fill="#F75618" fg:w="7" fg:x="162"/></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (7 samples, 0.16%)</title><rect width=".161%" height="15" x="3.733%" y="597" fill="#CD6510" fg:w="7" fg:x="162"/></g><g><title>?? (7 samples, 0.16%)</title><rect width=".161%" height="15" x="3.733%" y="581" fill="#F6A821" fg:w="7" fg:x="162"/></g><g><title>alloc::alloc::alloc (7 samples, 0.16%)</title><rect width=".161%" height="15" x="3.733%" y="565" fill="#E77201" fg:w="7" fg:x="162"/></g><g><title>__rust_alloc (7 samples, 0.16%)</title><rect width=".161%" height="15" x="3.733%" y="549" fill="#CFB835" fg:w="7" fg:x="162"/></g><g><title>&lt;jemallocator::Jemalloc as core::alloc::global::GlobalAlloc&gt;::alloc (7 samples, 0.16%)</title><rect width=".161%" height="15" x="3.733%" y="533" fill="#E05F33" fg:w="7" fg:x="162"/></g><g><title>_rjem_malloc (4 samples, 0.09%)</title><rect width=".092%" height="15" x="3.802%" y="517" fill="#D4BC2D" fg:w="4" fg:x="165"/></g><g><title>imalloc_fastpath (2 samples, 0.05%)</title><rect width=".046%" height="15" x="3.848%" y="501" fill="#DF9A26" fg:w="2" fg:x="167"/></g><g><title>cache_bin_alloc_easy (1 samples, 0.02%)</title><rect width=".023%" height="15" x="3.871%" y="485" fill="#FB1634" fg:w="1" fg:x="168"/></g><g><title>cache_bin_alloc_impl (1 samples, 0.02%)</title><rect width=".023%" height="15" x="3.871%" y="469" fill="#E5D116" fg:w="1" fg:x="168"/></g><g><title>&lt;serde::de::impls::StringVisitor as serde::de::Visitor&gt;::visit_str (9 samples, 0.21%)</title><rect width=".207%" height="15" x="3.733%" y="757" fill="#EA8A22" fg:w="9" fg:x="162"/></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (9 samples, 0.21%)</title><rect width=".207%" height="15" x="3.733%" y="741" fill="#D45F0B" fg:w="9" fg:x="162"/></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (9 samples, 0.21%)</title><rect width=".207%" height="15" x="3.733%" y="725" fill="#F0B32F" fg:w="9" fg:x="162"/></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (9 samples, 0.21%)</title><rect width=".207%" height="15" x="3.733%" y="709" fill="#F0A30B" fg:w="9" fg:x="162"/></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (9 samples, 0.21%)</title><rect width=".207%" height="15" x="3.733%" y="693" fill="#EC250C" fg:w="9" fg:x="162"/></g><g><title>alloc::slice::hack::to_vec (9 samples, 0.21%)</title><rect width=".207%" height="15" x="3.733%" y="677" fill="#E8A410" fg:w="9" fg:x="162"/></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (9 samples, 0.21%)</title><rect width=".207%" height="15" x="3.733%" y="661" fill="#F4CD0F" fg:w="9" fg:x="162"/></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (2 samples, 0.05%)</title><rect width=".046%" height="15" x="3.894%" y="645" fill="#DF752F" fg:w="2" fg:x="169"/></g><g><title>core::intrinsics::copy_nonoverlapping (2 samples, 0.05%)</title><rect width=".046%" height="15" x="3.894%" y="629" fill="#F46B23" fg:w="2" fg:x="169"/></g><g><title>__memmove_avx_unaligned_erms (2 samples, 0.05%)</title><rect width=".046%" height="15" x="3.894%" y="613" fill="#CD8C08" fg:w="2" fg:x="169"/></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for alloc::string::String&gt;::deserialize (10 samples, 0.23%)</title><rect width=".23%" height="15" x="3.733%" y="789" fill="#E4542E" fg:w="10" fg:x="162"/></g><g><title>simd_json::serde::de::&lt;impl serde::de::Deserializer for &amp;mut simd_json::Deserializer&gt;::deserialize_string (10 samples, 0.23%)</title><rect width=".23%" height="15" x="3.733%" y="773" fill="#FEBC09" fg:w="10" fg:x="162"/></g><g><title>?? (1 samples, 0.02%)</title><rect width=".023%" height="15" x="3.94%" y="757" fill="#CE7036" fg:w="1" fg:x="171"/></g><g><title>core::slice::&lt;impl [T]&gt;::get (1 samples, 0.02%)</title><rect width=".023%" height="15" x="3.94%" y="741" fill="#D85431" fg:w="1" fg:x="171"/></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (1 samples, 0.02%)</title><rect width=".023%" height="15" x="3.94%" y="725" fill="#D6C223" fg:w="1" fg:x="171"/></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.02%)</title><rect width=".023%" height="15" x="4.009%" y="741" fill="#F91C03" fg:w="1" fg:x="174"/></g><g><title>arena_slab_reg_alloc_batch (2 samples, 0.05%)</title><rect width=".046%" height="15" x="4.032%" y="453" fill="#DE3834" fg:w="2" fg:x="175"/></g><g><title>_rjem_je_malloc_default (3 samples, 0.07%)</title><rect width=".069%" height="15" x="4.032%" y="597" fill="#F5D932" fg:w="3" fg:x="175"/></g><g><title>imalloc (3 samples, 0.07%)</title><rect width=".069%" height="15" x="4.032%" y="581" fill="#D5C918" fg:w="3" fg:x="175"/></g><g><title>imalloc_body (3 samples, 0.07%)</title><rect width=".069%" height="15" x="4.032%" y="565" fill="#F8741C" fg:w="3" fg:x="175"/></g><g><title>imalloc_no_sample (3 samples, 0.07%)</title><rect width=".069%" height="15" x="4.032%" y="549" fill="#DB482B" fg:w="3" fg:x="175"/></g><g><title>iallocztm (3 samples, 0.07%)</title><rect width=".069%" height="15" x="4.032%" y="533" fill="#D18A0E" fg:w="3" fg:x="175"/></g><g><title>arena_malloc (3 samples, 0.07%)</title><rect width=".069%" height="15" x="4.032%" y="517" fill="#DE1221" fg:w="3" fg:x="175"/></g><g><title>tcache_alloc_small (3 samples, 0.07%)</title><rect width=".069%" height="15" x="4.032%" y="501" fill="#D5C707" fg:w="3" fg:x="175"/></g><g><title>_rjem_je_tcache_alloc_small_hard (3 samples, 0.07%)</title><rect width=".069%" height="15" x="4.032%" y="485" fill="#FA6E0A" fg:w="3" fg:x="175"/></g><g><title>_rjem_je_arena_cache_bin_fill_small (3 samples, 0.07%)</title><rect width=".069%" height="15" x="4.032%" y="469" fill="#F87B06" fg:w="3" fg:x="175"/></g><g><title>malloc_mutex_lock (1 samples, 0.02%)</title><rect width=".023%" height="15" x="4.078%" y="453" fill="#CE5B1F" fg:w="1" fg:x="177"/></g><g><title>malloc_mutex_trylock_final (1 samples, 0.02%)</title><rect width=".023%" height="15" x="4.078%" y="437" fill="#D39A0D" fg:w="1" fg:x="177"/></g><g><title>__GI___pthread_mutex_trylock (1 samples, 0.02%)</title><rect width=".023%" height="15" x="4.078%" y="421" fill="#E19407" fg:w="1" fg:x="177"/></g><g><title>?? (6 samples, 0.14%)</title><rect width=".138%" height="15" x="4.032%" y="741" fill="#DCA02B" fg:w="6" fg:x="175"/></g><g><title>?? (6 samples, 0.14%)</title><rect width=".138%" height="15" x="4.032%" y="725" fill="#D53427" fg:w="6" fg:x="175"/></g><g><title>?? (6 samples, 0.14%)</title><rect width=".138%" height="15" x="4.032%" y="709" fill="#F38907" fg:w="6" fg:x="175"/></g><g><title>?? (6 samples, 0.14%)</title><rect width=".138%" height="15" x="4.032%" y="693" fill="#E64F0D" fg:w="6" fg:x="175"/></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (6 samples, 0.14%)</title><rect width=".138%" height="15" x="4.032%" y="677" fill="#F76917" fg:w="6" fg:x="175"/></g><g><title>?? (6 samples, 0.14%)</title><rect width=".138%" height="15" x="4.032%" y="661" fill="#DFB329" fg:w="6" fg:x="175"/></g><g><title>alloc::alloc::alloc (6 samples, 0.14%)</title><rect width=".138%" height="15" x="4.032%" y="645" fill="#DA0922" fg:w="6" fg:x="175"/></g><g><title>__rust_alloc (6 samples, 0.14%)</title><rect width=".138%" height="15" x="4.032%" y="629" fill="#DE6A08" fg:w="6" fg:x="175"/></g><g><title>&lt;jemallocator::Jemalloc as core::alloc::global::GlobalAlloc&gt;::alloc (6 samples, 0.14%)</title><rect width=".138%" height="15" x="4.032%" y="613" fill="#D3DC00" fg:w="6" fg:x="175"/></g><g><title>_rjem_malloc (3 samples, 0.07%)</title><rect width=".069%" height="15" x="4.101%" y="597" fill="#E53410" fg:w="3" fg:x="178"/></g><g><title>imalloc_fastpath (3 samples, 0.07%)</title><rect width=".069%" height="15" x="4.101%" y="581" fill="#D49B12" fg:w="3" fg:x="178"/></g><g><title>cache_bin_alloc_easy (1 samples, 0.02%)</title><rect width=".023%" height="15" x="4.147%" y="565" fill="#F2150E" fg:w="1" fg:x="180"/></g><g><title>cache_bin_alloc_impl (1 samples, 0.02%)</title><rect width=".023%" height="15" x="4.147%" y="549" fill="#DE1330" fg:w="1" fg:x="180"/></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (10 samples, 0.23%)</title><rect width=".23%" height="15" x="3.963%" y="757" fill="#E82D1B" fg:w="10" fg:x="172"/></g><g><title>serde::de::SeqAccess::next_element (1 samples, 0.02%)</title><rect width=".023%" height="15" x="4.17%" y="741" fill="#F9672A" fg:w="1" fg:x="181"/></g><g><title>&lt;simd_json::serde::de::CommaSeparated as serde::de::SeqAccess&gt;::next_element_seed (1 samples, 0.02%)</title><rect width=".023%" height="15" x="4.17%" y="725" fill="#F65121" fg:w="1" fg:x="181"/></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.02%)</title><rect width=".023%" height="15" x="4.17%" y="709" fill="#FC212A" fg:w="1" fg:x="181"/></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u32&gt;::deserialize (1 samples, 0.02%)</title><rect width=".023%" height="15" x="4.17%" y="693" fill="#D1D429" fg:w="1" fg:x="181"/></g><g><title>simd_json::serde::de::&lt;impl serde::de::Deserializer for &amp;mut simd_json::Deserializer&gt;::deserialize_u32 (1 samples, 0.02%)</title><rect width=".023%" height="15" x="4.17%" y="677" fill="#CF9A06" fg:w="1" fg:x="181"/></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.02%)</title><rect width=".023%" height="15" x="4.17%" y="661" fill="#DF402F" fg:w="1" fg:x="181"/></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize (11 samples, 0.25%)</title><rect width=".254%" height="15" x="3.963%" y="789" fill="#D3A126" fg:w="11" fg:x="172"/></g><g><title>simd_json::serde::de::&lt;impl serde::de::Deserializer for &amp;mut simd_json::Deserializer&gt;::deserialize_seq (11 samples, 0.25%)</title><rect width=".254%" height="15" x="3.963%" y="773" fill="#DB8A28" fg:w="11" fg:x="172"/></g><g><title>?? (1 samples, 0.02%)</title><rect width=".023%" height="15" x="4.194%" y="757" fill="#F1E42E" fg:w="1" fg:x="182"/></g><g><title>core::slice::&lt;impl [T]&gt;::get (1 samples, 0.02%)</title><rect width=".023%" height="15" x="4.194%" y="741" fill="#DFD126" fg:w="1" fg:x="182"/></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (1 samples, 0.02%)</title><rect width=".023%" height="15" x="4.194%" y="725" fill="#ECA42D" fg:w="1" fg:x="182"/></g><g><title>_rjem_je_tcache_alloc_small_hard (2 samples, 0.05%)</title><rect width=".046%" height="15" x="4.263%" y="357" fill="#E70F05" fg:w="2" fg:x="185"/></g><g><title>_rjem_je_arena_cache_bin_fill_small (2 samples, 0.05%)</title><rect width=".046%" height="15" x="4.263%" y="341" fill="#FC230F" fg:w="2" fg:x="185"/></g><g><title>_rjem_je_arena_bin_choose (1 samples, 0.02%)</title><rect width=".023%" height="15" x="4.286%" y="325" fill="#F8B512" fg:w="1" fg:x="186"/></g><g><title>?? (3 samples, 0.07%)</title><rect width=".069%" height="15" x="4.263%" y="597" fill="#E9272A" fg:w="3" fg:x="185"/></g><g><title>?? (3 samples, 0.07%)</title><rect width=".069%" height="15" x="4.263%" y="581" fill="#EE6E21" fg:w="3" fg:x="185"/></g><g><title>?? (3 samples, 0.07%)</title><rect width=".069%" height="15" x="4.263%" y="565" fill="#E9C30A" fg:w="3" fg:x="185"/></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (3 samples, 0.07%)</title><rect width=".069%" height="15" x="4.263%" y="549" fill="#FE6903" fg:w="3" fg:x="185"/></g><g><title>?? (3 samples, 0.07%)</title><rect width=".069%" height="15" x="4.263%" y="533" fill="#DDE109" fg:w="3" fg:x="185"/></g><g><title>alloc::alloc::alloc (3 samples, 0.07%)</title><rect width=".069%" height="15" x="4.263%" y="517" fill="#E0E32D" fg:w="3" fg:x="185"/></g><g><title>__rust_alloc (3 samples, 0.07%)</title><rect width=".069%" height="15" x="4.263%" y="501" fill="#E5C62B" fg:w="3" fg:x="185"/></g><g><title>&lt;jemallocator::Jemalloc as core::alloc::global::GlobalAlloc&gt;::alloc (3 samples, 0.07%)</title><rect width=".069%" height="15" x="4.263%" y="485" fill="#CED123" fg:w="3" fg:x="185"/></g><g><title>_rjem_je_malloc_default (3 samples, 0.07%)</title><rect width=".069%" height="15" x="4.263%" y="469" fill="#F5C335" fg:w="3" fg:x="185"/></g><g><title>imalloc (3 samples, 0.07%)</title><rect width=".069%" height="15" x="4.263%" y="453" fill="#F05C1A" fg:w="3" fg:x="185"/></g><g><title>imalloc_body (3 samples, 0.07%)</title><rect width=".069%" height="15" x="4.263%" y="437" fill="#CF2817" fg:w="3" fg:x="185"/></g><g><title>imalloc_no_sample (3 samples, 0.07%)</title><rect width=".069%" height="15" x="4.263%" y="421" fill="#DF6F23" fg:w="3" fg:x="185"/></g><g><title>iallocztm (3 samples, 0.07%)</title><rect width=".069%" height="15" x="4.263%" y="405" fill="#E5931C" fg:w="3" fg:x="185"/></g><g><title>arena_malloc (3 samples, 0.07%)</title><rect width=".069%" height="15" x="4.263%" y="389" fill="#D31D1C" fg:w="3" fg:x="185"/></g><g><title>tcache_alloc_small (3 samples, 0.07%)</title><rect width=".069%" height="15" x="4.263%" y="373" fill="#E44821" fg:w="3" fg:x="185"/></g><g><title>arena_choose (1 samples, 0.02%)</title><rect width=".023%" height="15" x="4.309%" y="357" fill="#CDD61F" fg:w="1" fg:x="187"/></g><g><title>&lt;json_benchmark::copy::citm_catalog::_::&lt;impl serde::de::Deserialize for json_benchmark::copy::citm_catalog::Event&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_map (60 samples, 1.38%)</title><rect width="1.383%" height="15" x="2.995%" y="853" fill="#E06F0F" fg:w="60" fg:x="130"/></g><g><title>serde::de::MapAccess::next_value (30 samples, 0.69%)</title><rect width=".691%" height="15" x="3.687%" y="837" fill="#FD151A" fg:w="30" fg:x="160"/></g><g><title>&lt;simd_json::serde::de::CommaSeparated as serde::de::MapAccess&gt;::next_value_seed (30 samples, 0.69%)</title><rect width=".691%" height="15" x="3.687%" y="821" fill="#F58B2B" fg:w="30" fg:x="160"/></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (29 samples, 0.67%)</title><rect width=".668%" height="15" x="3.71%" y="805" fill="#FCAA07" fg:w="29" fg:x="161"/></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for core::option::Option&lt;T&gt;&gt;::deserialize (7 samples, 0.16%)</title><rect width=".161%" height="15" x="4.217%" y="789" fill="#E7760E" fg:w="7" fg:x="183"/></g><g><title>simd_json::serde::de::&lt;impl serde::de::Deserializer for &amp;mut simd_json::Deserializer&gt;::deserialize_option (7 samples, 0.16%)</title><rect width=".161%" height="15" x="4.217%" y="773" fill="#EE5300" fg:w="7" fg:x="183"/></g><g><title>&lt;serde::de::impls::OptionVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_some (6 samples, 0.14%)</title><rect width=".138%" height="15" x="4.24%" y="757" fill="#DD2727" fg:w="6" fg:x="184"/></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for alloc::string::String&gt;::deserialize (6 samples, 0.14%)</title><rect width=".138%" height="15" x="4.24%" y="741" fill="#DE772E" fg:w="6" fg:x="184"/></g><g><title>simd_json::serde::de::&lt;impl serde::de::Deserializer for &amp;mut simd_json::Deserializer&gt;::deserialize_string (6 samples, 0.14%)</title><rect width=".138%" height="15" x="4.24%" y="725" fill="#DEA531" fg:w="6" fg:x="184"/></g><g><title>&lt;serde::de::impls::StringVisitor as serde::de::Visitor&gt;::visit_str (6 samples, 0.14%)</title><rect width=".138%" height="15" x="4.24%" y="709" fill="#DB7134" fg:w="6" fg:x="184"/></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (5 samples, 0.12%)</title><rect width=".115%" height="15" x="4.263%" y="693" fill="#D6070F" fg:w="5" fg:x="185"/></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (5 samples, 0.12%)</title><rect width=".115%" height="15" x="4.263%" y="677" fill="#EB2004" fg:w="5" fg:x="185"/></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (5 samples, 0.12%)</title><rect width=".115%" height="15" x="4.263%" y="661" fill="#EE5A36" fg:w="5" fg:x="185"/></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (5 samples, 0.12%)</title><rect width=".115%" height="15" x="4.263%" y="645" fill="#D5D013" fg:w="5" fg:x="185"/></g><g><title>alloc::slice::hack::to_vec (5 samples, 0.12%)</title><rect width=".115%" height="15" x="4.263%" y="629" fill="#E99C04" fg:w="5" fg:x="185"/></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (5 samples, 0.12%)</title><rect width=".115%" height="15" x="4.263%" y="613" fill="#CFC205" fg:w="5" fg:x="185"/></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (2 samples, 0.05%)</title><rect width=".046%" height="15" x="4.332%" y="597" fill="#CE6F1E" fg:w="2" fg:x="188"/></g><g><title>core::intrinsics::copy_nonoverlapping (2 samples, 0.05%)</title><rect width=".046%" height="15" x="4.332%" y="581" fill="#F34636" fg:w="2" fg:x="188"/></g><g><title>__memmove_avx_unaligned_erms (2 samples, 0.05%)</title><rect width=".046%" height="15" x="4.332%" y="565" fill="#F21C08" fg:w="2" fg:x="188"/></g><g><title>json_benchmark::copy::citm_catalog::_::&lt;impl serde::de::Deserialize for json_benchmark::copy::citm_catalog::Event&gt;::deserialize (63 samples, 1.45%)</title><rect width="1.452%" height="15" x="2.949%" y="885" fill="#DB6A12" fg:w="63" fg:x="128"/></g><g><title>simd_json::serde::de::&lt;impl serde::de::Deserializer for &amp;mut simd_json::Deserializer&gt;::deserialize_struct (63 samples, 1.45%)</title><rect width="1.452%" height="15" x="2.949%" y="869" fill="#F4DE0A" fg:w="63" fg:x="128"/></g><g><title>?? (1 samples, 0.02%)</title><rect width=".023%" height="15" x="4.378%" y="853" fill="#ECB334" fg:w="1" fg:x="190"/></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.02%)</title><rect width=".023%" height="15" x="4.378%" y="837" fill="#D51727" fg:w="1" fg:x="190"/></g><g><title>?? (1 samples, 0.02%)</title><rect width=".023%" height="15" x="4.424%" y="741" fill="#EE300A" fg:w="1" fg:x="192"/></g><g><title>?? (1 samples, 0.02%)</title><rect width=".023%" height="15" x="4.424%" y="725" fill="#FBC417" fg:w="1" fg:x="192"/></g><g><title>?? (1 samples, 0.02%)</title><rect width=".023%" height="15" x="4.424%" y="709" fill="#FA9818" fg:w="1" fg:x="192"/></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.02%)</title><rect width=".023%" height="15" x="4.424%" y="693" fill="#D19611" fg:w="1" fg:x="192"/></g><g><title>?? (1 samples, 0.02%)</title><rect width=".023%" height="15" x="4.424%" y="677" fill="#EACA22" fg:w="1" fg:x="192"/></g><g><title>alloc::alloc::alloc (1 samples, 0.02%)</title><rect width=".023%" height="15" x="4.424%" y="661" fill="#FD9435" fg:w="1" fg:x="192"/></g><g><title>__rust_alloc (1 samples, 0.02%)</title><rect width=".023%" height="15" x="4.424%" y="645" fill="#DA8110" fg:w="1" fg:x="192"/></g><g><title>&lt;jemallocator::Jemalloc as core::alloc::global::GlobalAlloc&gt;::alloc (1 samples, 0.02%)</title><rect width=".023%" height="15" x="4.424%" y="629" fill="#D85513" fg:w="1" fg:x="192"/></g><g><title>_rjem_je_malloc_default (1 samples, 0.02%)</title><rect width=".023%" height="15" x="4.424%" y="613" fill="#EBE407" fg:w="1" fg:x="192"/></g><g><title>imalloc (1 samples, 0.02%)</title><rect width=".023%" height="15" x="4.424%" y="597" fill="#F5AF00" fg:w="1" fg:x="192"/></g><g><title>imalloc_body (1 samples, 0.02%)</title><rect width=".023%" height="15" x="4.424%" y="581" fill="#D0A824" fg:w="1" fg:x="192"/></g><g><title>imalloc_no_sample (1 samples, 0.02%)</title><rect width=".023%" height="15" x="4.424%" y="565" fill="#F6AB18" fg:w="1" fg:x="192"/></g><g><title>iallocztm (1 samples, 0.02%)</title><rect width=".023%" height="15" x="4.424%" y="549" fill="#D78E18" fg:w="1" fg:x="192"/></g><g><title>arena_malloc (1 samples, 0.02%)</title><rect width=".023%" height="15" x="4.424%" y="533" fill="#FABB07" fg:w="1" fg:x="192"/></g><g><title>tcache_alloc_small (1 samples, 0.02%)</title><rect width=".023%" height="15" x="4.424%" y="517" fill="#E44221" fg:w="1" fg:x="192"/></g><g><title>_rjem_je_tcache_alloc_small_hard (1 samples, 0.02%)</title><rect width=".023%" height="15" x="4.424%" y="501" fill="#EAD715" fg:w="1" fg:x="192"/></g><g><title>_rjem_je_arena_cache_bin_fill_small (1 samples, 0.02%)</title><rect width=".023%" height="15" x="4.424%" y="485" fill="#DEBF14" fg:w="1" fg:x="192"/></g><g><title>arena_slab_alloc (1 samples, 0.02%)</title><rect width=".023%" height="15" x="4.424%" y="469" fill="#F54F36" fg:w="1" fg:x="192"/></g><g><title>_rjem_je_pa_alloc (1 samples, 0.02%)</title><rect width=".023%" height="15" x="4.424%" y="453" fill="#F00A25" fg:w="1" fg:x="192"/></g><g><title>pai_alloc (1 samples, 0.02%)</title><rect width=".023%" height="15" x="4.424%" y="437" fill="#D6C020" fg:w="1" fg:x="192"/></g><g><title>pac_alloc_impl (1 samples, 0.02%)</title><rect width=".023%" height="15" x="4.424%" y="421" fill="#D12436" fg:w="1" fg:x="192"/></g><g><title>pac_alloc_real (1 samples, 0.02%)</title><rect width=".023%" height="15" x="4.424%" y="405" fill="#DC0A0B" fg:w="1" fg:x="192"/></g><g><title>_rjem_je_ecache_alloc_grow (1 samples, 0.02%)</title><rect width=".023%" height="15" x="4.424%" y="389" fill="#DD6A11" fg:w="1" fg:x="192"/></g><g><title>extent_alloc_retained (1 samples, 0.02%)</title><rect width=".023%" height="15" x="4.424%" y="373" fill="#FB8E2C" fg:w="1" fg:x="192"/></g><g><title>extent_recycle (1 samples, 0.02%)</title><rect width=".023%" height="15" x="4.424%" y="357" fill="#EE0D0F" fg:w="1" fg:x="192"/></g><g><title>extent_recycle_extract (1 samples, 0.02%)</title><rect width=".023%" height="15" x="4.424%" y="341" fill="#D06B1B" fg:w="1" fg:x="192"/></g><g><title>_rjem_je_eset_fit (1 samples, 0.02%)</title><rect width=".023%" height="15" x="4.424%" y="325" fill="#CD8825" fg:w="1" fg:x="192"/></g><g><title>eset_first_fit (1 samples, 0.02%)</title><rect width=".023%" height="15" x="4.424%" y="309" fill="#FACD1B" fg:w="1" fg:x="192"/></g><g><title>sz_pind2sz (1 samples, 0.02%)</title><rect width=".023%" height="15" x="4.424%" y="293" fill="#D2502B" fg:w="1" fg:x="192"/></g><g><title>sz_pind2sz_lookup (1 samples, 0.02%)</title><rect width=".023%" height="15" x="4.424%" y="277" fill="#F7A024" fg:w="1" fg:x="192"/></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::collections::btree::map::BTreeMap&lt;K,V&gt;&gt;::deserialize::MapVisitor&lt;K,V&gt; as serde::de::Visitor&gt;::visit_map (108 samples, 2.49%)</title><rect width="2.489%" height="15" x="2.051%" y="965" fill="#EA0D31" fg:w="108" fg:x="89"/><text x="2.301%" y="975.5">&lt;s..</text></g><g><title>serde::de::MapAccess::next_entry (82 samples, 1.89%)</title><rect width="1.889%" height="15" x="2.65%" y="949" fill="#EA7A00" fg:w="82" fg:x="115"/><text x="2.9%" y="959.5">s..</text></g><g><title>serde::de::MapAccess::next_entry_seed (82 samples, 1.89%)</title><rect width="1.889%" height="15" x="2.65%" y="933" fill="#CF9226" fg:w="82" fg:x="115"/><text x="2.9%" y="943.5">s..</text></g><g><title>&lt;simd_json::serde::de::CommaSeparated as serde::de::MapAccess&gt;::next_value_seed (69 samples, 1.59%)</title><rect width="1.59%" height="15" x="2.949%" y="917" fill="#CFB119" fg:w="69" fg:x="128"/></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (69 samples, 1.59%)</title><rect width="1.59%" height="15" x="2.949%" y="901" fill="#D3B22A" fg:w="69" fg:x="128"/></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for alloc::string::String&gt;::deserialize (6 samples, 0.14%)</title><rect width=".138%" height="15" x="4.401%" y="885" fill="#E64536" fg:w="6" fg:x="191"/></g><g><title>simd_json::serde::de::&lt;impl serde::de::Deserializer for &amp;mut simd_json::Deserializer&gt;::deserialize_string (5 samples, 0.12%)</title><rect width=".115%" height="15" x="4.424%" y="869" fill="#D68729" fg:w="5" fg:x="192"/></g><g><title>&lt;serde::de::impls::StringVisitor as serde::de::Visitor&gt;::visit_str (5 samples, 0.12%)</title><rect width=".115%" height="15" x="4.424%" y="853" fill="#ED4319" fg:w="5" fg:x="192"/></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (5 samples, 0.12%)</title><rect width=".115%" height="15" x="4.424%" y="837" fill="#DEBD32" fg:w="5" fg:x="192"/></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (5 samples, 0.12%)</title><rect width=".115%" height="15" x="4.424%" y="821" fill="#F59422" fg:w="5" fg:x="192"/></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (5 samples, 0.12%)</title><rect width=".115%" height="15" x="4.424%" y="805" fill="#DE1D06" fg:w="5" fg:x="192"/></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (5 samples, 0.12%)</title><rect width=".115%" height="15" x="4.424%" y="789" fill="#DDBD2B" fg:w="5" fg:x="192"/></g><g><title>alloc::slice::hack::to_vec (5 samples, 0.12%)</title><rect width=".115%" height="15" x="4.424%" y="773" fill="#CF241B" fg:w="5" fg:x="192"/></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (5 samples, 0.12%)</title><rect width=".115%" height="15" x="4.424%" y="757" fill="#D95A18" fg:w="5" fg:x="192"/></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (4 samples, 0.09%)</title><rect width=".092%" height="15" x="4.447%" y="741" fill="#E04223" fg:w="4" fg:x="193"/></g><g><title>core::intrinsics::copy_nonoverlapping (4 samples, 0.09%)</title><rect width=".092%" height="15" x="4.447%" y="725" fill="#DD0D32" fg:w="4" fg:x="193"/></g><g><title>__memmove_avx_unaligned_erms (4 samples, 0.09%)</title><rect width=".092%" height="15" x="4.447%" y="709" fill="#EC4431" fg:w="4" fg:x="193"/></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for alloc::collections::btree::map::BTreeMap&lt;K,V&gt;&gt;::deserialize (109 samples, 2.51%)</title><rect width="2.511%" height="15" x="2.051%" y="997" fill="#E5921C" fg:w="109" fg:x="89"/><text x="2.301%" y="1007.5">se..</text></g><g><title>simd_json::serde::de::&lt;impl serde::de::Deserializer for &amp;mut simd_json::Deserializer&gt;::deserialize_map (109 samples, 2.51%)</title><rect width="2.511%" height="15" x="2.051%" y="981" fill="#E11F26" fg:w="109" fg:x="89"/><text x="2.301%" y="991.5">si..</text></g><g><title>?? (1 samples, 0.02%)</title><rect width=".023%" height="15" x="4.539%" y="965" fill="#FAD003" fg:w="1" fg:x="197"/></g><g><title>core::slice::&lt;impl [T]&gt;::get (1 samples, 0.02%)</title><rect width=".023%" height="15" x="4.539%" y="949" fill="#F63617" fg:w="1" fg:x="197"/></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (1 samples, 0.02%)</title><rect width=".023%" height="15" x="4.539%" y="933" fill="#F34C0B" fg:w="1" fg:x="197"/></g><g><title>?? (1 samples, 0.02%)</title><rect width=".023%" height="15" x="4.562%" y="933" fill="#F51532" fg:w="1" fg:x="198"/></g><g><title>?? (1 samples, 0.02%)</title><rect width=".023%" height="15" x="4.562%" y="917" fill="#E4092B" fg:w="1" fg:x="198"/></g><g><title>?? (1 samples, 0.02%)</title><rect width=".023%" height="15" x="4.562%" y="901" fill="#D0642F" fg:w="1" fg:x="198"/></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.02%)</title><rect width=".023%" height="15" x="4.562%" y="885" fill="#E81A08" fg:w="1" fg:x="198"/></g><g><title>?? (1 samples, 0.02%)</title><rect width=".023%" height="15" x="4.562%" y="869" fill="#D8A626" fg:w="1" fg:x="198"/></g><g><title>alloc::alloc::alloc (1 samples, 0.02%)</title><rect width=".023%" height="15" x="4.562%" y="853" fill="#FBCA33" fg:w="1" fg:x="198"/></g><g><title>__rust_alloc (1 samples, 0.02%)</title><rect width=".023%" height="15" x="4.562%" y="837" fill="#FED822" fg:w="1" fg:x="198"/></g><g><title>&lt;jemallocator::Jemalloc as core::alloc::global::GlobalAlloc&gt;::alloc (1 samples, 0.02%)</title><rect width=".023%" height="15" x="4.562%" y="821" fill="#FB201B" fg:w="1" fg:x="198"/></g><g><title>_rjem_je_malloc_default (1 samples, 0.02%)</title><rect width=".023%" height="15" x="4.562%" y="805" fill="#D07F1C" fg:w="1" fg:x="198"/></g><g><title>imalloc (1 samples, 0.02%)</title><rect width=".023%" height="15" x="4.562%" y="789" fill="#E08916" fg:w="1" fg:x="198"/></g><g><title>imalloc_body (1 samples, 0.02%)</title><rect width=".023%" height="15" x="4.562%" y="773" fill="#FE4620" fg:w="1" fg:x="198"/></g><g><title>imalloc_no_sample (1 samples, 0.02%)</title><rect width=".023%" height="15" x="4.562%" y="757" fill="#E54B25" fg:w="1" fg:x="198"/></g><g><title>iallocztm (1 samples, 0.02%)</title><rect width=".023%" height="15" x="4.562%" y="741" fill="#FC4017" fg:w="1" fg:x="198"/></g><g><title>arena_malloc (1 samples, 0.02%)</title><rect width=".023%" height="15" x="4.562%" y="725" fill="#E8A230" fg:w="1" fg:x="198"/></g><g><title>tcache_alloc_large (1 samples, 0.02%)</title><rect width=".023%" height="15" x="4.562%" y="709" fill="#F6A00C" fg:w="1" fg:x="198"/></g><g><title>_rjem_je_large_palloc (1 samples, 0.02%)</title><rect width=".023%" height="15" x="4.562%" y="693" fill="#F7A600" fg:w="1" fg:x="198"/></g><g><title>_rjem_je_arena_extent_alloc_large (1 samples, 0.02%)</title><rect width=".023%" height="15" x="4.562%" y="677" fill="#F9DB15" fg:w="1" fg:x="198"/></g><g><title>_rjem_je_pa_alloc (1 samples, 0.02%)</title><rect width=".023%" height="15" x="4.562%" y="661" fill="#CDD103" fg:w="1" fg:x="198"/></g><g><title>pai_alloc (1 samples, 0.02%)</title><rect width=".023%" height="15" x="4.562%" y="645" fill="#F32C01" fg:w="1" fg:x="198"/></g><g><title>pac_alloc_impl (1 samples, 0.02%)</title><rect width=".023%" height="15" x="4.562%" y="629" fill="#CE9F10" fg:w="1" fg:x="198"/></g><g><title>pac_alloc_real (1 samples, 0.02%)</title><rect width=".023%" height="15" x="4.562%" y="613" fill="#F44D1E" fg:w="1" fg:x="198"/></g><g><title>_rjem_je_ecache_alloc (1 samples, 0.02%)</title><rect width=".023%" height="15" x="4.562%" y="597" fill="#DA450C" fg:w="1" fg:x="198"/></g><g><title>extent_recycle (1 samples, 0.02%)</title><rect width=".023%" height="15" x="4.562%" y="581" fill="#D45707" fg:w="1" fg:x="198"/></g><g><title>extent_recycle_extract (1 samples, 0.02%)</title><rect width=".023%" height="15" x="4.562%" y="565" fill="#F57219" fg:w="1" fg:x="198"/></g><g><title>extent_activate_locked (1 samples, 0.02%)</title><rect width=".023%" height="15" x="4.562%" y="549" fill="#D23D2A" fg:w="1" fg:x="198"/></g><g><title>_rjem_je_emap_update_edata_state (1 samples, 0.02%)</title><rect width=".023%" height="15" x="4.562%" y="533" fill="#D33421" fg:w="1" fg:x="198"/></g><g><title>rtree_leaf_elm_state_update (1 samples, 0.02%)</title><rect width=".023%" height="15" x="4.562%" y="517" fill="#EA3A21" fg:w="1" fg:x="198"/></g><g><title>?? (4 samples, 0.09%)</title><rect width=".092%" height="15" x="4.562%" y="949" fill="#DC7324" fg:w="4" fg:x="198"/></g><g><title>core::ptr::write (3 samples, 0.07%)</title><rect width=".069%" height="15" x="4.585%" y="933" fill="#F39936" fg:w="3" fg:x="199"/></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (6 samples, 0.14%)</title><rect width=".138%" height="15" x="4.816%" y="853" fill="#FB2F12" fg:w="6" fg:x="209"/></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (2 samples, 0.05%)</title><rect width=".046%" height="15" x="5%" y="757" fill="#F2662A" fg:w="2" fg:x="217"/></g><g><title>?? (2 samples, 0.05%)</title><rect width=".046%" height="15" x="5.046%" y="757" fill="#EA1F26" fg:w="2" fg:x="219"/></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (2 samples, 0.05%)</title><rect width=".046%" height="15" x="5.046%" y="741" fill="#DD7533" fg:w="2" fg:x="219"/></g><g><title>serde::de::MapAccess::next_key (14 samples, 0.32%)</title><rect width=".323%" height="15" x="4.954%" y="853" fill="#D41412" fg:w="14" fg:x="215"/></g><g><title>&lt;simd_json::serde::de::CommaSeparated as serde::de::MapAccess&gt;::next_key_seed (14 samples, 0.32%)</title><rect width=".323%" height="15" x="4.954%" y="837" fill="#F58524" fg:w="14" fg:x="215"/></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (14 samples, 0.32%)</title><rect width=".323%" height="15" x="4.954%" y="821" fill="#D40613" fg:w="14" fg:x="215"/></g><g><title>&lt;json_benchmark::copy::citm_catalog::_::&lt;impl serde::de::Deserialize for json_benchmark::copy::citm_catalog::Performance&gt;::deserialize::__Field as serde::de::Deserialize&gt;::deserialize (14 samples, 0.32%)</title><rect width=".323%" height="15" x="4.954%" y="805" fill="#DA0124" fg:w="14" fg:x="215"/></g><g><title>&lt;simd_json::serde::de::MapKey as serde::de::Deserializer&gt;::deserialize_identifier (14 samples, 0.32%)</title><rect width=".323%" height="15" x="4.954%" y="789" fill="#F65436" fg:w="14" fg:x="215"/></g><g><title>&lt;simd_json::serde::de::MapKey as serde::de::Deserializer&gt;::deserialize_any (14 samples, 0.32%)</title><rect width=".323%" height="15" x="4.954%" y="773" fill="#F26E06" fg:w="14" fg:x="215"/></g><g><title>serde::de::Visitor::visit_borrowed_str (8 samples, 0.18%)</title><rect width=".184%" height="15" x="5.092%" y="757" fill="#D62F05" fg:w="8" fg:x="221"/></g><g><title>&lt;json_benchmark::copy::citm_catalog::_::&lt;impl serde::de::Deserialize for json_benchmark::copy::citm_catalog::Performance&gt;::deserialize::__FieldVisitor as serde::de::Visitor&gt;::visit_str (8 samples, 0.18%)</title><rect width=".184%" height="15" x="5.092%" y="741" fill="#DA9F19" fg:w="8" fg:x="221"/></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (5 samples, 0.12%)</title><rect width=".115%" height="15" x="5.161%" y="725" fill="#D7D31C" fg:w="5" fg:x="224"/></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (5 samples, 0.12%)</title><rect width=".115%" height="15" x="5.161%" y="709" fill="#EE3B20" fg:w="5" fg:x="224"/></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (5 samples, 0.12%)</title><rect width=".115%" height="15" x="5.161%" y="693" fill="#E25203" fg:w="5" fg:x="224"/></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (5 samples, 0.12%)</title><rect width=".115%" height="15" x="5.161%" y="677" fill="#F0A420" fg:w="5" fg:x="224"/></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for ()&gt;::deserialize (1 samples, 0.02%)</title><rect width=".023%" height="15" x="5.3%" y="805" fill="#E82E07" fg:w="1" fg:x="230"/></g><g><title>simd_json::serde::de::&lt;impl serde::de::Deserializer for &amp;mut simd_json::Deserializer&gt;::deserialize_unit (1 samples, 0.02%)</title><rect width=".023%" height="15" x="5.3%" y="789" fill="#E58135" fg:w="1" fg:x="230"/></g><g><title>?? (1 samples, 0.02%)</title><rect width=".023%" height="15" x="5.3%" y="773" fill="#EABC1D" fg:w="1" fg:x="230"/></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.02%)</title><rect width=".023%" height="15" x="5.3%" y="757" fill="#F68D04" fg:w="1" fg:x="230"/></g><g><title>arena_slab_alloc (1 samples, 0.02%)</title><rect width=".023%" height="15" x="5.369%" y="389" fill="#E51727" fg:w="1" fg:x="233"/></g><g><title>_rjem_je_pa_alloc (1 samples, 0.02%)</title><rect width=".023%" height="15" x="5.369%" y="373" fill="#CE0C03" fg:w="1" fg:x="233"/></g><g><title>pai_alloc (1 samples, 0.02%)</title><rect width=".023%" height="15" x="5.369%" y="357" fill="#FCE214" fg:w="1" fg:x="233"/></g><g><title>pac_alloc_impl (1 samples, 0.02%)</title><rect width=".023%" height="15" x="5.369%" y="341" fill="#D87B23" fg:w="1" fg:x="233"/></g><g><title>pac_alloc_real (1 samples, 0.02%)</title><rect width=".023%" height="15" x="5.369%" y="325" fill="#D44428" fg:w="1" fg:x="233"/></g><g><title>_rjem_je_ecache_alloc_grow (1 samples, 0.02%)</title><rect width=".023%" height="15" x="5.369%" y="309" fill="#FE7D20" fg:w="1" fg:x="233"/></g><g><title>extent_alloc_retained (1 samples, 0.02%)</title><rect width=".023%" height="15" x="5.369%" y="293" fill="#FD6116" fg:w="1" fg:x="233"/></g><g><title>extent_recycle (1 samples, 0.02%)</title><rect width=".023%" height="15" x="5.369%" y="277" fill="#F1650E" fg:w="1" fg:x="233"/></g><g><title>extent_recycle_extract (1 samples, 0.02%)</title><rect width=".023%" height="15" x="5.369%" y="261" fill="#EE671D" fg:w="1" fg:x="233"/></g><g><title>_rjem_je_eset_fit (1 samples, 0.02%)</title><rect width=".023%" height="15" x="5.369%" y="245" fill="#E9C32F" fg:w="1" fg:x="233"/></g><g><title>eset_first_fit (1 samples, 0.02%)</title><rect width=".023%" height="15" x="5.369%" y="229" fill="#F6DA1E" fg:w="1" fg:x="233"/></g><g><title>edata_cmp_summary_comp (1 samples, 0.02%)</title><rect width=".023%" height="15" x="5.369%" y="213" fill="#DB912F" fg:w="1" fg:x="233"/></g><g><title>_rjem_je_malloc_default (2 samples, 0.05%)</title><rect width=".046%" height="15" x="5.369%" y="533" fill="#F30C1A" fg:w="2" fg:x="233"/></g><g><title>imalloc (2 samples, 0.05%)</title><rect width=".046%" height="15" x="5.369%" y="517" fill="#D65710" fg:w="2" fg:x="233"/></g><g><title>imalloc_body (2 samples, 0.05%)</title><rect width=".046%" height="15" x="5.369%" y="501" fill="#D0632A" fg:w="2" fg:x="233"/></g><g><title>imalloc_no_sample (2 samples, 0.05%)</title><rect width=".046%" height="15" x="5.369%" y="485" fill="#FD6302" fg:w="2" fg:x="233"/></g><g><title>iallocztm (2 samples, 0.05%)</title><rect width=".046%" height="15" x="5.369%" y="469" fill="#DCA817" fg:w="2" fg:x="233"/></g><g><title>arena_malloc (2 samples, 0.05%)</title><rect width=".046%" height="15" x="5.369%" y="453" fill="#F22618" fg:w="2" fg:x="233"/></g><g><title>tcache_alloc_small (2 samples, 0.05%)</title><rect width=".046%" height="15" x="5.369%" y="437" fill="#E1B609" fg:w="2" fg:x="233"/></g><g><title>_rjem_je_tcache_alloc_small_hard (2 samples, 0.05%)</title><rect width=".046%" height="15" x="5.369%" y="421" fill="#F3B225" fg:w="2" fg:x="233"/></g><g><title>_rjem_je_arena_cache_bin_fill_small (2 samples, 0.05%)</title><rect width=".046%" height="15" x="5.369%" y="405" fill="#E88B13" fg:w="2" fg:x="233"/></g><g><title>malloc_mutex_lock (1 samples, 0.02%)</title><rect width=".023%" height="15" x="5.392%" y="389" fill="#E1C918" fg:w="1" fg:x="234"/></g><g><title>malloc_mutex_trylock_final (1 samples, 0.02%)</title><rect width=".023%" height="15" x="5.392%" y="373" fill="#DD2F2E" fg:w="1" fg:x="234"/></g><g><title>__GI___pthread_mutex_trylock (1 samples, 0.02%)</title><rect width=".023%" height="15" x="5.392%" y="357" fill="#F9170D" fg:w="1" fg:x="234"/></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for alloc::string::String&gt;::deserialize (5 samples, 0.12%)</title><rect width=".115%" height="15" x="5.323%" y="805" fill="#DB0905" fg:w="5" fg:x="231"/></g><g><title>simd_json::serde::de::&lt;impl serde::de::Deserializer for &amp;mut simd_json::Deserializer&gt;::deserialize_string (5 samples, 0.12%)</title><rect width=".115%" height="15" x="5.323%" y="789" fill="#FEAB10" fg:w="5" fg:x="231"/></g><g><title>&lt;serde::de::impls::StringVisitor as serde::de::Visitor&gt;::visit_str (5 samples, 0.12%)</title><rect width=".115%" height="15" x="5.323%" y="773" fill="#E6AB14" fg:w="5" fg:x="231"/></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (4 samples, 0.09%)</title><rect width=".092%" height="15" x="5.346%" y="757" fill="#D24729" fg:w="4" fg:x="232"/></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (4 samples, 0.09%)</title><rect width=".092%" height="15" x="5.346%" y="741" fill="#CEAD14" fg:w="4" fg:x="232"/></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (4 samples, 0.09%)</title><rect width=".092%" height="15" x="5.346%" y="725" fill="#E95822" fg:w="4" fg:x="232"/></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (4 samples, 0.09%)</title><rect width=".092%" height="15" x="5.346%" y="709" fill="#DFD12E" fg:w="4" fg:x="232"/></g><g><title>alloc::slice::hack::to_vec (4 samples, 0.09%)</title><rect width=".092%" height="15" x="5.346%" y="693" fill="#FA2B12" fg:w="4" fg:x="232"/></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (4 samples, 0.09%)</title><rect width=".092%" height="15" x="5.346%" y="677" fill="#D00D0A" fg:w="4" fg:x="232"/></g><g><title>?? (4 samples, 0.09%)</title><rect width=".092%" height="15" x="5.346%" y="661" fill="#D4C824" fg:w="4" fg:x="232"/></g><g><title>?? (4 samples, 0.09%)</title><rect width=".092%" height="15" x="5.346%" y="645" fill="#E15A1E" fg:w="4" fg:x="232"/></g><g><title>?? (4 samples, 0.09%)</title><rect width=".092%" height="15" x="5.346%" y="629" fill="#ECB627" fg:w="4" fg:x="232"/></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (4 samples, 0.09%)</title><rect width=".092%" height="15" x="5.346%" y="613" fill="#D49023" fg:w="4" fg:x="232"/></g><g><title>?? (4 samples, 0.09%)</title><rect width=".092%" height="15" x="5.346%" y="597" fill="#E43F2C" fg:w="4" fg:x="232"/></g><g><title>alloc::alloc::alloc (4 samples, 0.09%)</title><rect width=".092%" height="15" x="5.346%" y="581" fill="#E46D06" fg:w="4" fg:x="232"/></g><g><title>__rust_alloc (4 samples, 0.09%)</title><rect width=".092%" height="15" x="5.346%" y="565" fill="#EE7518" fg:w="4" fg:x="232"/></g><g><title>&lt;jemallocator::Jemalloc as core::alloc::global::GlobalAlloc&gt;::alloc (4 samples, 0.09%)</title><rect width=".092%" height="15" x="5.346%" y="549" fill="#F21A1A" fg:w="4" fg:x="232"/></g><g><title>_rjem_malloc (1 samples, 0.02%)</title><rect width=".023%" height="15" x="5.415%" y="533" fill="#DD5C30" fg:w="1" fg:x="235"/></g><g><title>imalloc_fastpath (1 samples, 0.02%)</title><rect width=".023%" height="15" x="5.415%" y="517" fill="#D1D120" fg:w="1" fg:x="235"/></g><g><title>cache_bin_alloc_easy (1 samples, 0.02%)</title><rect width=".023%" height="15" x="5.415%" y="501" fill="#DD4616" fg:w="1" fg:x="235"/></g><g><title>cache_bin_alloc_impl (1 samples, 0.02%)</title><rect width=".023%" height="15" x="5.415%" y="485" fill="#F89105" fg:w="1" fg:x="235"/></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.02%)</title><rect width=".023%" height="15" x="5.507%" y="757" fill="#E2741A" fg:w="1" fg:x="239"/></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.02%)</title><rect width=".023%" height="15" x="5.53%" y="709" fill="#F40511" fg:w="1" fg:x="240"/></g><g><title>_rjem_je_emap_remap (1 samples, 0.02%)</title><rect width=".023%" height="15" x="5.553%" y="437" fill="#FC9F21" fg:w="1" fg:x="241"/></g><g><title>_rjem_je_ecache_alloc (1 samples, 0.02%)</title><rect width=".023%" height="15" x="5.576%" y="389" fill="#CE4700" fg:w="1" fg:x="242"/></g><g><title>extent_recycle (1 samples, 0.02%)</title><rect width=".023%" height="15" x="5.576%" y="373" fill="#E97636" fg:w="1" fg:x="242"/></g><g><title>extent_recycle_split (1 samples, 0.02%)</title><rect width=".023%" height="15" x="5.576%" y="357" fill="#EA5330" fg:w="1" fg:x="242"/></g><g><title>extent_split_interior (1 samples, 0.02%)</title><rect width=".023%" height="15" x="5.576%" y="341" fill="#E40336" fg:w="1" fg:x="242"/></g><g><title>extent_split_impl (1 samples, 0.02%)</title><rect width=".023%" height="15" x="5.576%" y="325" fill="#E29B0D" fg:w="1" fg:x="242"/></g><g><title>_rjem_je_edata_cache_get (1 samples, 0.02%)</title><rect width=".023%" height="15" x="5.576%" y="309" fill="#F11C25" fg:w="1" fg:x="242"/></g><g><title>_rjem_je_edata_avail_remove (1 samples, 0.02%)</title><rect width=".023%" height="15" x="5.576%" y="293" fill="#E95D0A" fg:w="1" fg:x="242"/></g><g><title>ph_remove (1 samples, 0.02%)</title><rect width=".023%" height="15" x="5.576%" y="277" fill="#E17113" fg:w="1" fg:x="242"/></g><g><title>ph_merge_children (1 samples, 0.02%)</title><rect width=".023%" height="15" x="5.576%" y="261" fill="#F10212" fg:w="1" fg:x="242"/></g><g><title>phn_merge_siblings (1 samples, 0.02%)</title><rect width=".023%" height="15" x="5.576%" y="245" fill="#E4CF15" fg:w="1" fg:x="242"/></g><g><title>phn_next_set (1 samples, 0.02%)</title><rect width=".023%" height="15" x="5.576%" y="229" fill="#D5D323" fg:w="1" fg:x="242"/></g><g><title>extent_recycle (1 samples, 0.02%)</title><rect width=".023%" height="15" x="5.599%" y="341" fill="#D1530A" fg:w="1" fg:x="243"/></g><g><title>_rjem_je_edata_avail_remove (2 samples, 0.05%)</title><rect width=".046%" height="15" x="5.622%" y="277" fill="#D1A401" fg:w="2" fg:x="244"/></g><g><title>ph_remove (2 samples, 0.05%)</title><rect width=".046%" height="15" x="5.622%" y="261" fill="#D5B82B" fg:w="2" fg:x="244"/></g><g><title>ph_merge_children (2 samples, 0.05%)</title><rect width=".046%" height="15" x="5.622%" y="245" fill="#E73D22" fg:w="2" fg:x="244"/></g><g><title>phn_merge_siblings (2 samples, 0.05%)</title><rect width=".046%" height="15" x="5.622%" y="229" fill="#EB4B03" fg:w="2" fg:x="244"/></g><g><title>phn_next_set (2 samples, 0.05%)</title><rect width=".046%" height="15" x="5.622%" y="213" fill="#DC6A2F" fg:w="2" fg:x="244"/></g><g><title>arena_slab_alloc (6 samples, 0.14%)</title><rect width=".138%" height="15" x="5.553%" y="469" fill="#D2C421" fg:w="6" fg:x="241"/></g><g><title>_rjem_je_pa_alloc (6 samples, 0.14%)</title><rect width=".138%" height="15" x="5.553%" y="453" fill="#E59A2A" fg:w="6" fg:x="241"/></g><g><title>pai_alloc (5 samples, 0.12%)</title><rect width=".115%" height="15" x="5.576%" y="437" fill="#E4721A" fg:w="5" fg:x="242"/></g><g><title>pac_alloc_impl (5 samples, 0.12%)</title><rect width=".115%" height="15" x="5.576%" y="421" fill="#D09001" fg:w="5" fg:x="242"/></g><g><title>pac_alloc_real (5 samples, 0.12%)</title><rect width=".115%" height="15" x="5.576%" y="405" fill="#EF7025" fg:w="5" fg:x="242"/></g><g><title>_rjem_je_ecache_alloc_grow (4 samples, 0.09%)</title><rect width=".092%" height="15" x="5.599%" y="389" fill="#D26032" fg:w="4" fg:x="243"/></g><g><title>extent_alloc_retained (4 samples, 0.09%)</title><rect width=".092%" height="15" x="5.599%" y="373" fill="#DEB202" fg:w="4" fg:x="243"/></g><g><title>extent_recycle (4 samples, 0.09%)</title><rect width=".092%" height="15" x="5.599%" y="357" fill="#E24A12" fg:w="4" fg:x="243"/></g><g><title>extent_recycle_split (3 samples, 0.07%)</title><rect width=".069%" height="15" x="5.622%" y="341" fill="#E14336" fg:w="3" fg:x="244"/></g><g><title>extent_split_interior (3 samples, 0.07%)</title><rect width=".069%" height="15" x="5.622%" y="325" fill="#FB5C20" fg:w="3" fg:x="244"/></g><g><title>extent_split_impl (3 samples, 0.07%)</title><rect width=".069%" height="15" x="5.622%" y="309" fill="#E49516" fg:w="3" fg:x="244"/></g><g><title>_rjem_je_edata_cache_get (3 samples, 0.07%)</title><rect width=".069%" height="15" x="5.622%" y="293" fill="#F3360D" fg:w="3" fg:x="244"/></g><g><title>malloc_mutex_lock (1 samples, 0.02%)</title><rect width=".023%" height="15" x="5.668%" y="277" fill="#F3B41C" fg:w="1" fg:x="246"/></g><g><title>malloc_mutex_trylock_final (1 samples, 0.02%)</title><rect width=".023%" height="15" x="5.668%" y="261" fill="#D0A718" fg:w="1" fg:x="246"/></g><g><title>__GI___pthread_mutex_trylock (1 samples, 0.02%)</title><rect width=".023%" height="15" x="5.668%" y="245" fill="#F5492D" fg:w="1" fg:x="246"/></g><g><title>_rjem_je_malloc_default (7 samples, 0.16%)</title><rect width=".161%" height="15" x="5.553%" y="613" fill="#EDCB30" fg:w="7" fg:x="241"/></g><g><title>imalloc (7 samples, 0.16%)</title><rect width=".161%" height="15" x="5.553%" y="597" fill="#D3C510" fg:w="7" fg:x="241"/></g><g><title>imalloc_body (7 samples, 0.16%)</title><rect width=".161%" height="15" x="5.553%" y="581" fill="#F36333" fg:w="7" fg:x="241"/></g><g><title>imalloc_no_sample (7 samples, 0.16%)</title><rect width=".161%" height="15" x="5.553%" y="565" fill="#D77B1D" fg:w="7" fg:x="241"/></g><g><title>iallocztm (7 samples, 0.16%)</title><rect width=".161%" height="15" x="5.553%" y="549" fill="#EFBA25" fg:w="7" fg:x="241"/></g><g><title>arena_malloc (7 samples, 0.16%)</title><rect width=".161%" height="15" x="5.553%" y="533" fill="#FC8827" fg:w="7" fg:x="241"/></g><g><title>tcache_alloc_small (7 samples, 0.16%)</title><rect width=".161%" height="15" x="5.553%" y="517" fill="#DFD520" fg:w="7" fg:x="241"/></g><g><title>_rjem_je_tcache_alloc_small_hard (7 samples, 0.16%)</title><rect width=".161%" height="15" x="5.553%" y="501" fill="#E97305" fg:w="7" fg:x="241"/></g><g><title>_rjem_je_arena_cache_bin_fill_small (7 samples, 0.16%)</title><rect width=".161%" height="15" x="5.553%" y="485" fill="#CFE22C" fg:w="7" fg:x="241"/></g><g><title>arena_slab_reg_alloc_batch (1 samples, 0.02%)</title><rect width=".023%" height="15" x="5.691%" y="469" fill="#D07E00" fg:w="1" fg:x="247"/></g><g><title>_rjem_malloc (1 samples, 0.02%)</title><rect width=".023%" height="15" x="5.737%" y="597" fill="#F44215" fg:w="1" fg:x="249"/></g><g><title>?? (13 samples, 0.30%)</title><rect width=".299%" height="15" x="5.53%" y="741" fill="#DE610C" fg:w="13" fg:x="240"/></g><g><title>?? (13 samples, 0.30%)</title><rect width=".299%" height="15" x="5.53%" y="725" fill="#DBD513" fg:w="13" fg:x="240"/></g><g><title>?? (12 samples, 0.28%)</title><rect width=".277%" height="15" x="5.553%" y="709" fill="#FCA91E" fg:w="12" fg:x="241"/></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (12 samples, 0.28%)</title><rect width=".277%" height="15" x="5.553%" y="693" fill="#CE2033" fg:w="12" fg:x="241"/></g><g><title>?? (12 samples, 0.28%)</title><rect width=".277%" height="15" x="5.553%" y="677" fill="#FAAC2A" fg:w="12" fg:x="241"/></g><g><title>alloc::alloc::alloc (12 samples, 0.28%)</title><rect width=".277%" height="15" x="5.553%" y="661" fill="#D1222B" fg:w="12" fg:x="241"/></g><g><title>__rust_alloc (12 samples, 0.28%)</title><rect width=".277%" height="15" x="5.553%" y="645" fill="#DF0B23" fg:w="12" fg:x="241"/></g><g><title>&lt;jemallocator::Jemalloc as core::alloc::global::GlobalAlloc&gt;::alloc (12 samples, 0.28%)</title><rect width=".277%" height="15" x="5.553%" y="629" fill="#FBDB1A" fg:w="12" fg:x="241"/></g><g><title>_rjem_malloc (5 samples, 0.12%)</title><rect width=".115%" height="15" x="5.714%" y="613" fill="#E77703" fg:w="5" fg:x="248"/></g><g><title>imalloc_fastpath (3 samples, 0.07%)</title><rect width=".069%" height="15" x="5.76%" y="597" fill="#D8610B" fg:w="3" fg:x="250"/></g><g><title>cache_bin_alloc_easy (2 samples, 0.05%)</title><rect width=".046%" height="15" x="5.783%" y="581" fill="#DF3B09" fg:w="2" fg:x="251"/></g><g><title>cache_bin_alloc_impl (2 samples, 0.05%)</title><rect width=".046%" height="15" x="5.783%" y="565" fill="#E95D1F" fg:w="2" fg:x="251"/></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (1 samples, 0.02%)</title><rect width=".023%" height="15" x="5.83%" y="741" fill="#EF5121" fg:w="1" fg:x="253"/></g><g><title>?? (18 samples, 0.41%)</title><rect width=".415%" height="15" x="5.53%" y="757" fill="#D57822" fg:w="18" fg:x="240"/></g><g><title>core::ptr::write (4 samples, 0.09%)</title><rect width=".092%" height="15" x="5.853%" y="741" fill="#F33135" fg:w="4" fg:x="254"/></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.02%)</title><rect width=".023%" height="15" x="6.198%" y="565" fill="#F7D821" fg:w="1" fg:x="269"/></g><g><title>?? (4 samples, 0.09%)</title><rect width=".092%" height="15" x="6.221%" y="565" fill="#E21A0E" fg:w="4" fg:x="270"/></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (4 samples, 0.09%)</title><rect width=".092%" height="15" x="6.221%" y="549" fill="#D73135" fg:w="4" fg:x="270"/></g><g><title>serde::de::MapAccess::next_key (25 samples, 0.58%)</title><rect width=".576%" height="15" x="6.083%" y="661" fill="#F5A228" fg:w="25" fg:x="264"/></g><g><title>&lt;simd_json::serde::de::CommaSeparated as serde::de::MapAccess&gt;::next_key_seed (25 samples, 0.58%)</title><rect width=".576%" height="15" x="6.083%" y="645" fill="#E54411" fg:w="25" fg:x="264"/></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (24 samples, 0.55%)</title><rect width=".553%" height="15" x="6.106%" y="629" fill="#D5B60A" fg:w="24" fg:x="265"/></g><g><title>&lt;json_benchmark::copy::citm_catalog::_::&lt;impl serde::de::Deserialize for json_benchmark::copy::citm_catalog::Price&gt;::deserialize::__Field as serde::de::Deserialize&gt;::deserialize (24 samples, 0.55%)</title><rect width=".553%" height="15" x="6.106%" y="613" fill="#F57D1E" fg:w="24" fg:x="265"/></g><g><title>&lt;simd_json::serde::de::MapKey as serde::de::Deserializer&gt;::deserialize_identifier (24 samples, 0.55%)</title><rect width=".553%" height="15" x="6.106%" y="597" fill="#E8CA02" fg:w="24" fg:x="265"/></g><g><title>&lt;simd_json::serde::de::MapKey as serde::de::Deserializer&gt;::deserialize_any (24 samples, 0.55%)</title><rect width=".553%" height="15" x="6.106%" y="581" fill="#ED8C33" fg:w="24" fg:x="265"/></g><g><title>serde::de::Visitor::visit_borrowed_str (15 samples, 0.35%)</title><rect width=".346%" height="15" x="6.313%" y="565" fill="#EC9D19" fg:w="15" fg:x="274"/></g><g><title>&lt;json_benchmark::copy::citm_catalog::_::&lt;impl serde::de::Deserialize for json_benchmark::copy::citm_catalog::Price&gt;::deserialize::__FieldVisitor as serde::de::Visitor&gt;::visit_str (15 samples, 0.35%)</title><rect width=".346%" height="15" x="6.313%" y="549" fill="#DBD100" fg:w="15" fg:x="274"/></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (15 samples, 0.35%)</title><rect width=".346%" height="15" x="6.313%" y="533" fill="#F07436" fg:w="15" fg:x="274"/></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (15 samples, 0.35%)</title><rect width=".346%" height="15" x="6.313%" y="517" fill="#D80A24" fg:w="15" fg:x="274"/></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (15 samples, 0.35%)</title><rect width=".346%" height="15" x="6.313%" y="501" fill="#DE482C" fg:w="15" fg:x="274"/></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (15 samples, 0.35%)</title><rect width=".346%" height="15" x="6.313%" y="485" fill="#E89F09" fg:w="15" fg:x="274"/></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.02%)</title><rect width=".023%" height="15" x="6.659%" y="581" fill="#D22720" fg:w="1" fg:x="289"/></g><g><title>&lt;json_benchmark::copy::citm_catalog::_::&lt;impl serde::de::Deserialize for json_benchmark::copy::citm_catalog::Price&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_map (31 samples, 0.71%)</title><rect width=".714%" height="15" x="5.991%" y="677" fill="#D8C22D" fg:w="31" fg:x="260"/></g><g><title>serde::de::MapAccess::next_value (2 samples, 0.05%)</title><rect width=".046%" height="15" x="6.659%" y="661" fill="#DA1223" fg:w="2" fg:x="289"/></g><g><title>&lt;simd_json::serde::de::CommaSeparated as serde::de::MapAccess&gt;::next_value_seed (2 samples, 0.05%)</title><rect width=".046%" height="15" x="6.659%" y="645" fill="#CF5333" fg:w="2" fg:x="289"/></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (2 samples, 0.05%)</title><rect width=".046%" height="15" x="6.659%" y="629" fill="#E13F2B" fg:w="2" fg:x="289"/></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u32&gt;::deserialize (2 samples, 0.05%)</title><rect width=".046%" height="15" x="6.659%" y="613" fill="#CF3924" fg:w="2" fg:x="289"/></g><g><title>simd_json::serde::de::&lt;impl serde::de::Deserializer for &amp;mut simd_json::Deserializer&gt;::deserialize_u32 (2 samples, 0.05%)</title><rect width=".046%" height="15" x="6.659%" y="597" fill="#D86321" fg:w="2" fg:x="289"/></g><g><title>?? (1 samples, 0.02%)</title><rect width=".023%" height="15" x="6.682%" y="581" fill="#E12A10" fg:w="1" fg:x="290"/></g><g><title>?? (1 samples, 0.02%)</title><rect width=".023%" height="15" x="6.682%" y="565" fill="#DCC92D" fg:w="1" fg:x="290"/></g><g><title>&lt;[T] as simd_json::safer_unchecked::GetSaferUnchecked&lt;T&gt;&gt;::get_kinda_unchecked (1 samples, 0.02%)</title><rect width=".023%" height="15" x="6.682%" y="549" fill="#E12104" fg:w="1" fg:x="290"/></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked (1 samples, 0.02%)</title><rect width=".023%" height="15" x="6.682%" y="533" fill="#E02132" fg:w="1" fg:x="290"/></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (1 samples, 0.02%)</title><rect width=".023%" height="15" x="6.682%" y="517" fill="#F6C633" fg:w="1" fg:x="290"/></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (1 samples, 0.02%)</title><rect width=".023%" height="15" x="6.682%" y="501" fill="#CD1604" fg:w="1" fg:x="290"/></g><g><title>json_benchmark::copy::citm_catalog::_::&lt;impl serde::de::Deserialize for json_benchmark::copy::citm_catalog::Price&gt;::deserialize (32 samples, 0.74%)</title><rect width=".737%" height="15" x="5.991%" y="709" fill="#CE0308" fg:w="32" fg:x="260"/></g><g><title>simd_json::serde::de::&lt;impl serde::de::Deserializer for &amp;mut simd_json::Deserializer&gt;::deserialize_struct (32 samples, 0.74%)</title><rect width=".737%" height="15" x="5.991%" y="693" fill="#FB170F" fg:w="32" fg:x="260"/></g><g><title>?? (1 samples, 0.02%)</title><rect width=".023%" height="15" x="6.705%" y="677" fill="#FC581C" fg:w="1" fg:x="291"/></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.02%)</title><rect width=".023%" height="15" x="6.705%" y="661" fill="#D47F0E" fg:w="1" fg:x="291"/></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (5 samples, 0.12%)</title><rect width=".115%" height="15" x="6.82%" y="661" fill="#F79125" fg:w="5" fg:x="296"/></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (2 samples, 0.05%)</title><rect width=".046%" height="15" x="6.982%" y="565" fill="#D17535" fg:w="2" fg:x="303"/></g><g><title>serde::de::MapAccess::next_key (17 samples, 0.39%)</title><rect width=".392%" height="15" x="6.936%" y="661" fill="#D45A2A" fg:w="17" fg:x="301"/></g><g><title>&lt;simd_json::serde::de::CommaSeparated as serde::de::MapAccess&gt;::next_key_seed (17 samples, 0.39%)</title><rect width=".392%" height="15" x="6.936%" y="645" fill="#DAA425" fg:w="17" fg:x="301"/></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (17 samples, 0.39%)</title><rect width=".392%" height="15" x="6.936%" y="629" fill="#F64122" fg:w="17" fg:x="301"/></g><g><title>&lt;json_benchmark::copy::citm_catalog::_::&lt;impl serde::de::Deserialize for json_benchmark::copy::citm_catalog::SeatCategory&gt;::deserialize::__Field as serde::de::Deserialize&gt;::deserialize (17 samples, 0.39%)</title><rect width=".392%" height="15" x="6.936%" y="613" fill="#E76421" fg:w="17" fg:x="301"/></g><g><title>&lt;simd_json::serde::de::MapKey as serde::de::Deserializer&gt;::deserialize_identifier (17 samples, 0.39%)</title><rect width=".392%" height="15" x="6.936%" y="597" fill="#E47E0E" fg:w="17" fg:x="301"/></g><g><title>&lt;simd_json::serde::de::MapKey as serde::de::Deserializer&gt;::deserialize_any (17 samples, 0.39%)</title><rect width=".392%" height="15" x="6.936%" y="581" fill="#D7AD15" fg:w="17" fg:x="301"/></g><g><title>serde::de::Visitor::visit_borrowed_str (13 samples, 0.30%)</title><rect width=".299%" height="15" x="7.028%" y="565" fill="#D20628" fg:w="13" fg:x="305"/></g><g><title>&lt;json_benchmark::copy::citm_catalog::_::&lt;impl serde::de::Deserialize for json_benchmark::copy::citm_catalog::SeatCategory&gt;::deserialize::__FieldVisitor as serde::de::Visitor&gt;::visit_str (13 samples, 0.30%)</title><rect width=".299%" height="15" x="7.028%" y="549" fill="#D43012" fg:w="13" fg:x="305"/></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (13 samples, 0.30%)</title><rect width=".299%" height="15" x="7.028%" y="533" fill="#E6D60B" fg:w="13" fg:x="305"/></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (13 samples, 0.30%)</title><rect width=".299%" height="15" x="7.028%" y="517" fill="#FE6927" fg:w="13" fg:x="305"/></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (13 samples, 0.30%)</title><rect width=".299%" height="15" x="7.028%" y="501" fill="#F59E05" fg:w="13" fg:x="305"/></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (13 samples, 0.30%)</title><rect width=".299%" height="15" x="7.028%" y="485" fill="#F9D00B" fg:w="13" fg:x="305"/></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.02%)</title><rect width=".023%" height="15" x="7.35%" y="581" fill="#D2271C" fg:w="1" fg:x="319"/></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (8 samples, 0.18%)</title><rect width=".184%" height="15" x="7.581%" y="565" fill="#D33835" fg:w="8" fg:x="329"/></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (4 samples, 0.09%)</title><rect width=".092%" height="15" x="7.765%" y="549" fill="#E2C91E" fg:w="4" fg:x="337"/></g><g><title>_rjem_je_arena_bin_choose (1 samples, 0.02%)</title><rect width=".023%" height="15" x="7.857%" y="277" fill="#EF6522" fg:w="1" fg:x="341"/></g><g><title>tsdn_null (1 samples, 0.02%)</title><rect width=".023%" height="15" x="7.857%" y="261" fill="#E2D105" fg:w="1" fg:x="341"/></g><g><title>extent_deactivate_locked (1 samples, 0.02%)</title><rect width=".023%" height="15" x="7.88%" y="149" fill="#FA692F" fg:w="1" fg:x="342"/></g><g><title>extent_deactivate_locked_impl (1 samples, 0.02%)</title><rect width=".023%" height="15" x="7.88%" y="133" fill="#E64803" fg:w="1" fg:x="342"/></g><g><title>_rjem_je_eset_insert (1 samples, 0.02%)</title><rect width=".023%" height="15" x="7.88%" y="117" fill="#E8DA27" fg:w="1" fg:x="342"/></g><g><title>_rjem_je_edata_cache_get (1 samples, 0.02%)</title><rect width=".023%" height="15" x="7.903%" y="117" fill="#F8A606" fg:w="1" fg:x="343"/></g><g><title>_rjem_je_edata_avail_remove (1 samples, 0.02%)</title><rect width=".023%" height="15" x="7.903%" y="101" fill="#F75914" fg:w="1" fg:x="343"/></g><g><title>ph_remove (1 samples, 0.02%)</title><rect width=".023%" height="15" x="7.903%" y="85" fill="#F88236" fg:w="1" fg:x="343"/></g><g><title>ph_merge_children (1 samples, 0.02%)</title><rect width=".023%" height="15" x="7.903%" y="69" fill="#EAC404" fg:w="1" fg:x="343"/></g><g><title>phn_merge_siblings (1 samples, 0.02%)</title><rect width=".023%" height="15" x="7.903%" y="53" fill="#FA8F1F" fg:w="1" fg:x="343"/></g><g><title>phn_next_set (1 samples, 0.02%)</title><rect width=".023%" height="15" x="7.903%" y="37" fill="#D36E22" fg:w="1" fg:x="343"/></g><g><title>_rjem_je_ecache_alloc (3 samples, 0.07%)</title><rect width=".069%" height="15" x="7.88%" y="197" fill="#D77C30" fg:w="3" fg:x="342"/></g><g><title>extent_recycle (3 samples, 0.07%)</title><rect width=".069%" height="15" x="7.88%" y="181" fill="#D82E0D" fg:w="3" fg:x="342"/></g><g><title>extent_recycle_split (3 samples, 0.07%)</title><rect width=".069%" height="15" x="7.88%" y="165" fill="#CDB819" fg:w="3" fg:x="342"/></g><g><title>extent_split_interior (2 samples, 0.05%)</title><rect width=".046%" height="15" x="7.903%" y="149" fill="#E4010A" fg:w="2" fg:x="343"/></g><g><title>extent_split_impl (2 samples, 0.05%)</title><rect width=".046%" height="15" x="7.903%" y="133" fill="#D5741B" fg:w="2" fg:x="343"/></g><g><title>_rjem_je_emap_split_prepare (1 samples, 0.02%)</title><rect width=".023%" height="15" x="7.926%" y="117" fill="#F15F32" fg:w="1" fg:x="344"/></g><g><title>emap_rtree_leaf_elms_lookup (1 samples, 0.02%)</title><rect width=".023%" height="15" x="7.926%" y="101" fill="#EE3020" fg:w="1" fg:x="344"/></g><g><title>arena_slab_alloc (5 samples, 0.12%)</title><rect width=".115%" height="15" x="7.88%" y="277" fill="#EB7131" fg:w="5" fg:x="342"/></g><g><title>_rjem_je_pa_alloc (5 samples, 0.12%)</title><rect width=".115%" height="15" x="7.88%" y="261" fill="#CD7F2B" fg:w="5" fg:x="342"/></g><g><title>pai_alloc (5 samples, 0.12%)</title><rect width=".115%" height="15" x="7.88%" y="245" fill="#FAA202" fg:w="5" fg:x="342"/></g><g><title>pac_alloc_impl (5 samples, 0.12%)</title><rect width=".115%" height="15" x="7.88%" y="229" fill="#DC0D29" fg:w="5" fg:x="342"/></g><g><title>pac_alloc_real (5 samples, 0.12%)</title><rect width=".115%" height="15" x="7.88%" y="213" fill="#F9DD19" fg:w="5" fg:x="342"/></g><g><title>_rjem_je_ecache_alloc_grow (2 samples, 0.05%)</title><rect width=".046%" height="15" x="7.949%" y="197" fill="#D7D013" fg:w="2" fg:x="345"/></g><g><title>extent_alloc_retained (2 samples, 0.05%)</title><rect width=".046%" height="15" x="7.949%" y="181" fill="#ECAF02" fg:w="2" fg:x="345"/></g><g><title>extent_recycle (2 samples, 0.05%)</title><rect width=".046%" height="15" x="7.949%" y="165" fill="#F13402" fg:w="2" fg:x="345"/></g><g><title>extent_recycle_split (1 samples, 0.02%)</title><rect width=".023%" height="15" x="7.972%" y="149" fill="#F88C0E" fg:w="1" fg:x="346"/></g><g><title>extent_deactivate_locked (1 samples, 0.02%)</title><rect width=".023%" height="15" x="7.972%" y="133" fill="#FD162A" fg:w="1" fg:x="346"/></g><g><title>extent_deactivate_locked_impl (1 samples, 0.02%)</title><rect width=".023%" height="15" x="7.972%" y="117" fill="#EA3D2F" fg:w="1" fg:x="346"/></g><g><title>_rjem_je_eset_insert (1 samples, 0.02%)</title><rect width=".023%" height="15" x="7.972%" y="101" fill="#D0E20F" fg:w="1" fg:x="346"/></g><g><title>edata_list_inactive_append (1 samples, 0.02%)</title><rect width=".023%" height="15" x="7.972%" y="85" fill="#D9DD04" fg:w="1" fg:x="346"/></g><g><title>arena_slab_reg_alloc_batch (2 samples, 0.05%)</title><rect width=".046%" height="15" x="7.995%" y="277" fill="#D4AE22" fg:w="2" fg:x="347"/></g><g><title>cfs_lu (1 samples, 0.02%)</title><rect width=".023%" height="15" x="8.018%" y="261" fill="#FD5304" fg:w="1" fg:x="348"/></g><g><title>cache_bin_finish_fill (1 samples, 0.02%)</title><rect width=".023%" height="15" x="8.041%" y="277" fill="#FAC331" fg:w="1" fg:x="349"/></g><g><title>malloc_mutex_lock (1 samples, 0.02%)</title><rect width=".023%" height="15" x="8.065%" y="277" fill="#F1C019" fg:w="1" fg:x="350"/></g><g><title>malloc_mutex_trylock_final (1 samples, 0.02%)</title><rect width=".023%" height="15" x="8.065%" y="261" fill="#D07C0A" fg:w="1" fg:x="350"/></g><g><title>__GI___pthread_mutex_trylock (1 samples, 0.02%)</title><rect width=".023%" height="15" x="8.065%" y="245" fill="#DE2100" fg:w="1" fg:x="350"/></g><g><title>imalloc_no_sample (11 samples, 0.25%)</title><rect width=".254%" height="15" x="7.857%" y="373" fill="#EAD11C" fg:w="11" fg:x="341"/></g><g><title>iallocztm (11 samples, 0.25%)</title><rect width=".254%" height="15" x="7.857%" y="357" fill="#E00B17" fg:w="11" fg:x="341"/></g><g><title>arena_malloc (11 samples, 0.25%)</title><rect width=".254%" height="15" x="7.857%" y="341" fill="#E86301" fg:w="11" fg:x="341"/></g><g><title>tcache_alloc_small (11 samples, 0.25%)</title><rect width=".254%" height="15" x="7.857%" y="325" fill="#ED5F2D" fg:w="11" fg:x="341"/></g><g><title>_rjem_je_tcache_alloc_small_hard (11 samples, 0.25%)</title><rect width=".254%" height="15" x="7.857%" y="309" fill="#D06D0B" fg:w="11" fg:x="341"/></g><g><title>_rjem_je_arena_cache_bin_fill_small (11 samples, 0.25%)</title><rect width=".254%" height="15" x="7.857%" y="293" fill="#D8BE30" fg:w="11" fg:x="341"/></g><g><title>malloc_mutex_unlock (1 samples, 0.02%)</title><rect width=".023%" height="15" x="8.088%" y="277" fill="#FBAB24" fg:w="1" fg:x="351"/></g><g><title>__pthread_mutex_unlock_usercnt (1 samples, 0.02%)</title><rect width=".023%" height="15" x="8.088%" y="261" fill="#E63E16" fg:w="1" fg:x="351"/></g><g><title>_rjem_je_malloc_default (12 samples, 0.28%)</title><rect width=".277%" height="15" x="7.857%" y="421" fill="#E17223" fg:w="12" fg:x="341"/></g><g><title>imalloc (12 samples, 0.28%)</title><rect width=".277%" height="15" x="7.857%" y="405" fill="#D7762A" fg:w="12" fg:x="341"/></g><g><title>imalloc_body (12 samples, 0.28%)</title><rect width=".277%" height="15" x="7.857%" y="389" fill="#F37715" fg:w="12" fg:x="341"/></g><g><title>thread_alloc_event (1 samples, 0.02%)</title><rect width=".023%" height="15" x="8.111%" y="373" fill="#FCB135" fg:w="1" fg:x="352"/></g><g><title>te_event_advance (1 samples, 0.02%)</title><rect width=".023%" height="15" x="8.111%" y="357" fill="#EDD11D" fg:w="1" fg:x="352"/></g><g><title>_rjem_malloc (1 samples, 0.02%)</title><rect width=".023%" height="15" x="8.134%" y="405" fill="#D44117" fg:w="1" fg:x="353"/></g><g><title>cache_bin_alloc_easy (2 samples, 0.05%)</title><rect width=".046%" height="15" x="8.157%" y="389" fill="#E6DE2E" fg:w="2" fg:x="354"/></g><g><title>cache_bin_alloc_impl (2 samples, 0.05%)</title><rect width=".046%" height="15" x="8.157%" y="373" fill="#D78720" fg:w="2" fg:x="354"/></g><g><title>?? (17 samples, 0.39%)</title><rect width=".392%" height="15" x="7.857%" y="549" fill="#F66516" fg:w="17" fg:x="341"/></g><g><title>?? (17 samples, 0.39%)</title><rect width=".392%" height="15" x="7.857%" y="533" fill="#CE6B0D" fg:w="17" fg:x="341"/></g><g><title>?? (17 samples, 0.39%)</title><rect width=".392%" height="15" x="7.857%" y="517" fill="#FA642C" fg:w="17" fg:x="341"/></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (17 samples, 0.39%)</title><rect width=".392%" height="15" x="7.857%" y="501" fill="#E79326" fg:w="17" fg:x="341"/></g><g><title>?? (17 samples, 0.39%)</title><rect width=".392%" height="15" x="7.857%" y="485" fill="#E50828" fg:w="17" fg:x="341"/></g><g><title>alloc::alloc::alloc (17 samples, 0.39%)</title><rect width=".392%" height="15" x="7.857%" y="469" fill="#DD871E" fg:w="17" fg:x="341"/></g><g><title>__rust_alloc (17 samples, 0.39%)</title><rect width=".392%" height="15" x="7.857%" y="453" fill="#F9C112" fg:w="17" fg:x="341"/></g><g><title>&lt;jemallocator::Jemalloc as core::alloc::global::GlobalAlloc&gt;::alloc (17 samples, 0.39%)</title><rect width=".392%" height="15" x="7.857%" y="437" fill="#D18527" fg:w="17" fg:x="341"/></g><g><title>_rjem_malloc (5 samples, 0.12%)</title><rect width=".115%" height="15" x="8.134%" y="421" fill="#E8640E" fg:w="5" fg:x="353"/></g><g><title>imalloc_fastpath (4 samples, 0.09%)</title><rect width=".092%" height="15" x="8.157%" y="405" fill="#E0B901" fg:w="4" fg:x="354"/></g><g><title>sz_size2index_usize_fastpath (2 samples, 0.05%)</title><rect width=".046%" height="15" x="8.203%" y="389" fill="#DF8B08" fg:w="2" fg:x="356"/></g><g><title>sz_index2size_lookup_impl (2 samples, 0.05%)</title><rect width=".046%" height="15" x="8.203%" y="373" fill="#E8D526" fg:w="2" fg:x="356"/></g><g><title>?? (22 samples, 0.51%)</title><rect width=".507%" height="15" x="7.765%" y="565" fill="#CF5E16" fg:w="22" fg:x="337"/></g><g><title>core::ptr::write (1 samples, 0.02%)</title><rect width=".023%" height="15" x="8.249%" y="549" fill="#DBB736" fg:w="1" fg:x="358"/></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (4 samples, 0.09%)</title><rect width=".092%" height="15" x="8.687%" y="485" fill="#D8B936" fg:w="4" fg:x="377"/></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (12 samples, 0.28%)</title><rect width=".277%" height="15" x="10.161%" y="373" fill="#FED927" fg:w="12" fg:x="441"/></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (10 samples, 0.23%)</title><rect width=".23%" height="15" x="10.438%" y="357" fill="#F0B217" fg:w="10" fg:x="453"/></g><g><title>?? (13 samples, 0.30%)</title><rect width=".299%" height="15" x="10.438%" y="373" fill="#DA0B2F" fg:w="13" fg:x="453"/></g><g><title>core::slice::&lt;impl [T]&gt;::get (3 samples, 0.07%)</title><rect width=".069%" height="15" x="10.668%" y="357" fill="#DA3333" fg:w="3" fg:x="463"/></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (3 samples, 0.07%)</title><rect width=".069%" height="15" x="10.668%" y="341" fill="#EE7E1B" fg:w="3" fg:x="463"/></g><g><title>serde::de::MapAccess::next_key (99 samples, 2.28%)</title><rect width="2.281%" height="15" x="9.654%" y="469" fill="#F9CA16" fg:w="99" fg:x="419"/><text x="9.904%" y="479.5">s..</text></g><g><title>&lt;simd_json::serde::de::CommaSeparated as serde::de::MapAccess&gt;::next_key_seed (99 samples, 2.28%)</title><rect width="2.281%" height="15" x="9.654%" y="453" fill="#FEC331" fg:w="99" fg:x="419"/><text x="9.904%" y="463.5">&lt;..</text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (89 samples, 2.05%)</title><rect width="2.051%" height="15" x="9.885%" y="437" fill="#D07B0E" fg:w="89" fg:x="429"/><text x="10.135%" y="447.5">&lt;..</text></g><g><title>&lt;json_benchmark::copy::citm_catalog::_::&lt;impl serde::de::Deserialize for json_benchmark::copy::citm_catalog::Area&gt;::deserialize::__Field as serde::de::Deserialize&gt;::deserialize (89 samples, 2.05%)</title><rect width="2.051%" height="15" x="9.885%" y="421" fill="#E0C808" fg:w="89" fg:x="429"/><text x="10.135%" y="431.5">&lt;..</text></g><g><title>&lt;simd_json::serde::de::MapKey as serde::de::Deserializer&gt;::deserialize_identifier (89 samples, 2.05%)</title><rect width="2.051%" height="15" x="9.885%" y="405" fill="#D93D24" fg:w="89" fg:x="429"/><text x="10.135%" y="415.5">&lt;..</text></g><g><title>&lt;simd_json::serde::de::MapKey as serde::de::Deserializer&gt;::deserialize_any (89 samples, 2.05%)</title><rect width="2.051%" height="15" x="9.885%" y="389" fill="#CE232D" fg:w="89" fg:x="429"/><text x="10.135%" y="399.5">&lt;..</text></g><g><title>serde::de::Visitor::visit_borrowed_str (52 samples, 1.20%)</title><rect width="1.198%" height="15" x="10.737%" y="373" fill="#D94121" fg:w="52" fg:x="466"/></g><g><title>&lt;json_benchmark::copy::citm_catalog::_::&lt;impl serde::de::Deserialize for json_benchmark::copy::citm_catalog::Area&gt;::deserialize::__FieldVisitor as serde::de::Visitor&gt;::visit_str (52 samples, 1.20%)</title><rect width="1.198%" height="15" x="10.737%" y="357" fill="#DE9E30" fg:w="52" fg:x="466"/></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (49 samples, 1.13%)</title><rect width="1.129%" height="15" x="10.806%" y="341" fill="#FE0236" fg:w="49" fg:x="469"/></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (49 samples, 1.13%)</title><rect width="1.129%" height="15" x="10.806%" y="325" fill="#FA8F26" fg:w="49" fg:x="469"/></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (49 samples, 1.13%)</title><rect width="1.129%" height="15" x="10.806%" y="309" fill="#F81900" fg:w="49" fg:x="469"/></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (49 samples, 1.13%)</title><rect width="1.129%" height="15" x="10.806%" y="293" fill="#CE981B" fg:w="49" fg:x="469"/></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.02%)</title><rect width=".023%" height="15" x="11.935%" y="373" fill="#F04D1E" fg:w="1" fg:x="518"/></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (16 samples, 0.37%)</title><rect width=".369%" height="15" x="11.959%" y="357" fill="#E70503" fg:w="16" fg:x="519"/></g><g><title>&lt;json_benchmark::empty::Array as serde::de::Deserialize&gt;::deserialize (18 samples, 0.41%)</title><rect width=".415%" height="15" x="11.935%" y="421" fill="#CFE220" fg:w="18" fg:x="518"/></g><g><title>simd_json::serde::de::&lt;impl serde::de::Deserializer for &amp;mut simd_json::Deserializer&gt;::deserialize_tuple (18 samples, 0.41%)</title><rect width=".415%" height="15" x="11.935%" y="405" fill="#DECF2F" fg:w="18" fg:x="518"/></g><g><title>simd_json::serde::de::&lt;impl serde::de::Deserializer for &amp;mut simd_json::Deserializer&gt;::deserialize_seq (18 samples, 0.41%)</title><rect width=".415%" height="15" x="11.935%" y="389" fill="#E5732D" fg:w="18" fg:x="518"/></g><g><title>?? (17 samples, 0.39%)</title><rect width=".392%" height="15" x="11.959%" y="373" fill="#E0BF06" fg:w="17" fg:x="519"/></g><g><title>core::slice::&lt;impl [T]&gt;::get (1 samples, 0.02%)</title><rect width=".023%" height="15" x="12.327%" y="357" fill="#E6E318" fg:w="1" fg:x="535"/></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (1 samples, 0.02%)</title><rect width=".023%" height="15" x="12.327%" y="341" fill="#E45013" fg:w="1" fg:x="535"/></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (13 samples, 0.30%)</title><rect width=".299%" height="15" x="12.35%" y="389" fill="#F7E500" fg:w="13" fg:x="536"/></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (8 samples, 0.18%)</title><rect width=".184%" height="15" x="12.65%" y="373" fill="#EDC20F" fg:w="8" fg:x="549"/></g><g><title>&lt;json_benchmark::copy::citm_catalog::_::&lt;impl serde::de::Deserialize for json_benchmark::copy::citm_catalog::Area&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_map (177 samples, 4.08%)</title><rect width="4.078%" height="15" x="8.779%" y="485" fill="#DBCB14" fg:w="177" fg:x="381"/><text x="9.029%" y="495.5">&lt;jso..</text></g><g><title>serde::de::MapAccess::next_value (40 samples, 0.92%)</title><rect width=".922%" height="15" x="11.935%" y="469" fill="#EA8008" fg:w="40" fg:x="518"/></g><g><title>&lt;simd_json::serde::de::CommaSeparated as serde::de::MapAccess&gt;::next_value_seed (40 samples, 0.92%)</title><rect width=".922%" height="15" x="11.935%" y="453" fill="#F8CA08" fg:w="40" fg:x="518"/></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (40 samples, 0.92%)</title><rect width=".922%" height="15" x="11.935%" y="437" fill="#CE6825" fg:w="40" fg:x="518"/></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u32&gt;::deserialize (22 samples, 0.51%)</title><rect width=".507%" height="15" x="12.35%" y="421" fill="#DF081B" fg:w="22" fg:x="536"/></g><g><title>simd_json::serde::de::&lt;impl serde::de::Deserializer for &amp;mut simd_json::Deserializer&gt;::deserialize_u32 (22 samples, 0.51%)</title><rect width=".507%" height="15" x="12.35%" y="405" fill="#D8D91C" fg:w="22" fg:x="536"/></g><g><title>?? (9 samples, 0.21%)</title><rect width=".207%" height="15" x="12.65%" y="389" fill="#F9C701" fg:w="9" fg:x="549"/></g><g><title>?? (1 samples, 0.02%)</title><rect width=".023%" height="15" x="12.834%" y="373" fill="#F05511" fg:w="1" fg:x="557"/></g><g><title>&lt;[T] as simd_json::safer_unchecked::GetSaferUnchecked&lt;T&gt;&gt;::get_kinda_unchecked (1 samples, 0.02%)</title><rect width=".023%" height="15" x="12.834%" y="357" fill="#CE6C2D" fg:w="1" fg:x="557"/></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked (1 samples, 0.02%)</title><rect width=".023%" height="15" x="12.834%" y="341" fill="#F5D229" fg:w="1" fg:x="557"/></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (1 samples, 0.02%)</title><rect width=".023%" height="15" x="12.834%" y="325" fill="#CE0D25" fg:w="1" fg:x="557"/></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (1 samples, 0.02%)</title><rect width=".023%" height="15" x="12.834%" y="309" fill="#FA3D12" fg:w="1" fg:x="557"/></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (2 samples, 0.05%)</title><rect width=".046%" height="15" x="12.857%" y="469" fill="#EBAC30" fg:w="2" fg:x="558"/></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (15 samples, 0.35%)</title><rect width=".346%" height="15" x="12.903%" y="469" fill="#F9C911" fg:w="15" fg:x="560"/></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (256 samples, 5.90%)</title><rect width="5.899%" height="15" x="7.373%" y="581" fill="#DBD006" fg:w="256" fg:x="320"/><text x="7.623%" y="591.5">&lt;serde:..</text></g><g><title>serde::de::SeqAccess::next_element (217 samples, 5.00%)</title><rect width="5%" height="15" x="8.272%" y="565" fill="#F81F17" fg:w="217" fg:x="359"/><text x="8.522%" y="575.5">serde:..</text></g><g><title>&lt;simd_json::serde::de::CommaSeparated as serde::de::SeqAccess&gt;::next_element_seed (217 samples, 5.00%)</title><rect width="5%" height="15" x="8.272%" y="549" fill="#F50F2A" fg:w="217" fg:x="359"/><text x="8.522%" y="559.5">&lt;simd_..</text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (217 samples, 5.00%)</title><rect width="5%" height="15" x="8.272%" y="533" fill="#DED927" fg:w="217" fg:x="359"/><text x="8.522%" y="543.5">&lt;core:..</text></g><g><title>json_benchmark::copy::citm_catalog::_::&lt;impl serde::de::Deserialize for json_benchmark::copy::citm_catalog::Area&gt;::deserialize (217 samples, 5.00%)</title><rect width="5%" height="15" x="8.272%" y="517" fill="#D2DB1B" fg:w="217" fg:x="359"/><text x="8.522%" y="527.5">json_b..</text></g><g><title>simd_json::serde::de::&lt;impl serde::de::Deserializer for &amp;mut simd_json::Deserializer&gt;::deserialize_struct (217 samples, 5.00%)</title><rect width="5%" height="15" x="8.272%" y="501" fill="#FCA624" fg:w="217" fg:x="359"/><text x="8.522%" y="511.5">simd_j..</text></g><g><title>?? (18 samples, 0.41%)</title><rect width=".415%" height="15" x="12.857%" y="485" fill="#F58422" fg:w="18" fg:x="558"/></g><g><title>core::slice::&lt;impl [T]&gt;::get (1 samples, 0.02%)</title><rect width=".023%" height="15" x="13.249%" y="469" fill="#EC3603" fg:w="1" fg:x="575"/></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (1 samples, 0.02%)</title><rect width=".023%" height="15" x="13.249%" y="453" fill="#F1AD2B" fg:w="1" fg:x="575"/></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (3 samples, 0.07%)</title><rect width=".069%" height="15" x="13.272%" y="565" fill="#D7BE09" fg:w="3" fg:x="576"/></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize (262 samples, 6.04%)</title><rect width="6.037%" height="15" x="7.35%" y="613" fill="#F26510" fg:w="262" fg:x="319"/><text x="7.6%" y="623.5">serde::d..</text></g><g><title>simd_json::serde::de::&lt;impl serde::de::Deserializer for &amp;mut simd_json::Deserializer&gt;::deserialize_seq (262 samples, 6.04%)</title><rect width="6.037%" height="15" x="7.35%" y="597" fill="#DFBE15" fg:w="262" fg:x="319"/><text x="7.6%" y="607.5">simd_jso..</text></g><g><title>?? (5 samples, 0.12%)</title><rect width=".115%" height="15" x="13.272%" y="581" fill="#D7E419" fg:w="5" fg:x="576"/></g><g><title>core::slice::&lt;impl [T]&gt;::get (2 samples, 0.05%)</title><rect width=".046%" height="15" x="13.341%" y="565" fill="#E12416" fg:w="2" fg:x="579"/></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (2 samples, 0.05%)</title><rect width=".046%" height="15" x="13.341%" y="549" fill="#FB6A2E" fg:w="2" fg:x="579"/></g><g><title>&lt;json_benchmark::copy::citm_catalog::_::&lt;impl serde::de::Deserialize for json_benchmark::copy::citm_catalog::SeatCategory&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_map (289 samples, 6.66%)</title><rect width="6.659%" height="15" x="6.751%" y="677" fill="#D05A01" fg:w="289" fg:x="293"/><text x="7.001%" y="687.5">&lt;json_ben..</text></g><g><title>serde::de::MapAccess::next_value (264 samples, 6.08%)</title><rect width="6.083%" height="15" x="7.327%" y="661" fill="#F30A04" fg:w="264" fg:x="318"/><text x="7.577%" y="671.5">serde::d..</text></g><g><title>&lt;simd_json::serde::de::CommaSeparated as serde::de::MapAccess&gt;::next_value_seed (264 samples, 6.08%)</title><rect width="6.083%" height="15" x="7.327%" y="645" fill="#D4891B" fg:w="264" fg:x="318"/><text x="7.577%" y="655.5">&lt;simd_js..</text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (264 samples, 6.08%)</title><rect width="6.083%" height="15" x="7.327%" y="629" fill="#E7DC31" fg:w="264" fg:x="318"/><text x="7.577%" y="639.5">&lt;core::m..</text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u32&gt;::deserialize (1 samples, 0.02%)</title><rect width=".023%" height="15" x="13.387%" y="613" fill="#ED6014" fg:w="1" fg:x="581"/></g><g><title>simd_json::serde::de::&lt;impl serde::de::Deserializer for &amp;mut simd_json::Deserializer&gt;::deserialize_u32 (1 samples, 0.02%)</title><rect width=".023%" height="15" x="13.387%" y="597" fill="#EFE51E" fg:w="1" fg:x="581"/></g><g><title>?? (1 samples, 0.02%)</title><rect width=".023%" height="15" x="13.387%" y="581" fill="#DB4121" fg:w="1" fg:x="581"/></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.02%)</title><rect width=".023%" height="15" x="13.387%" y="565" fill="#F38607" fg:w="1" fg:x="581"/></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (350 samples, 8.06%)</title><rect width="8.065%" height="15" x="5.438%" y="773" fill="#D8B136" fg:w="350" fg:x="236"/><text x="5.688%" y="783.5">&lt;serde::de:..</text></g><g><title>serde::de::SeqAccess::next_element (328 samples, 7.56%)</title><rect width="7.558%" height="15" x="5.945%" y="757" fill="#D3A014" fg:w="328" fg:x="258"/><text x="6.195%" y="767.5">serde::de:..</text></g><g><title>&lt;simd_json::serde::de::CommaSeparated as serde::de::SeqAccess&gt;::next_element_seed (328 samples, 7.56%)</title><rect width="7.558%" height="15" x="5.945%" y="741" fill="#EF5527" fg:w="328" fg:x="258"/><text x="6.195%" y="751.5">&lt;simd_json..</text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (326 samples, 7.51%)</title><rect width="7.511%" height="15" x="5.991%" y="725" fill="#E87D16" fg:w="326" fg:x="260"/><text x="6.241%" y="735.5">&lt;core::mar..</text></g><g><title>json_benchmark::copy::citm_catalog::_::&lt;impl serde::de::Deserialize for json_benchmark::copy::citm_catalog::SeatCategory&gt;::deserialize (294 samples, 6.77%)</title><rect width="6.774%" height="15" x="6.728%" y="709" fill="#F43922" fg:w="294" fg:x="292"/><text x="6.978%" y="719.5">json_benc..</text></g><g><title>simd_json::serde::de::&lt;impl serde::de::Deserializer for &amp;mut simd_json::Deserializer&gt;::deserialize_struct (294 samples, 6.77%)</title><rect width="6.774%" height="15" x="6.728%" y="693" fill="#D6CB20" fg:w="294" fg:x="292"/><text x="6.978%" y="703.5">simd_json..</text></g><g><title>?? (4 samples, 0.09%)</title><rect width=".092%" height="15" x="13.41%" y="677" fill="#CF3A2B" fg:w="4" fg:x="582"/></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (4 samples, 0.09%)</title><rect width=".092%" height="15" x="13.41%" y="661" fill="#D7C10F" fg:w="4" fg:x="582"/></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize (352 samples, 8.11%)</title><rect width="8.111%" height="15" x="5.438%" y="805" fill="#E80F2C" fg:w="352" fg:x="236"/><text x="5.688%" y="815.5">serde::de::..</text></g><g><title>simd_json::serde::de::&lt;impl serde::de::Deserializer for &amp;mut simd_json::Deserializer&gt;::deserialize_seq (352 samples, 8.11%)</title><rect width="8.111%" height="15" x="5.438%" y="789" fill="#D40330" fg:w="352" fg:x="236"/><text x="5.688%" y="799.5">simd_json::..</text></g><g><title>?? (2 samples, 0.05%)</title><rect width=".046%" height="15" x="13.502%" y="773" fill="#DA8007" fg:w="2" fg:x="586"/></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (2 samples, 0.05%)</title><rect width=".046%" height="15" x="13.502%" y="757" fill="#E2D827" fg:w="2" fg:x="586"/></g><g><title>?? (1 samples, 0.02%)</title><rect width=".023%" height="15" x="13.548%" y="613" fill="#F32F33" fg:w="1" fg:x="588"/></g><g><title>?? (1 samples, 0.02%)</title><rect width=".023%" height="15" x="13.548%" y="597" fill="#F1B728" fg:w="1" fg:x="588"/></g><g><title>?? (1 samples, 0.02%)</title><rect width=".023%" height="15" x="13.548%" y="581" fill="#E7D920" fg:w="1" fg:x="588"/></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.02%)</title><rect width=".023%" height="15" x="13.548%" y="565" fill="#E53D26" fg:w="1" fg:x="588"/></g><g><title>?? (1 samples, 0.02%)</title><rect width=".023%" height="15" x="13.548%" y="549" fill="#E1D205" fg:w="1" fg:x="588"/></g><g><title>alloc::alloc::alloc (1 samples, 0.02%)</title><rect width=".023%" height="15" x="13.548%" y="533" fill="#E74F2D" fg:w="1" fg:x="588"/></g><g><title>__rust_alloc (1 samples, 0.02%)</title><rect width=".023%" height="15" x="13.548%" y="517" fill="#E06407" fg:w="1" fg:x="588"/></g><g><title>&lt;jemallocator::Jemalloc as core::alloc::global::GlobalAlloc&gt;::alloc (1 samples, 0.02%)</title><rect width=".023%" height="15" x="13.548%" y="501" fill="#F1C612" fg:w="1" fg:x="588"/></g><g><title>_rjem_je_malloc_default (1 samples, 0.02%)</title><rect width=".023%" height="15" x="13.548%" y="485" fill="#FC6135" fg:w="1" fg:x="588"/></g><g><title>imalloc (1 samples, 0.02%)</title><rect width=".023%" height="15" x="13.548%" y="469" fill="#DC5807" fg:w="1" fg:x="588"/></g><g><title>imalloc_body (1 samples, 0.02%)</title><rect width=".023%" height="15" x="13.548%" y="453" fill="#D5B00E" fg:w="1" fg:x="588"/></g><g><title>imalloc_no_sample (1 samples, 0.02%)</title><rect width=".023%" height="15" x="13.548%" y="437" fill="#F64907" fg:w="1" fg:x="588"/></g><g><title>iallocztm (1 samples, 0.02%)</title><rect width=".023%" height="15" x="13.548%" y="421" fill="#F54024" fg:w="1" fg:x="588"/></g><g><title>arena_malloc (1 samples, 0.02%)</title><rect width=".023%" height="15" x="13.548%" y="405" fill="#F5500A" fg:w="1" fg:x="588"/></g><g><title>tcache_alloc_small (1 samples, 0.02%)</title><rect width=".023%" height="15" x="13.548%" y="389" fill="#E86B32" fg:w="1" fg:x="588"/></g><g><title>_rjem_je_tcache_alloc_small_hard (1 samples, 0.02%)</title><rect width=".023%" height="15" x="13.548%" y="373" fill="#FD0300" fg:w="1" fg:x="588"/></g><g><title>_rjem_je_arena_cache_bin_fill_small (1 samples, 0.02%)</title><rect width=".023%" height="15" x="13.548%" y="357" fill="#D46335" fg:w="1" fg:x="588"/></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for core::option::Option&lt;T&gt;&gt;::deserialize (2 samples, 0.05%)</title><rect width=".046%" height="15" x="13.548%" y="805" fill="#F96F36" fg:w="2" fg:x="588"/></g><g><title>simd_json::serde::de::&lt;impl serde::de::Deserializer for &amp;mut simd_json::Deserializer&gt;::deserialize_option (2 samples, 0.05%)</title><rect width=".046%" height="15" x="13.548%" y="789" fill="#F9371E" fg:w="2" fg:x="588"/></g><g><title>&lt;serde::de::impls::OptionVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_some (2 samples, 0.05%)</title><rect width=".046%" height="15" x="13.548%" y="773" fill="#ED2F2A" fg:w="2" fg:x="588"/></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for alloc::string::String&gt;::deserialize (2 samples, 0.05%)</title><rect width=".046%" height="15" x="13.548%" y="757" fill="#D31412" fg:w="2" fg:x="588"/></g><g><title>simd_json::serde::de::&lt;impl serde::de::Deserializer for &amp;mut simd_json::Deserializer&gt;::deserialize_string (2 samples, 0.05%)</title><rect width=".046%" height="15" x="13.548%" y="741" fill="#E7CB2E" fg:w="2" fg:x="588"/></g><g><title>&lt;serde::de::impls::StringVisitor as serde::de::Visitor&gt;::visit_str (2 samples, 0.05%)</title><rect width=".046%" height="15" x="13.548%" y="725" fill="#ED8E03" fg:w="2" fg:x="588"/></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (2 samples, 0.05%)</title><rect width=".046%" height="15" x="13.548%" y="709" fill="#F16B01" fg:w="2" fg:x="588"/></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (2 samples, 0.05%)</title><rect width=".046%" height="15" x="13.548%" y="693" fill="#E5530D" fg:w="2" fg:x="588"/></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (2 samples, 0.05%)</title><rect width=".046%" height="15" x="13.548%" y="677" fill="#F15B28" fg:w="2" fg:x="588"/></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2 samples, 0.05%)</title><rect width=".046%" height="15" x="13.548%" y="661" fill="#E1032D" fg:w="2" fg:x="588"/></g><g><title>alloc::slice::hack::to_vec (2 samples, 0.05%)</title><rect width=".046%" height="15" x="13.548%" y="645" fill="#F4DF0E" fg:w="2" fg:x="588"/></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2 samples, 0.05%)</title><rect width=".046%" height="15" x="13.548%" y="629" fill="#E07C25" fg:w="2" fg:x="588"/></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.02%)</title><rect width=".023%" height="15" x="13.571%" y="613" fill="#FBAB1E" fg:w="1" fg:x="589"/></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.02%)</title><rect width=".023%" height="15" x="13.571%" y="597" fill="#EC2E36" fg:w="1" fg:x="589"/></g><g><title>__memmove_avx_unaligned_erms (1 samples, 0.02%)</title><rect width=".023%" height="15" x="13.571%" y="581" fill="#F5D505" fg:w="1" fg:x="589"/></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.02%)</title><rect width=".023%" height="15" x="13.595%" y="757" fill="#E6901B" fg:w="1" fg:x="590"/></g><g><title>&lt;json_benchmark::copy::citm_catalog::_::&lt;impl serde::de::Deserialize for json_benchmark::copy::citm_catalog::Performance&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_map (387 samples, 8.92%)</title><rect width="8.917%" height="15" x="4.723%" y="869" fill="#DC5606" fg:w="387" fg:x="205"/><text x="4.973%" y="879.5">&lt;json_benchma..</text></g><g><title>serde::de::MapAccess::next_value (363 samples, 8.36%)</title><rect width="8.364%" height="15" x="5.277%" y="853" fill="#F0140D" fg:w="363" fg:x="229"/><text x="5.527%" y="863.5">serde::de::M..</text></g><g><title>&lt;simd_json::serde::de::CommaSeparated as serde::de::MapAccess&gt;::next_value_seed (363 samples, 8.36%)</title><rect width="8.364%" height="15" x="5.277%" y="837" fill="#D95922" fg:w="363" fg:x="229"/><text x="5.527%" y="847.5">&lt;simd_json::..</text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (363 samples, 8.36%)</title><rect width="8.364%" height="15" x="5.277%" y="821" fill="#E50D05" fg:w="363" fg:x="229"/><text x="5.527%" y="831.5">&lt;core::marke..</text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u32&gt;::deserialize (2 samples, 0.05%)</title><rect width=".046%" height="15" x="13.595%" y="805" fill="#F44323" fg:w="2" fg:x="590"/></g><g><title>simd_json::serde::de::&lt;impl serde::de::Deserializer for &amp;mut simd_json::Deserializer&gt;::deserialize_u32 (2 samples, 0.05%)</title><rect width=".046%" height="15" x="13.595%" y="789" fill="#DD2802" fg:w="2" fg:x="590"/></g><g><title>?? (2 samples, 0.05%)</title><rect width=".046%" height="15" x="13.595%" y="773" fill="#ED9D15" fg:w="2" fg:x="590"/></g><g><title>value_trait::ValueAccess::as_u32 (1 samples, 0.02%)</title><rect width=".023%" height="15" x="13.617%" y="757" fill="#DE5E0B" fg:w="1" fg:x="591"/></g><g><title>&lt;value_trait::node::StaticNode as value_trait::ValueAccess&gt;::as_u64 (1 samples, 0.02%)</title><rect width=".023%" height="15" x="13.617%" y="741" fill="#F97106" fg:w="1" fg:x="591"/></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (395 samples, 9.10%)</title><rect width="9.101%" height="15" x="4.562%" y="965" fill="#EE8924" fg:w="395" fg:x="198"/><text x="4.812%" y="975.5">&lt;serde::de::i..</text></g><g><title>serde::de::SeqAccess::next_element (391 samples, 9.01%)</title><rect width="9.009%" height="15" x="4.654%" y="949" fill="#D2661A" fg:w="391" fg:x="202"/><text x="4.904%" y="959.5">serde::de::Se..</text></g><g><title>&lt;simd_json::serde::de::CommaSeparated as serde::de::SeqAccess&gt;::next_element_seed (391 samples, 9.01%)</title><rect width="9.009%" height="15" x="4.654%" y="933" fill="#DA1E1E" fg:w="391" fg:x="202"/><text x="4.904%" y="943.5">&lt;simd_json::s..</text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (391 samples, 9.01%)</title><rect width="9.009%" height="15" x="4.654%" y="917" fill="#D6431A" fg:w="391" fg:x="202"/><text x="4.904%" y="927.5">&lt;core::marker..</text></g><g><title>json_benchmark::copy::citm_catalog::_::&lt;impl serde::de::Deserialize for json_benchmark::copy::citm_catalog::Performance&gt;::deserialize (391 samples, 9.01%)</title><rect width="9.009%" height="15" x="4.654%" y="901" fill="#FB0935" fg:w="391" fg:x="202"/><text x="4.904%" y="911.5">json_benchmar..</text></g><g><title>simd_json::serde::de::&lt;impl serde::de::Deserializer for &amp;mut simd_json::Deserializer&gt;::deserialize_struct (391 samples, 9.01%)</title><rect width="9.009%" height="15" x="4.654%" y="885" fill="#E4CC19" fg:w="391" fg:x="202"/><text x="4.904%" y="895.5">simd_json::se..</text></g><g><title>?? (1 samples, 0.02%)</title><rect width=".023%" height="15" x="13.641%" y="869" fill="#CF9908" fg:w="1" fg:x="592"/></g><g><title>core::slice::&lt;impl [T]&gt;::get (1 samples, 0.02%)</title><rect width=".023%" height="15" x="13.641%" y="853" fill="#F20910" fg:w="1" fg:x="592"/></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (1 samples, 0.02%)</title><rect width=".023%" height="15" x="13.641%" y="837" fill="#D9D30A" fg:w="1" fg:x="592"/></g><g><title>&lt;json_benchmark::copy::citm_catalog::_::&lt;impl serde::de::Deserialize for json_benchmark::copy::citm_catalog::CitmCatalog&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_map (508 samples, 11.71%)</title><rect width="11.705%" height="15" x="1.982%" y="1061" fill="#DBE434" fg:w="508" fg:x="86"/><text x="2.232%" y="1071.5">&lt;json_benchmark::..</text></g><g><title>serde::de::MapAccess::next_value (505 samples, 11.64%)</title><rect width="11.636%" height="15" x="2.051%" y="1045" fill="#E75C1D" fg:w="505" fg:x="89"/><text x="2.301%" y="1055.5">serde::de::MapAcc..</text></g><g><title>&lt;simd_json::serde::de::CommaSeparated as serde::de::MapAccess&gt;::next_value_seed (505 samples, 11.64%)</title><rect width="11.636%" height="15" x="2.051%" y="1029" fill="#E80817" fg:w="505" fg:x="89"/><text x="2.301%" y="1039.5">&lt;simd_json::serde..</text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (505 samples, 11.64%)</title><rect width="11.636%" height="15" x="2.051%" y="1013" fill="#D8D322" fg:w="505" fg:x="89"/><text x="2.301%" y="1023.5">&lt;core::marker::Ph..</text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize (396 samples, 9.12%)</title><rect width="9.124%" height="15" x="4.562%" y="997" fill="#EC9700" fg:w="396" fg:x="198"/><text x="4.812%" y="1007.5">serde::de::im..</text></g><g><title>simd_json::serde::de::&lt;impl serde::de::Deserializer for &amp;mut simd_json::Deserializer&gt;::deserialize_seq (396 samples, 9.12%)</title><rect width="9.124%" height="15" x="4.562%" y="981" fill="#D1A803" fg:w="396" fg:x="198"/><text x="4.812%" y="991.5">simd_json::se..</text></g><g><title>?? (1 samples, 0.02%)</title><rect width=".023%" height="15" x="13.664%" y="965" fill="#D0811C" fg:w="1" fg:x="593"/></g><g><title>core::slice::&lt;impl [T]&gt;::get (1 samples, 0.02%)</title><rect width=".023%" height="15" x="13.664%" y="949" fill="#E54E16" fg:w="1" fg:x="593"/></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (1 samples, 0.02%)</title><rect width=".023%" height="15" x="13.664%" y="933" fill="#E4BB0D" fg:w="1" fg:x="593"/></g><g><title>json_benchmark::copy::citm_catalog::_::&lt;impl serde::de::Deserialize for json_benchmark::copy::citm_catalog::CitmCatalog&gt;::deserialize (509 samples, 11.73%)</title><rect width="11.728%" height="15" x="1.982%" y="1093" fill="#F07718" fg:w="509" fg:x="86"/><text x="2.232%" y="1103.5">json_benchmark::c..</text></g><g><title>simd_json::serde::de::&lt;impl serde::de::Deserializer for &amp;mut simd_json::Deserializer&gt;::deserialize_struct (509 samples, 11.73%)</title><rect width="11.728%" height="15" x="1.982%" y="1077" fill="#D1C22A" fg:w="509" fg:x="86"/><text x="2.232%" y="1087.5">simd_json::serde:..</text></g><g><title>__memmove_avx_unaligned_erms (1 samples, 0.02%)</title><rect width=".023%" height="15" x="13.687%" y="1061" fill="#F7C82E" fg:w="1" fg:x="594"/></g><g><title>core::core_arch::x86::avx2::_mm256_and_si256 (1 samples, 0.02%)</title><rect width=".023%" height="15" x="14.217%" y="997" fill="#DA4C10" fg:w="1" fg:x="617"/></g><g><title>core::core_arch::x86::avx2::_mm256_cmpeq_epi8 (8 samples, 0.18%)</title><rect width=".184%" height="15" x="14.24%" y="997" fill="#E11530" fg:w="8" fg:x="618"/></g><g><title>core::core_arch::x86::avx2::_mm256_movemask_epi8 (14 samples, 0.32%)</title><rect width=".323%" height="15" x="14.424%" y="997" fill="#EFDF32" fg:w="14" fg:x="626"/></g><g><title>core::core_arch::x86::avx2::_mm256_shuffle_epi8 (20 samples, 0.46%)</title><rect width=".461%" height="15" x="14.746%" y="997" fill="#F42D15" fg:w="20" fg:x="640"/></g><g><title>&lt;simd_json::avx2::stage1::SimdInputAVX as simd_json::Stage1Parse&lt;core::core_arch::x86::__m256i&gt;&gt;::find_whitespace_and_structurals (79 samples, 1.82%)</title><rect width="1.82%" height="15" x="13.71%" y="1013" fill="#E8212B" fg:w="79" fg:x="595"/><text x="13.96%" y="1023.5">&lt;..</text></g><g><title>simd_json::Deserializer::from_slice (14 samples, 0.32%)</title><rect width=".323%" height="15" x="15.207%" y="997" fill="#D10803" fg:w="14" fg:x="660"/></g><g><title>core::num::&lt;impl usize&gt;::wrapping_sub (1 samples, 0.02%)</title><rect width=".023%" height="15" x="17.396%" y="949" fill="#D61935" fg:w="1" fg:x="755"/></g><g><title>?? (13 samples, 0.30%)</title><rect width=".299%" height="15" x="17.396%" y="965" fill="#FEBA36" fg:w="13" fg:x="755"/></g><g><title>simd_json::Deserializer::from_slice (12 samples, 0.28%)</title><rect width=".277%" height="15" x="17.419%" y="949" fill="#D0AE31" fg:w="12" fg:x="756"/></g><g><title>?? (20 samples, 0.46%)</title><rect width=".461%" height="15" x="17.396%" y="997" fill="#E9BF33" fg:w="20" fg:x="755"/></g><g><title>?? (20 samples, 0.46%)</title><rect width=".461%" height="15" x="17.396%" y="981" fill="#DE860A" fg:w="20" fg:x="755"/></g><g><title>simd_json::Deserializer::from_slice (7 samples, 0.16%)</title><rect width=".161%" height="15" x="17.696%" y="965" fill="#E6E214" fg:w="7" fg:x="768"/></g><g><title>core::core_arch::x86::avx2::_mm256_add_epi32 (5 samples, 0.12%)</title><rect width=".115%" height="15" x="17.857%" y="997" fill="#FB6F19" fg:w="5" fg:x="775"/></g><g><title>core::core_arch::x86::avx::_mm256_set_epi32 (25 samples, 0.58%)</title><rect width=".576%" height="15" x="17.972%" y="997" fill="#E0282E" fg:w="25" fg:x="780"/></g><g><title>core::core_arch::x86::avx::_mm256_setr_epi32 (25 samples, 0.58%)</title><rect width=".576%" height="15" x="17.972%" y="981" fill="#EC6C2F" fg:w="25" fg:x="780"/></g><g><title>simd_json::Deserializer::from_slice (25 samples, 0.58%)</title><rect width=".576%" height="15" x="17.972%" y="965" fill="#EA5D00" fg:w="25" fg:x="780"/></g><g><title>core::core_arch::x86::avx::_mm256_storeu_si256 (25 samples, 0.58%)</title><rect width=".576%" height="15" x="18.548%" y="997" fill="#E0D520" fg:w="25" fg:x="805"/></g><g><title>core::num::&lt;impl u64&gt;::trailing_zeros (76 samples, 1.75%)</title><rect width="1.751%" height="15" x="19.124%" y="997" fill="#FB0B30" fg:w="76" fg:x="830"/></g><g><title>&lt;simd_json::avx2::stage1::SimdInputAVX as simd_json::Stage1Parse&lt;core::core_arch::x86::__m256i&gt;&gt;::flatten_bits (233 samples, 5.37%)</title><rect width="5.369%" height="15" x="15.53%" y="1013" fill="#ECAD05" fg:w="233" fg:x="674"/><text x="15.78%" y="1023.5">&lt;simd_j..</text></g><g><title>simd_json::Deserializer::from_slice (1 samples, 0.02%)</title><rect width=".023%" height="15" x="20.876%" y="997" fill="#E65F0C" fg:w="1" fg:x="906"/></g><g><title>?? (1 samples, 0.02%)</title><rect width=".023%" height="15" x="20.899%" y="949" fill="#E8D101" fg:w="1" fg:x="907"/></g><g><title>?? (1 samples, 0.02%)</title><rect width=".023%" height="15" x="20.899%" y="933" fill="#E80601" fg:w="1" fg:x="907"/></g><g><title>core::core_arch::x86::avx2::_mm256_shuffle_epi8 (1 samples, 0.02%)</title><rect width=".023%" height="15" x="20.899%" y="917" fill="#D2E032" fg:w="1" fg:x="907"/></g><g><title>core::core_arch::x86::avx2::_mm256_movemask_epi8 (2 samples, 0.05%)</title><rect width=".046%" height="15" x="20.922%" y="949" fill="#E47F23" fg:w="2" fg:x="908"/></g><g><title>?? (8 samples, 0.18%)</title><rect width=".184%" height="15" x="20.899%" y="965" fill="#F5662D" fg:w="8" fg:x="907"/></g><g><title>core::core_arch::x86::avx2::_mm256_or_si256 (5 samples, 0.12%)</title><rect width=".115%" height="15" x="20.968%" y="949" fill="#D60131" fg:w="5" fg:x="910"/></g><g><title>?? (42 samples, 0.97%)</title><rect width=".968%" height="15" x="20.899%" y="997" fill="#E2A328" fg:w="42" fg:x="907"/></g><g><title>?? (42 samples, 0.97%)</title><rect width=".968%" height="15" x="20.899%" y="981" fill="#EFD41C" fg:w="42" fg:x="907"/></g><g><title>core::core_arch::x86::avx::_mm256_loadu_si256 (34 samples, 0.78%)</title><rect width=".783%" height="15" x="21.083%" y="965" fill="#DC140D" fg:w="34" fg:x="915"/></g><g><title>core::intrinsics::copy_nonoverlapping (34 samples, 0.78%)</title><rect width=".783%" height="15" x="21.083%" y="949" fill="#D2A423" fg:w="34" fg:x="915"/></g><g><title>&lt;simdutf8::implementation::x86::avx2::ChunkedUtf8ValidatorImp as simdutf8::basic::imp::ChunkedUtf8Validator&gt;::update_from_chunks (57 samples, 1.31%)</title><rect width="1.313%" height="15" x="20.899%" y="1013" fill="#F86D29" fg:w="57" fg:x="907"/></g><g><title>simd_json::Deserializer::from_slice (15 samples, 0.35%)</title><rect width=".346%" height="15" x="21.866%" y="997" fill="#EE1732" fg:w="15" fg:x="949"/></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.02%)</title><rect width=".023%" height="15" x="22.212%" y="997" fill="#D33031" fg:w="1" fg:x="964"/></g><g><title>?? (1 samples, 0.02%)</title><rect width=".023%" height="15" x="22.212%" y="981" fill="#DF2415" fg:w="1" fg:x="964"/></g><g><title>alloc::alloc::alloc (1 samples, 0.02%)</title><rect width=".023%" height="15" x="22.212%" y="965" fill="#CF7B2E" fg:w="1" fg:x="964"/></g><g><title>__rust_alloc (1 samples, 0.02%)</title><rect width=".023%" height="15" x="22.212%" y="949" fill="#F0DA20" fg:w="1" fg:x="964"/></g><g><title>&lt;jemallocator::Jemalloc as core::alloc::global::GlobalAlloc&gt;::alloc (1 samples, 0.02%)</title><rect width=".023%" height="15" x="22.212%" y="933" fill="#FC052B" fg:w="1" fg:x="964"/></g><g><title>_rjem_je_malloc_default (1 samples, 0.02%)</title><rect width=".023%" height="15" x="22.212%" y="917" fill="#FC5413" fg:w="1" fg:x="964"/></g><g><title>imalloc (1 samples, 0.02%)</title><rect width=".023%" height="15" x="22.212%" y="901" fill="#F39827" fg:w="1" fg:x="964"/></g><g><title>imalloc_body (1 samples, 0.02%)</title><rect width=".023%" height="15" x="22.212%" y="885" fill="#EAA00F" fg:w="1" fg:x="964"/></g><g><title>imalloc_no_sample (1 samples, 0.02%)</title><rect width=".023%" height="15" x="22.212%" y="869" fill="#ED2214" fg:w="1" fg:x="964"/></g><g><title>iallocztm (1 samples, 0.02%)</title><rect width=".023%" height="15" x="22.212%" y="853" fill="#E5610D" fg:w="1" fg:x="964"/></g><g><title>arena_malloc (1 samples, 0.02%)</title><rect width=".023%" height="15" x="22.212%" y="837" fill="#EA4732" fg:w="1" fg:x="964"/></g><g><title>_rjem_je_large_palloc (1 samples, 0.02%)</title><rect width=".023%" height="15" x="22.212%" y="821" fill="#FD9B04" fg:w="1" fg:x="964"/></g><g><title>_rjem_je_arena_extent_alloc_large (1 samples, 0.02%)</title><rect width=".023%" height="15" x="22.212%" y="805" fill="#DEB925" fg:w="1" fg:x="964"/></g><g><title>_rjem_je_pa_alloc (1 samples, 0.02%)</title><rect width=".023%" height="15" x="22.212%" y="789" fill="#FBB10D" fg:w="1" fg:x="964"/></g><g><title>pai_alloc (1 samples, 0.02%)</title><rect width=".023%" height="15" x="22.212%" y="773" fill="#FAB328" fg:w="1" fg:x="964"/></g><g><title>pac_alloc_impl (1 samples, 0.02%)</title><rect width=".023%" height="15" x="22.212%" y="757" fill="#F22C02" fg:w="1" fg:x="964"/></g><g><title>pac_alloc_real (1 samples, 0.02%)</title><rect width=".023%" height="15" x="22.212%" y="741" fill="#D8B10D" fg:w="1" fg:x="964"/></g><g><title>_rjem_je_ecache_alloc_grow (1 samples, 0.02%)</title><rect width=".023%" height="15" x="22.212%" y="725" fill="#D86A2B" fg:w="1" fg:x="964"/></g><g><title>extent_alloc_retained (1 samples, 0.02%)</title><rect width=".023%" height="15" x="22.212%" y="709" fill="#D8B702" fg:w="1" fg:x="964"/></g><g><title>extent_recycle (1 samples, 0.02%)</title><rect width=".023%" height="15" x="22.212%" y="693" fill="#F94B03" fg:w="1" fg:x="964"/></g><g><title>extent_recycle_extract (1 samples, 0.02%)</title><rect width=".023%" height="15" x="22.212%" y="677" fill="#DB4327" fg:w="1" fg:x="964"/></g><g><title>extent_activate_locked (1 samples, 0.02%)</title><rect width=".023%" height="15" x="22.212%" y="661" fill="#FDE402" fg:w="1" fg:x="964"/></g><g><title>_rjem_je_eset_remove (1 samples, 0.02%)</title><rect width=".023%" height="15" x="22.212%" y="645" fill="#EB8A1B" fg:w="1" fg:x="964"/></g><g><title>edata_list_inactive_remove (1 samples, 0.02%)</title><rect width=".023%" height="15" x="22.212%" y="629" fill="#EC6133" fg:w="1" fg:x="964"/></g><g><title>__rust_alloc (1 samples, 0.02%)</title><rect width=".023%" height="15" x="22.235%" y="933" fill="#F0501E" fg:w="1" fg:x="965"/></g><g><title>&lt;jemallocator::Jemalloc as core::alloc::global::GlobalAlloc&gt;::alloc (1 samples, 0.02%)</title><rect width=".023%" height="15" x="22.235%" y="917" fill="#E6B213" fg:w="1" fg:x="965"/></g><g><title>_rjem_je_ecache_alloc (2 samples, 0.05%)</title><rect width=".046%" height="15" x="22.281%" y="741" fill="#D2BE1B" fg:w="2" fg:x="967"/></g><g><title>extent_recycle (2 samples, 0.05%)</title><rect width=".046%" height="15" x="22.281%" y="725" fill="#DE6B1F" fg:w="2" fg:x="967"/></g><g><title>extent_recycle_split (2 samples, 0.05%)</title><rect width=".046%" height="15" x="22.281%" y="709" fill="#D87F22" fg:w="2" fg:x="967"/></g><g><title>extent_split_interior (2 samples, 0.05%)</title><rect width=".046%" height="15" x="22.281%" y="693" fill="#EA7434" fg:w="2" fg:x="967"/></g><g><title>extent_split_impl (2 samples, 0.05%)</title><rect width=".046%" height="15" x="22.281%" y="677" fill="#DE7C0F" fg:w="2" fg:x="967"/></g><g><title>_rjem_je_edata_cache_get (2 samples, 0.05%)</title><rect width=".046%" height="15" x="22.281%" y="661" fill="#E7B31C" fg:w="2" fg:x="967"/></g><g><title>_rjem_je_edata_avail_remove (2 samples, 0.05%)</title><rect width=".046%" height="15" x="22.281%" y="645" fill="#E25D2D" fg:w="2" fg:x="967"/></g><g><title>ph_remove (2 samples, 0.05%)</title><rect width=".046%" height="15" x="22.281%" y="629" fill="#D70833" fg:w="2" fg:x="967"/></g><g><title>ph_merge_children (2 samples, 0.05%)</title><rect width=".046%" height="15" x="22.281%" y="613" fill="#DF6A05" fg:w="2" fg:x="967"/></g><g><title>phn_merge_siblings (2 samples, 0.05%)</title><rect width=".046%" height="15" x="22.281%" y="597" fill="#FABF05" fg:w="2" fg:x="967"/></g><g><title>?? (5 samples, 0.12%)</title><rect width=".115%" height="15" x="22.235%" y="997" fill="#F2842C" fg:w="5" fg:x="965"/></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (5 samples, 0.12%)</title><rect width=".115%" height="15" x="22.235%" y="981" fill="#FB981D" fg:w="5" fg:x="965"/></g><g><title>?? (5 samples, 0.12%)</title><rect width=".115%" height="15" x="22.235%" y="965" fill="#DAB305" fg:w="5" fg:x="965"/></g><g><title>alloc::alloc::alloc (5 samples, 0.12%)</title><rect width=".115%" height="15" x="22.235%" y="949" fill="#E34313" fg:w="5" fg:x="965"/></g><g><title>_rjem_je_malloc_default (4 samples, 0.09%)</title><rect width=".092%" height="15" x="22.258%" y="933" fill="#E9771F" fg:w="4" fg:x="966"/></g><g><title>imalloc (4 samples, 0.09%)</title><rect width=".092%" height="15" x="22.258%" y="917" fill="#F17816" fg:w="4" fg:x="966"/></g><g><title>imalloc_body (4 samples, 0.09%)</title><rect width=".092%" height="15" x="22.258%" y="901" fill="#E0661E" fg:w="4" fg:x="966"/></g><g><title>imalloc_no_sample (4 samples, 0.09%)</title><rect width=".092%" height="15" x="22.258%" y="885" fill="#D2A425" fg:w="4" fg:x="966"/></g><g><title>iallocztm (4 samples, 0.09%)</title><rect width=".092%" height="15" x="22.258%" y="869" fill="#E2BF10" fg:w="4" fg:x="966"/></g><g><title>arena_malloc (4 samples, 0.09%)</title><rect width=".092%" height="15" x="22.258%" y="853" fill="#D6282D" fg:w="4" fg:x="966"/></g><g><title>_rjem_je_large_palloc (4 samples, 0.09%)</title><rect width=".092%" height="15" x="22.258%" y="837" fill="#F41D1A" fg:w="4" fg:x="966"/></g><g><title>_rjem_je_arena_extent_alloc_large (4 samples, 0.09%)</title><rect width=".092%" height="15" x="22.258%" y="821" fill="#D81005" fg:w="4" fg:x="966"/></g><g><title>_rjem_je_pa_alloc (4 samples, 0.09%)</title><rect width=".092%" height="15" x="22.258%" y="805" fill="#F94C23" fg:w="4" fg:x="966"/></g><g><title>pai_alloc (3 samples, 0.07%)</title><rect width=".069%" height="15" x="22.281%" y="789" fill="#CF0B2C" fg:w="3" fg:x="967"/></g><g><title>pac_alloc_impl (3 samples, 0.07%)</title><rect width=".069%" height="15" x="22.281%" y="773" fill="#E4BE31" fg:w="3" fg:x="967"/></g><g><title>pac_alloc_real (3 samples, 0.07%)</title><rect width=".069%" height="15" x="22.281%" y="757" fill="#D6AD0C" fg:w="3" fg:x="967"/></g><g><title>_rjem_je_ecache_alloc_grow (1 samples, 0.02%)</title><rect width=".023%" height="15" x="22.327%" y="741" fill="#DA1A23" fg:w="1" fg:x="969"/></g><g><title>extent_alloc_retained (1 samples, 0.02%)</title><rect width=".023%" height="15" x="22.327%" y="725" fill="#DCC813" fg:w="1" fg:x="969"/></g><g><title>extent_recycle (1 samples, 0.02%)</title><rect width=".023%" height="15" x="22.327%" y="709" fill="#EF5F31" fg:w="1" fg:x="969"/></g><g><title>extent_recycle_extract (1 samples, 0.02%)</title><rect width=".023%" height="15" x="22.327%" y="693" fill="#EB5535" fg:w="1" fg:x="969"/></g><g><title>extent_activate_locked (1 samples, 0.02%)</title><rect width=".023%" height="15" x="22.327%" y="677" fill="#E9851F" fg:w="1" fg:x="969"/></g><g><title>_rjem_je_eset_remove (1 samples, 0.02%)</title><rect width=".023%" height="15" x="22.327%" y="661" fill="#DA1914" fg:w="1" fg:x="969"/></g><g><title>edata_list_inactive_remove (1 samples, 0.02%)</title><rect width=".023%" height="15" x="22.327%" y="645" fill="#FCD226" fg:w="1" fg:x="969"/></g><g><title>_rjem_je_large_malloc (1 samples, 0.02%)</title><rect width=".023%" height="15" x="22.35%" y="837" fill="#F28615" fg:w="1" fg:x="970"/></g><g><title>extent_recycle_extract (1 samples, 0.02%)</title><rect width=".023%" height="15" x="22.373%" y="709" fill="#D51C30" fg:w="1" fg:x="971"/></g><g><title>extent_activate_locked (1 samples, 0.02%)</title><rect width=".023%" height="15" x="22.373%" y="693" fill="#FAC402" fg:w="1" fg:x="971"/></g><g><title>_rjem_je_eset_remove (1 samples, 0.02%)</title><rect width=".023%" height="15" x="22.373%" y="677" fill="#E30511" fg:w="1" fg:x="971"/></g><g><title>_rjem_je_edata_heap_remove (1 samples, 0.02%)</title><rect width=".023%" height="15" x="22.373%" y="661" fill="#DDE218" fg:w="1" fg:x="971"/></g><g><title>ph_remove (1 samples, 0.02%)</title><rect width=".023%" height="15" x="22.373%" y="645" fill="#D30530" fg:w="1" fg:x="971"/></g><g><title>extent_recycle_split (2 samples, 0.05%)</title><rect width=".046%" height="15" x="22.396%" y="709" fill="#DB9606" fg:w="2" fg:x="972"/></g><g><title>extent_split_interior (2 samples, 0.05%)</title><rect width=".046%" height="15" x="22.396%" y="693" fill="#FB2E10" fg:w="2" fg:x="972"/></g><g><title>extent_split_impl (2 samples, 0.05%)</title><rect width=".046%" height="15" x="22.396%" y="677" fill="#DCCC28" fg:w="2" fg:x="972"/></g><g><title>_rjem_je_edata_cache_get (2 samples, 0.05%)</title><rect width=".046%" height="15" x="22.396%" y="661" fill="#D35502" fg:w="2" fg:x="972"/></g><g><title>_rjem_je_edata_avail_remove (2 samples, 0.05%)</title><rect width=".046%" height="15" x="22.396%" y="645" fill="#E51107" fg:w="2" fg:x="972"/></g><g><title>ph_remove (2 samples, 0.05%)</title><rect width=".046%" height="15" x="22.396%" y="629" fill="#EF481C" fg:w="2" fg:x="972"/></g><g><title>ph_merge_children (2 samples, 0.05%)</title><rect width=".046%" height="15" x="22.396%" y="613" fill="#E62F36" fg:w="2" fg:x="972"/></g><g><title>phn_merge_siblings (2 samples, 0.05%)</title><rect width=".046%" height="15" x="22.396%" y="597" fill="#D63208" fg:w="2" fg:x="972"/></g><g><title>phn_merge (1 samples, 0.02%)</title><rect width=".023%" height="15" x="22.419%" y="581" fill="#D8C62B" fg:w="1" fg:x="973"/></g><g><title>phn_merge_ordered (1 samples, 0.02%)</title><rect width=".023%" height="15" x="22.419%" y="565" fill="#EA1423" fg:w="1" fg:x="973"/></g><g><title>phn_prev_set (1 samples, 0.02%)</title><rect width=".023%" height="15" x="22.419%" y="549" fill="#FE2D13" fg:w="1" fg:x="973"/></g><g><title>?? (11 samples, 0.25%)</title><rect width=".254%" height="15" x="22.212%" y="1013" fill="#DB0E2C" fg:w="11" fg:x="964"/></g><g><title>simd_json::Deserializer::from_slice (5 samples, 0.12%)</title><rect width=".115%" height="15" x="22.35%" y="997" fill="#D9DC1A" fg:w="5" fg:x="970"/></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (5 samples, 0.12%)</title><rect width=".115%" height="15" x="22.35%" y="981" fill="#D59E1C" fg:w="5" fg:x="970"/></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (5 samples, 0.12%)</title><rect width=".115%" height="15" x="22.35%" y="965" fill="#FC3334" fg:w="5" fg:x="970"/></g><g><title>alloc::raw_vec::finish_grow (5 samples, 0.12%)</title><rect width=".115%" height="15" x="22.35%" y="949" fill="#F65910" fg:w="5" fg:x="970"/></g><g><title>_rjem_je_malloc_default (5 samples, 0.12%)</title><rect width=".115%" height="15" x="22.35%" y="933" fill="#D89E31" fg:w="5" fg:x="970"/></g><g><title>imalloc (5 samples, 0.12%)</title><rect width=".115%" height="15" x="22.35%" y="917" fill="#EC6B13" fg:w="5" fg:x="970"/></g><g><title>imalloc_body (5 samples, 0.12%)</title><rect width=".115%" height="15" x="22.35%" y="901" fill="#E4B91E" fg:w="5" fg:x="970"/></g><g><title>imalloc_no_sample (5 samples, 0.12%)</title><rect width=".115%" height="15" x="22.35%" y="885" fill="#F68608" fg:w="5" fg:x="970"/></g><g><title>iallocztm (5 samples, 0.12%)</title><rect width=".115%" height="15" x="22.35%" y="869" fill="#D68F32" fg:w="5" fg:x="970"/></g><g><title>arena_malloc (5 samples, 0.12%)</title><rect width=".115%" height="15" x="22.35%" y="853" fill="#E44B08" fg:w="5" fg:x="970"/></g><g><title>_rjem_je_large_palloc (4 samples, 0.09%)</title><rect width=".092%" height="15" x="22.373%" y="837" fill="#CFAF04" fg:w="4" fg:x="971"/></g><g><title>_rjem_je_arena_extent_alloc_large (4 samples, 0.09%)</title><rect width=".092%" height="15" x="22.373%" y="821" fill="#CD6C18" fg:w="4" fg:x="971"/></g><g><title>_rjem_je_pa_alloc (4 samples, 0.09%)</title><rect width=".092%" height="15" x="22.373%" y="805" fill="#F47831" fg:w="4" fg:x="971"/></g><g><title>pai_alloc (4 samples, 0.09%)</title><rect width=".092%" height="15" x="22.373%" y="789" fill="#DF2F26" fg:w="4" fg:x="971"/></g><g><title>pac_alloc_impl (4 samples, 0.09%)</title><rect width=".092%" height="15" x="22.373%" y="773" fill="#E5B30B" fg:w="4" fg:x="971"/></g><g><title>pac_alloc_real (4 samples, 0.09%)</title><rect width=".092%" height="15" x="22.373%" y="757" fill="#E77A01" fg:w="4" fg:x="971"/></g><g><title>_rjem_je_ecache_alloc (4 samples, 0.09%)</title><rect width=".092%" height="15" x="22.373%" y="741" fill="#F57709" fg:w="4" fg:x="971"/></g><g><title>extent_recycle (4 samples, 0.09%)</title><rect width=".092%" height="15" x="22.373%" y="725" fill="#F1A319" fg:w="4" fg:x="971"/></g><g><title>malloc_mutex_lock (1 samples, 0.02%)</title><rect width=".023%" height="15" x="22.442%" y="709" fill="#D9D603" fg:w="1" fg:x="974"/></g><g><title>malloc_mutex_trylock_final (1 samples, 0.02%)</title><rect width=".023%" height="15" x="22.442%" y="693" fill="#F0561C" fg:w="1" fg:x="974"/></g><g><title>__GI___pthread_mutex_trylock (1 samples, 0.02%)</title><rect width=".023%" height="15" x="22.442%" y="677" fill="#D72F09" fg:w="1" fg:x="974"/></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::copy_from (1 samples, 0.02%)</title><rect width=".023%" height="15" x="22.465%" y="1013" fill="#FC192D" fg:w="1" fg:x="975"/></g><g><title>core::intrinsics::copy (1 samples, 0.02%)</title><rect width=".023%" height="15" x="22.465%" y="997" fill="#FBA409" fg:w="1" fg:x="975"/></g><g><title>__memset_avx2_unaligned_erms (1 samples, 0.02%)</title><rect width=".023%" height="15" x="22.465%" y="981" fill="#E9C200" fg:w="1" fg:x="975"/></g><g><title>simd_json::Deserializer::from_slice (19 samples, 0.44%)</title><rect width=".438%" height="15" x="22.488%" y="1013" fill="#F96F18" fg:w="19" fg:x="976"/></g><g><title>simd_json::Stage1Parse::finalize_structurals (32 samples, 0.74%)</title><rect width=".737%" height="15" x="22.926%" y="1013" fill="#FADF03" fg:w="32" fg:x="995"/></g><g><title>core::core_arch::x86::avx2::_mm256_cmpeq_epi8 (2 samples, 0.05%)</title><rect width=".046%" height="15" x="24.148%" y="981" fill="#ECB225" fg:w="2" fg:x="1048"/></g><g><title>core::core_arch::x86::avx2::_mm256_movemask_epi8 (2 samples, 0.05%)</title><rect width=".046%" height="15" x="24.194%" y="981" fill="#F19E32" fg:w="2" fg:x="1050"/></g><g><title>&lt;simd_json::avx2::stage1::SimdInputAVX as simd_json::Stage1Parse&lt;core::core_arch::x86::__m256i&gt;&gt;::cmp_mask_against_input (25 samples, 0.58%)</title><rect width=".576%" height="15" x="23.825%" y="997" fill="#D57929" fg:w="25" fg:x="1034"/></g><g><title>simd_json::Deserializer::from_slice (7 samples, 0.16%)</title><rect width=".161%" height="15" x="24.24%" y="981" fill="#F05C03" fg:w="7" fg:x="1052"/></g><g><title>?? (486 samples, 11.20%)</title><rect width="11.198%" height="15" x="13.71%" y="1029" fill="#CD7B03" fg:w="486" fg:x="595"/><text x="13.96%" y="1039.5">??</text></g><g><title>simd_json::Stage1Parse::find_odd_backslash_sequences (54 samples, 1.24%)</title><rect width="1.244%" height="15" x="23.664%" y="1013" fill="#CD612F" fg:w="54" fg:x="1027"/></g><g><title>core::num::&lt;impl u64&gt;::overflowing_add (22 samples, 0.51%)</title><rect width=".507%" height="15" x="24.401%" y="997" fill="#F7980E" fg:w="22" fg:x="1059"/></g><g><title>?? (626 samples, 14.42%)</title><rect width="14.424%" height="15" x="13.71%" y="1045" fill="#F8C335" fg:w="626" fg:x="595"/><text x="13.96%" y="1055.5">??</text></g><g><title>simd_json::Deserializer::from_slice (140 samples, 3.23%)</title><rect width="3.226%" height="15" x="24.908%" y="1029" fill="#E2C910" fg:w="140" fg:x="1081"/><text x="25.158%" y="1039.5">sim..</text></g><g><title>alloc::alloc::alloc (1 samples, 0.02%)</title><rect width=".023%" height="15" x="28.134%" y="1045" fill="#CD6200" fg:w="1" fg:x="1221"/></g><g><title>__rust_alloc (1 samples, 0.02%)</title><rect width=".023%" height="15" x="28.134%" y="1029" fill="#D6BF30" fg:w="1" fg:x="1221"/></g><g><title>&lt;jemallocator::Jemalloc as core::alloc::global::GlobalAlloc&gt;::alloc (1 samples, 0.02%)</title><rect width=".023%" height="15" x="28.134%" y="1013" fill="#ED7027" fg:w="1" fg:x="1221"/></g><g><title>_rjem_je_malloc_default (1 samples, 0.02%)</title><rect width=".023%" height="15" x="28.134%" y="997" fill="#F7CB1B" fg:w="1" fg:x="1221"/></g><g><title>imalloc (1 samples, 0.02%)</title><rect width=".023%" height="15" x="28.134%" y="981" fill="#EB7C1C" fg:w="1" fg:x="1221"/></g><g><title>imalloc_body (1 samples, 0.02%)</title><rect width=".023%" height="15" x="28.134%" y="965" fill="#D0CF2E" fg:w="1" fg:x="1221"/></g><g><title>aligned_usize_get (1 samples, 0.02%)</title><rect width=".023%" height="15" x="28.134%" y="949" fill="#EAB004" fg:w="1" fg:x="1221"/></g><g><title>sz_size2index (1 samples, 0.02%)</title><rect width=".023%" height="15" x="28.134%" y="933" fill="#E6851C" fg:w="1" fg:x="1221"/></g><g><title>sz_size2index_compute (1 samples, 0.02%)</title><rect width=".023%" height="15" x="28.134%" y="917" fill="#D38928" fg:w="1" fg:x="1221"/></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (2 samples, 0.05%)</title><rect width=".046%" height="15" x="28.157%" y="1045" fill="#FE230D" fg:w="2" fg:x="1222"/></g><g><title>_rjem_je_ecache_dalloc (1 samples, 0.02%)</title><rect width=".023%" height="15" x="28.226%" y="869" fill="#E13133" fg:w="1" fg:x="1225"/></g><g><title>edata_addr_set (1 samples, 0.02%)</title><rect width=".023%" height="15" x="28.226%" y="853" fill="#FB0A0F" fg:w="1" fg:x="1225"/></g><g><title>extent_try_coalesce_large (2 samples, 0.05%)</title><rect width=".046%" height="15" x="28.249%" y="853" fill="#E4CF0F" fg:w="2" fg:x="1226"/></g><g><title>extent_try_coalesce_impl (2 samples, 0.05%)</title><rect width=".046%" height="15" x="28.249%" y="837" fill="#F16313" fg:w="2" fg:x="1226"/></g><g><title>extent_coalesce (2 samples, 0.05%)</title><rect width=".046%" height="15" x="28.249%" y="821" fill="#CF6831" fg:w="2" fg:x="1226"/></g><g><title>extent_merge_impl (2 samples, 0.05%)</title><rect width=".046%" height="15" x="28.249%" y="805" fill="#EA6312" fg:w="2" fg:x="1226"/></g><g><title>ehooks_merge (2 samples, 0.05%)</title><rect width=".046%" height="15" x="28.249%" y="789" fill="#D5BF31" fg:w="2" fg:x="1226"/></g><g><title>_rjem_je_ehooks_default_merge_impl (1 samples, 0.02%)</title><rect width=".023%" height="15" x="28.272%" y="773" fill="#D2E213" fg:w="1" fg:x="1227"/></g><g><title>_rjem_je_extent_dss_mergeable (1 samples, 0.02%)</title><rect width=".023%" height="15" x="28.272%" y="757" fill="#E56112" fg:w="1" fg:x="1227"/></g><g><title>__GI___pthread_mutex_trylock (2 samples, 0.05%)</title><rect width=".046%" height="15" x="28.295%" y="821" fill="#D3A70F" fg:w="2" fg:x="1228"/></g><g><title>_rjem_je_large_dalloc (7 samples, 0.16%)</title><rect width=".161%" height="15" x="28.203%" y="917" fill="#D2A922" fg:w="7" fg:x="1224"/></g><g><title>large_dalloc_finish_impl (6 samples, 0.14%)</title><rect width=".138%" height="15" x="28.226%" y="901" fill="#F1791F" fg:w="6" fg:x="1225"/></g><g><title>pac_dalloc_impl (6 samples, 0.14%)</title><rect width=".138%" height="15" x="28.226%" y="885" fill="#E8280B" fg:w="6" fg:x="1225"/></g><g><title>_rjem_je_extent_record (5 samples, 0.12%)</title><rect width=".115%" height="15" x="28.249%" y="869" fill="#CD561A" fg:w="5" fg:x="1226"/></g><g><title>malloc_mutex_lock (3 samples, 0.07%)</title><rect width=".069%" height="15" x="28.295%" y="853" fill="#E77E1C" fg:w="3" fg:x="1228"/></g><g><title>malloc_mutex_trylock_final (3 samples, 0.07%)</title><rect width=".069%" height="15" x="28.295%" y="837" fill="#DBDD12" fg:w="3" fg:x="1228"/></g><g><title>pthread_mutex_trylock@plt (1 samples, 0.02%)</title><rect width=".023%" height="15" x="28.341%" y="821" fill="#D32800" fg:w="1" fg:x="1230"/></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;(simd_json::stage2::StackState,usize,usize)&gt;&gt; (8 samples, 0.18%)</title><rect width=".184%" height="15" x="28.203%" y="1045" fill="#EF552B" fg:w="8" fg:x="1224"/></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;(simd_json::stage2::StackState,usize,usize)&gt;&gt; (8 samples, 0.18%)</title><rect width=".184%" height="15" x="28.203%" y="1029" fill="#E73715" fg:w="8" fg:x="1224"/></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (8 samples, 0.18%)</title><rect width=".184%" height="15" x="28.203%" y="1013" fill="#E1B82B" fg:w="8" fg:x="1224"/></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (8 samples, 0.18%)</title><rect width=".184%" height="15" x="28.203%" y="997" fill="#FB9E29" fg:w="8" fg:x="1224"/></g><g><title>alloc::alloc::dealloc (8 samples, 0.18%)</title><rect width=".184%" height="15" x="28.203%" y="981" fill="#EA9F25" fg:w="8" fg:x="1224"/></g><g><title>__rust_dealloc (8 samples, 0.18%)</title><rect width=".184%" height="15" x="28.203%" y="965" fill="#D8CC16" fg:w="8" fg:x="1224"/></g><g><title>&lt;jemallocator::Jemalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (8 samples, 0.18%)</title><rect width=".184%" height="15" x="28.203%" y="949" fill="#D61103" fg:w="8" fg:x="1224"/></g><g><title>_rjem_je_sdallocx_default (8 samples, 0.18%)</title><rect width=".184%" height="15" x="28.203%" y="933" fill="#D46F11" fg:w="8" fg:x="1224"/></g><g><title>isfree (1 samples, 0.02%)</title><rect width=".023%" height="15" x="28.364%" y="917" fill="#DD9D18" fg:w="1" fg:x="1231"/></g><g><title>isdalloct (1 samples, 0.02%)</title><rect width=".023%" height="15" x="28.364%" y="901" fill="#FC100D" fg:w="1" fg:x="1231"/></g><g><title>arena_sdalloc (1 samples, 0.02%)</title><rect width=".023%" height="15" x="28.364%" y="885" fill="#DD3E02" fg:w="1" fg:x="1231"/></g><g><title>arena_dalloc_large (1 samples, 0.02%)</title><rect width=".023%" height="15" x="28.364%" y="869" fill="#F75716" fg:w="1" fg:x="1231"/></g><g><title>emap_edata_lookup (1 samples, 0.02%)</title><rect width=".023%" height="15" x="28.364%" y="853" fill="#D74909" fg:w="1" fg:x="1231"/></g><g><title>rtree_read (1 samples, 0.02%)</title><rect width=".023%" height="15" x="28.364%" y="837" fill="#CFAF21" fg:w="1" fg:x="1231"/></g><g><title>rtree_leaf_elm_lookup (1 samples, 0.02%)</title><rect width=".023%" height="15" x="28.364%" y="821" fill="#F38136" fg:w="1" fg:x="1231"/></g><g><title>rtree_cache_direct_map (1 samples, 0.02%)</title><rect width=".023%" height="15" x="28.364%" y="805" fill="#E3772D" fg:w="1" fg:x="1231"/></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (16 samples, 0.37%)</title><rect width=".369%" height="15" x="28.387%" y="1045" fill="#CD6D24" fg:w="16" fg:x="1232"/></g><g><title>core::ptr::write (115 samples, 2.65%)</title><rect width="2.65%" height="15" x="28.756%" y="1029" fill="#CD0627" fg:w="115" fg:x="1248"/><text x="29.006%" y="1039.5">co..</text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (120 samples, 2.76%)</title><rect width="2.765%" height="15" x="28.756%" y="1045" fill="#DD2010" fg:w="120" fg:x="1248"/><text x="29.006%" y="1055.5">co..</text></g><g><title>simd_json::Deserializer::from_slice (5 samples, 0.12%)</title><rect width=".115%" height="15" x="31.405%" y="1029" fill="#E49032" fg:w="5" fg:x="1363"/></g><g><title>?? (779 samples, 17.95%)</title><rect width="17.949%" height="15" x="13.71%" y="1061" fill="#E5C935" fg:w="779" fg:x="595"/><text x="13.96%" y="1071.5">??</text></g><g><title>simd_json::Deserializer::from_slice (6 samples, 0.14%)</title><rect width=".138%" height="15" x="31.521%" y="1045" fill="#F9991B" fg:w="6" fg:x="1368"/></g><g><title>core::intrinsics::copy_nonoverlapping (331 samples, 7.63%)</title><rect width="7.627%" height="15" x="31.659%" y="1061" fill="#E36A19" fg:w="331" fg:x="1374"/><text x="31.909%" y="1071.5">core::intr..</text></g><g><title>__memmove_avx_unaligned_erms (331 samples, 7.63%)</title><rect width="7.627%" height="15" x="31.659%" y="1045" fill="#E6411D" fg:w="331" fg:x="1374"/><text x="31.909%" y="1055.5">__memmove_..</text></g><g><title>simd_json::Deserializer::parse_str_ (26 samples, 0.60%)</title><rect width=".599%" height="15" x="49.816%" y="1029" fill="#DD392E" fg:w="26" fg:x="2162"/></g><g><title>core::core_arch::x86::avx2::_mm256_cmpeq_epi8 (36 samples, 0.83%)</title><rect width=".83%" height="15" x="50.53%" y="1013" fill="#E5A111" fg:w="36" fg:x="2193"/></g><g><title>core::core_arch::x86::avx2::_mm256_movemask_epi8 (23 samples, 0.53%)</title><rect width=".53%" height="15" x="51.359%" y="1013" fill="#DED50B" fg:w="23" fg:x="2229"/></g><g><title>core::core_arch::x86::avx::_mm256_loadu_si256 (4 samples, 0.09%)</title><rect width=".092%" height="15" x="51.889%" y="1013" fill="#EB230D" fg:w="4" fg:x="2252"/></g><g><title>core::intrinsics::copy_nonoverlapping (4 samples, 0.09%)</title><rect width=".092%" height="15" x="51.889%" y="997" fill="#E99E22" fg:w="4" fg:x="2252"/></g><g><title>core::num::&lt;impl u32&gt;::wrapping_sub (4 samples, 0.09%)</title><rect width=".092%" height="15" x="51.982%" y="1013" fill="#D79730" fg:w="4" fg:x="2256"/></g><g><title>simd_json::Deserializer::parse_str_ (178 samples, 4.10%)</title><rect width="4.101%" height="15" x="48.226%" y="1045" fill="#E5540E" fg:w="178" fg:x="2093"/><text x="48.476%" y="1055.5">simd..</text></g><g><title>simd_json::avx2::deser::parse_str_avx (83 samples, 1.91%)</title><rect width="1.912%" height="15" x="50.415%" y="1029" fill="#E5440E" fg:w="83" fg:x="2188"/><text x="50.665%" y="1039.5">s..</text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (11 samples, 0.25%)</title><rect width=".254%" height="15" x="52.074%" y="1013" fill="#F36A1A" fg:w="11" fg:x="2260"/></g><g><title>core::convert::num::&lt;impl core::convert::From&lt;u8&gt; for u64&gt;::from (32 samples, 0.74%)</title><rect width=".737%" height="15" x="54.585%" y="1029" fill="#CE2D26" fg:w="32" fg:x="2369"/></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (2 samples, 0.05%)</title><rect width=".046%" height="15" x="55.323%" y="1029" fill="#E2060F" fg:w="2" fg:x="2401"/></g><g><title>core::num::&lt;impl u64&gt;::wrapping_mul (8 samples, 0.18%)</title><rect width=".184%" height="15" x="55.369%" y="1029" fill="#E81636" fg:w="8" fg:x="2403"/></g><g><title>?? (1,857 samples, 42.79%)</title><rect width="42.788%" height="15" x="13.71%" y="1077" fill="#E5DE20" fg:w="1857" fg:x="595"/><text x="13.96%" y="1087.5">??</text></g><g><title>simd_json::Deserializer::from_slice (747 samples, 17.21%)</title><rect width="17.212%" height="15" x="39.286%" y="1061" fill="#E43E1D" fg:w="747" fg:x="1705"/><text x="39.536%" y="1071.5">simd_json::Deserializer::fr..</text></g><g><title>simd_json::numberparse::correct::&lt;impl simd_json::Deserializer&gt;::parse_number (181 samples, 4.17%)</title><rect width="4.17%" height="15" x="52.327%" y="1045" fill="#FB6722" fg:w="181" fg:x="2271"/><text x="52.577%" y="1055.5">simd_..</text></g><g><title>simd_json::numberparse::is_integer (41 samples, 0.94%)</title><rect width=".945%" height="15" x="55.553%" y="1029" fill="#E90C1E" fg:w="41" fg:x="2411"/></g><g><title>core::num::&lt;impl u8&gt;::is_ascii_digit (41 samples, 0.94%)</title><rect width=".945%" height="15" x="55.553%" y="1013" fill="#EE3400" fg:w="41" fg:x="2411"/></g><g><title>_rjem_je_large_dalloc (1 samples, 0.02%)</title><rect width=".023%" height="15" x="56.498%" y="933" fill="#DF6205" fg:w="1" fg:x="2452"/></g><g><title>arena_get_from_edata (1 samples, 0.02%)</title><rect width=".023%" height="15" x="56.498%" y="917" fill="#E44B25" fg:w="1" fg:x="2452"/></g><g><title>edata_arena_ind_get (1 samples, 0.02%)</title><rect width=".023%" height="15" x="56.498%" y="901" fill="#CD7331" fg:w="1" fg:x="2452"/></g><g><title>core::ptr::drop_in_place&lt;simd_json::Buffers&gt; (2 samples, 0.05%)</title><rect width=".046%" height="15" x="56.498%" y="1077" fill="#FA9A2B" fg:w="2" fg:x="2452"/></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (2 samples, 0.05%)</title><rect width=".046%" height="15" x="56.498%" y="1061" fill="#E22B1D" fg:w="2" fg:x="2452"/></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (2 samples, 0.05%)</title><rect width=".046%" height="15" x="56.498%" y="1045" fill="#F9E427" fg:w="2" fg:x="2452"/></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.05%)</title><rect width=".046%" height="15" x="56.498%" y="1029" fill="#D84F2B" fg:w="2" fg:x="2452"/></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (2 samples, 0.05%)</title><rect width=".046%" height="15" x="56.498%" y="1013" fill="#E45F0C" fg:w="2" fg:x="2452"/></g><g><title>alloc::alloc::dealloc (2 samples, 0.05%)</title><rect width=".046%" height="15" x="56.498%" y="997" fill="#F9DD0F" fg:w="2" fg:x="2452"/></g><g><title>__rust_dealloc (2 samples, 0.05%)</title><rect width=".046%" height="15" x="56.498%" y="981" fill="#E9220D" fg:w="2" fg:x="2452"/></g><g><title>&lt;jemallocator::Jemalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (2 samples, 0.05%)</title><rect width=".046%" height="15" x="56.498%" y="965" fill="#D66727" fg:w="2" fg:x="2452"/></g><g><title>_rjem_je_sdallocx_default (2 samples, 0.05%)</title><rect width=".046%" height="15" x="56.498%" y="949" fill="#FB7E27" fg:w="2" fg:x="2452"/></g><g><title>_rjem_je_te_event_trigger (1 samples, 0.02%)</title><rect width=".023%" height="15" x="56.521%" y="933" fill="#D6D824" fg:w="1" fg:x="2453"/></g><g><title>tcache_event (1 samples, 0.02%)</title><rect width=".023%" height="15" x="56.521%" y="917" fill="#DCDD08" fg:w="1" fg:x="2453"/></g><g><title>tcache_gc_small (1 samples, 0.02%)</title><rect width=".023%" height="15" x="56.521%" y="901" fill="#F0D803" fg:w="1" fg:x="2453"/></g><g><title>_rjem_je_tcache_bin_flush_small (1 samples, 0.02%)</title><rect width=".023%" height="15" x="56.521%" y="885" fill="#E8DA11" fg:w="1" fg:x="2453"/></g><g><title>tcache_bin_flush_bottom (1 samples, 0.02%)</title><rect width=".023%" height="15" x="56.521%" y="869" fill="#E5A32D" fg:w="1" fg:x="2453"/></g><g><title>tcache_bin_flush_impl (1 samples, 0.02%)</title><rect width=".023%" height="15" x="56.521%" y="853" fill="#E76E2A" fg:w="1" fg:x="2453"/></g><g><title>tcache_bin_flush_edatas_lookup (1 samples, 0.02%)</title><rect width=".023%" height="15" x="56.521%" y="837" fill="#D0AA30" fg:w="1" fg:x="2453"/></g><g><title>emap_edata_lookup_batch (1 samples, 0.02%)</title><rect width=".023%" height="15" x="56.521%" y="821" fill="#EF7419" fg:w="1" fg:x="2453"/></g><g><title>rtree_leaf_elm_lookup (1 samples, 0.02%)</title><rect width=".023%" height="15" x="56.521%" y="805" fill="#DBC832" fg:w="1" fg:x="2453"/></g><g><title>rtree_cache_direct_map (1 samples, 0.02%)</title><rect width=".023%" height="15" x="56.521%" y="789" fill="#F5C800" fg:w="1" fg:x="2453"/></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (2,384 samples, 54.93%)</title><rect width="54.931%" height="15" x="1.82%" y="1269" fill="#F57721" fg:w="2384" fg:x="79"/><text x="2.07%" y="1279.5">&lt;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (2,384 samples, 54.93%)</title><rect width="54.931%" height="15" x="1.82%" y="1253" fill="#E77D0C" fg:w="2384" fg:x="79"/><text x="2.07%" y="1263.5">&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend</text></g><g><title>?? (2,384 samples, 54.93%)</title><rect width="54.931%" height="15" x="1.82%" y="1237" fill="#D86029" fg:w="2384" fg:x="79"/><text x="2.07%" y="1247.5">??</text></g><g><title>core::iter::traits::iterator::Iterator::for_each (2,384 samples, 54.93%)</title><rect width="54.931%" height="15" x="1.82%" y="1221" fill="#F82B2D" fg:w="2384" fg:x="79"/><text x="2.07%" y="1231.5">core::iter::traits::iterator::Iterator::for_each</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2,384 samples, 54.93%)</title><rect width="54.931%" height="15" x="1.82%" y="1205" fill="#D9DE07" fg:w="2384" fg:x="79"/><text x="2.07%" y="1215.5">&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold</text></g><g><title>core::iter::traits::iterator::Iterator::fold (2,384 samples, 54.93%)</title><rect width="54.931%" height="15" x="1.82%" y="1189" fill="#E91C06" fg:w="2384" fg:x="79"/><text x="2.07%" y="1199.5">core::iter::traits::iterator::Iterator::fold</text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (2,384 samples, 54.93%)</title><rect width="54.931%" height="15" x="1.82%" y="1173" fill="#E7DA0F" fg:w="2384" fg:x="79"/><text x="2.07%" y="1183.5">core::iter::adapters::map::map_fold::_{{closure}}</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (2,384 samples, 54.93%)</title><rect width="54.931%" height="15" x="1.82%" y="1157" fill="#E2AB30" fg:w="2384" fg:x="79"/><text x="2.07%" y="1167.5">core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut</text></g><g><title>deserialize_struct::bench_citm_catalog_CitmCatalog::_{{closure}}::_{{closure}} (2,384 samples, 54.93%)</title><rect width="54.931%" height="15" x="1.82%" y="1141" fill="#EBC909" fg:w="2384" fg:x="79"/><text x="2.07%" y="1151.5">deserialize_struct::bench_citm_catalog_CitmCatalog::_{{closure}}::_{{closure}}</text></g><g><title>deserialize_struct::simd_json_parse_struct (2,380 samples, 54.84%)</title><rect width="54.839%" height="15" x="1.912%" y="1125" fill="#D9500F" fg:w="2380" fg:x="83"/><text x="2.162%" y="1135.5">deserialize_struct::simd_json_parse_struct</text></g><g><title>simd_json::serde::from_slice (2,380 samples, 54.84%)</title><rect width="54.839%" height="15" x="1.912%" y="1109" fill="#DB9808" fg:w="2380" fg:x="83"/><text x="2.162%" y="1119.5">simd_json::serde::from_slice</text></g><g><title>simd_json::Deserializer::from_slice (1,868 samples, 43.04%)</title><rect width="43.041%" height="15" x="13.71%" y="1093" fill="#F36B26" fg:w="1868" fg:x="595"/><text x="13.96%" y="1103.5">simd_json::Deserializer::from_slice</text></g><g><title>simd_json::Deserializer::from_slice (9 samples, 0.21%)</title><rect width=".207%" height="15" x="56.544%" y="1077" fill="#E71105" fg:w="9" fg:x="2454"/></g><g><title>aligned_usize_get (1 samples, 0.02%)</title><rect width=".023%" height="15" x="56.751%" y="837" fill="#D11936" fg:w="1" fg:x="2463"/></g><g><title>sz_size2index (1 samples, 0.02%)</title><rect width=".023%" height="15" x="56.751%" y="821" fill="#DB0002" fg:w="1" fg:x="2463"/></g><g><title>sz_size2index_compute (1 samples, 0.02%)</title><rect width=".023%" height="15" x="56.751%" y="805" fill="#F60905" fg:w="1" fg:x="2463"/></g><g><title>_rjem_je_arena_malloc_hard (1 samples, 0.02%)</title><rect width=".023%" height="15" x="56.774%" y="789" fill="#E29F04" fg:w="1" fg:x="2464"/></g><g><title>_rjem_je_arena_get_ehooks (1 samples, 0.02%)</title><rect width=".023%" height="15" x="56.797%" y="757" fill="#DBAF22" fg:w="1" fg:x="2465"/></g><g><title>_rjem_je_base_ehooks_get (1 samples, 0.02%)</title><rect width=".023%" height="15" x="56.797%" y="741" fill="#EC0A2E" fg:w="1" fg:x="2465"/></g><g><title>_rjem_je_ecache_alloc (1 samples, 0.02%)</title><rect width=".023%" height="15" x="56.843%" y="693" fill="#F0D310" fg:w="1" fg:x="2467"/></g><g><title>extent_recycle (1 samples, 0.02%)</title><rect width=".023%" height="15" x="56.843%" y="677" fill="#CD032B" fg:w="1" fg:x="2467"/></g><g><title>malloc_mutex_lock (1 samples, 0.02%)</title><rect width=".023%" height="15" x="56.843%" y="661" fill="#F50716" fg:w="1" fg:x="2467"/></g><g><title>malloc_mutex_trylock_final (1 samples, 0.02%)</title><rect width=".023%" height="15" x="56.843%" y="645" fill="#EF8420" fg:w="1" fg:x="2467"/></g><g><title>__GI___pthread_mutex_trylock (1 samples, 0.02%)</title><rect width=".023%" height="15" x="56.843%" y="629" fill="#E4CA22" fg:w="1" fg:x="2467"/></g><g><title>_rjem_je_edata_avail_first (1 samples, 0.02%)</title><rect width=".023%" height="15" x="56.866%" y="581" fill="#FEC816" fg:w="1" fg:x="2468"/></g><g><title>ph_first (1 samples, 0.02%)</title><rect width=".023%" height="15" x="56.866%" y="565" fill="#DB0A27" fg:w="1" fg:x="2468"/></g><g><title>ph_merge_aux (1 samples, 0.02%)</title><rect width=".023%" height="15" x="56.866%" y="549" fill="#E2D227" fg:w="1" fg:x="2468"/></g><g><title>imalloc_no_sample (6 samples, 0.14%)</title><rect width=".138%" height="15" x="56.774%" y="837" fill="#D0DB10" fg:w="6" fg:x="2464"/></g><g><title>iallocztm (6 samples, 0.14%)</title><rect width=".138%" height="15" x="56.774%" y="821" fill="#D89E33" fg:w="6" fg:x="2464"/></g><g><title>arena_malloc (6 samples, 0.14%)</title><rect width=".138%" height="15" x="56.774%" y="805" fill="#E90E2C" fg:w="6" fg:x="2464"/></g><g><title>_rjem_je_large_palloc (5 samples, 0.12%)</title><rect width=".115%" height="15" x="56.797%" y="789" fill="#ED6127" fg:w="5" fg:x="2465"/></g><g><title>_rjem_je_arena_extent_alloc_large (5 samples, 0.12%)</title><rect width=".115%" height="15" x="56.797%" y="773" fill="#DAC62B" fg:w="5" fg:x="2465"/></g><g><title>_rjem_je_pa_alloc (4 samples, 0.09%)</title><rect width=".092%" height="15" x="56.82%" y="757" fill="#E76814" fg:w="4" fg:x="2466"/></g><g><title>pai_alloc (4 samples, 0.09%)</title><rect width=".092%" height="15" x="56.82%" y="741" fill="#FE240D" fg:w="4" fg:x="2466"/></g><g><title>pac_alloc_impl (4 samples, 0.09%)</title><rect width=".092%" height="15" x="56.82%" y="725" fill="#F80E32" fg:w="4" fg:x="2466"/></g><g><title>pac_alloc_real (3 samples, 0.07%)</title><rect width=".069%" height="15" x="56.843%" y="709" fill="#D96B1D" fg:w="3" fg:x="2467"/></g><g><title>_rjem_je_ecache_alloc_grow (2 samples, 0.05%)</title><rect width=".046%" height="15" x="56.866%" y="693" fill="#FBA921" fg:w="2" fg:x="2468"/></g><g><title>extent_alloc_retained (2 samples, 0.05%)</title><rect width=".046%" height="15" x="56.866%" y="677" fill="#D96C20" fg:w="2" fg:x="2468"/></g><g><title>extent_recycle (2 samples, 0.05%)</title><rect width=".046%" height="15" x="56.866%" y="661" fill="#DB422A" fg:w="2" fg:x="2468"/></g><g><title>extent_recycle_split (2 samples, 0.05%)</title><rect width=".046%" height="15" x="56.866%" y="645" fill="#CEB407" fg:w="2" fg:x="2468"/></g><g><title>extent_split_interior (2 samples, 0.05%)</title><rect width=".046%" height="15" x="56.866%" y="629" fill="#D0E21F" fg:w="2" fg:x="2468"/></g><g><title>extent_split_impl (2 samples, 0.05%)</title><rect width=".046%" height="15" x="56.866%" y="613" fill="#DA1A31" fg:w="2" fg:x="2468"/></g><g><title>_rjem_je_edata_cache_get (2 samples, 0.05%)</title><rect width=".046%" height="15" x="56.866%" y="597" fill="#E9C530" fg:w="2" fg:x="2468"/></g><g><title>_rjem_je_edata_avail_remove (1 samples, 0.02%)</title><rect width=".023%" height="15" x="56.889%" y="581" fill="#FCB533" fg:w="1" fg:x="2469"/></g><g><title>ph_remove (1 samples, 0.02%)</title><rect width=".023%" height="15" x="56.889%" y="565" fill="#FD5A13" fg:w="1" fg:x="2469"/></g><g><title>ph_merge_children (1 samples, 0.02%)</title><rect width=".023%" height="15" x="56.889%" y="549" fill="#D7AB1E" fg:w="1" fg:x="2469"/></g><g><title>phn_merge_siblings (1 samples, 0.02%)</title><rect width=".023%" height="15" x="56.889%" y="533" fill="#D6DE09" fg:w="1" fg:x="2469"/></g><g><title>?? (9 samples, 0.21%)</title><rect width=".207%" height="15" x="56.751%" y="1013" fill="#DF0316" fg:w="9" fg:x="2463"/></g><g><title>?? (9 samples, 0.21%)</title><rect width=".207%" height="15" x="56.751%" y="997" fill="#E1C42E" fg:w="9" fg:x="2463"/></g><g><title>?? (9 samples, 0.21%)</title><rect width=".207%" height="15" x="56.751%" y="981" fill="#D16E25" fg:w="9" fg:x="2463"/></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (9 samples, 0.21%)</title><rect width=".207%" height="15" x="56.751%" y="965" fill="#F9590C" fg:w="9" fg:x="2463"/></g><g><title>?? (9 samples, 0.21%)</title><rect width=".207%" height="15" x="56.751%" y="949" fill="#E21B21" fg:w="9" fg:x="2463"/></g><g><title>alloc::alloc::alloc (9 samples, 0.21%)</title><rect width=".207%" height="15" x="56.751%" y="933" fill="#D55216" fg:w="9" fg:x="2463"/></g><g><title>__rust_alloc (9 samples, 0.21%)</title><rect width=".207%" height="15" x="56.751%" y="917" fill="#F88C00" fg:w="9" fg:x="2463"/></g><g><title>&lt;jemallocator::Jemalloc as core::alloc::global::GlobalAlloc&gt;::alloc (9 samples, 0.21%)</title><rect width=".207%" height="15" x="56.751%" y="901" fill="#E46A03" fg:w="9" fg:x="2463"/></g><g><title>_rjem_je_malloc_default (9 samples, 0.21%)</title><rect width=".207%" height="15" x="56.751%" y="885" fill="#D11725" fg:w="9" fg:x="2463"/></g><g><title>imalloc (9 samples, 0.21%)</title><rect width=".207%" height="15" x="56.751%" y="869" fill="#F15D32" fg:w="9" fg:x="2463"/></g><g><title>imalloc_body (9 samples, 0.21%)</title><rect width=".207%" height="15" x="56.751%" y="853" fill="#FD2E2B" fg:w="9" fg:x="2463"/></g><g><title>thread_alloc_event (2 samples, 0.05%)</title><rect width=".046%" height="15" x="56.912%" y="837" fill="#E2CE2B" fg:w="2" fg:x="2470"/></g><g><title>te_event_advance (2 samples, 0.05%)</title><rect width=".046%" height="15" x="56.912%" y="821" fill="#D93607" fg:w="2" fg:x="2470"/></g><g><title>_rjem_je_te_event_trigger (2 samples, 0.05%)</title><rect width=".046%" height="15" x="56.912%" y="805" fill="#DF0534" fg:w="2" fg:x="2470"/></g><g><title>tcache_event (2 samples, 0.05%)</title><rect width=".046%" height="15" x="56.912%" y="789" fill="#CE342E" fg:w="2" fg:x="2470"/></g><g><title>tcache_gc_small (1 samples, 0.02%)</title><rect width=".023%" height="15" x="56.935%" y="773" fill="#FD880B" fg:w="1" fg:x="2471"/></g><g><title>_rjem_je_tcache_bin_flush_small (1 samples, 0.02%)</title><rect width=".023%" height="15" x="56.935%" y="757" fill="#D06A21" fg:w="1" fg:x="2471"/></g><g><title>tcache_bin_flush_bottom (1 samples, 0.02%)</title><rect width=".023%" height="15" x="56.935%" y="741" fill="#CE3604" fg:w="1" fg:x="2471"/></g><g><title>tcache_bin_flush_impl (1 samples, 0.02%)</title><rect width=".023%" height="15" x="56.935%" y="725" fill="#D5030F" fg:w="1" fg:x="2471"/></g><g><title>tcache_bin_flush_edatas_lookup (1 samples, 0.02%)</title><rect width=".023%" height="15" x="56.935%" y="709" fill="#FCD327" fg:w="1" fg:x="2471"/></g><g><title>emap_edata_lookup_batch (1 samples, 0.02%)</title><rect width=".023%" height="15" x="56.935%" y="693" fill="#DF0624" fg:w="1" fg:x="2471"/></g><g><title>rtree_leaf_elm_read (1 samples, 0.02%)</title><rect width=".023%" height="15" x="56.935%" y="677" fill="#FCA92D" fg:w="1" fg:x="2471"/></g><g><title>rtree_leaf_elm_bits_decode (1 samples, 0.02%)</title><rect width=".023%" height="15" x="56.935%" y="661" fill="#D4301A" fg:w="1" fg:x="2471"/></g><g><title>core::iter::traits::iterator::Iterator::collect (251 samples, 5.78%)</title><rect width="5.783%" height="15" x="56.751%" y="1269" fill="#FB6630" fg:w="251" fg:x="2463"/><text x="57.001%" y="1279.5">core::i..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (251 samples, 5.78%)</title><rect width="5.783%" height="15" x="56.751%" y="1253" fill="#F3D010" fg:w="251" fg:x="2463"/><text x="57.001%" y="1263.5">&lt;alloc:..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (251 samples, 5.78%)</title><rect width="5.783%" height="15" x="56.751%" y="1237" fill="#DB6018" fg:w="251" fg:x="2463"/><text x="57.001%" y="1247.5">&lt;alloc:..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (251 samples, 5.78%)</title><rect width="5.783%" height="15" x="56.751%" y="1221" fill="#DB211D" fg:w="251" fg:x="2463"/><text x="57.001%" y="1231.5">&lt;alloc:..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (251 samples, 5.78%)</title><rect width="5.783%" height="15" x="56.751%" y="1205" fill="#DFB005" fg:w="251" fg:x="2463"/><text x="57.001%" y="1215.5">&lt;alloc:..</text></g><g><title>?? (251 samples, 5.78%)</title><rect width="5.783%" height="15" x="56.751%" y="1189" fill="#E48C0E" fg:w="251" fg:x="2463"/><text x="57.001%" y="1199.5">??</text></g><g><title>core::iter::traits::iterator::Iterator::for_each (251 samples, 5.78%)</title><rect width="5.783%" height="15" x="56.751%" y="1173" fill="#D9B31F" fg:w="251" fg:x="2463"/><text x="57.001%" y="1183.5">core::i..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (251 samples, 5.78%)</title><rect width="5.783%" height="15" x="56.751%" y="1157" fill="#E6091E" fg:w="251" fg:x="2463"/><text x="57.001%" y="1167.5">&lt;core::..</text></g><g><title>core::iter::traits::iterator::Iterator::fold (251 samples, 5.78%)</title><rect width="5.783%" height="15" x="56.751%" y="1141" fill="#E68814" fg:w="251" fg:x="2463"/><text x="57.001%" y="1151.5">core::i..</text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (251 samples, 5.78%)</title><rect width="5.783%" height="15" x="56.751%" y="1125" fill="#D7D216" fg:w="251" fg:x="2463"/><text x="57.001%" y="1135.5">core::i..</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter_batched::_{{closure}} (251 samples, 5.78%)</title><rect width="5.783%" height="15" x="56.751%" y="1109" fill="#DA2B05" fg:w="251" fg:x="2463"/><text x="57.001%" y="1119.5">criteri..</text></g><g><title>deserialize_struct::bench_citm_catalog_CitmCatalog::_{{closure}}::_{{closure}} (251 samples, 5.78%)</title><rect width="5.783%" height="15" x="56.751%" y="1093" fill="#D80B05" fg:w="251" fg:x="2463"/><text x="57.001%" y="1103.5">deseria..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (251 samples, 5.78%)</title><rect width="5.783%" height="15" x="56.751%" y="1077" fill="#D1521D" fg:w="251" fg:x="2463"/><text x="57.001%" y="1087.5">&lt;alloc:..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (251 samples, 5.78%)</title><rect width="5.783%" height="15" x="56.751%" y="1061" fill="#F4730C" fg:w="251" fg:x="2463"/><text x="57.001%" y="1071.5">alloc::..</text></g><g><title>alloc::slice::hack::to_vec (251 samples, 5.78%)</title><rect width="5.783%" height="15" x="56.751%" y="1045" fill="#DE5212" fg:w="251" fg:x="2463"/><text x="57.001%" y="1055.5">alloc::..</text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (251 samples, 5.78%)</title><rect width="5.783%" height="15" x="56.751%" y="1029" fill="#F9E308" fg:w="251" fg:x="2463"/><text x="57.001%" y="1039.5">&lt;T as a..</text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (242 samples, 5.58%)</title><rect width="5.576%" height="15" x="56.959%" y="1013" fill="#FD8D2D" fg:w="242" fg:x="2472"/><text x="57.209%" y="1023.5">core::p..</text></g><g><title>core::intrinsics::copy_nonoverlapping (242 samples, 5.58%)</title><rect width="5.576%" height="15" x="56.959%" y="997" fill="#EAB804" fg:w="242" fg:x="2472"/><text x="57.209%" y="1007.5">core::i..</text></g><g><title>__memmove_avx_unaligned_erms (242 samples, 5.58%)</title><rect width="5.576%" height="15" x="56.959%" y="981" fill="#DAC217" fg:w="242" fg:x="2472"/><text x="57.209%" y="991.5">__memmo..</text></g><g><title>?? (2 samples, 0.05%)</title><rect width=".046%" height="15" x="62.558%" y="1109" fill="#EB4229" fg:w="2" fg:x="2715"/></g><g><title>?? (2 samples, 0.05%)</title><rect width=".046%" height="15" x="62.558%" y="1093" fill="#F5D901" fg:w="2" fg:x="2715"/></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (2 samples, 0.05%)</title><rect width=".046%" height="15" x="62.558%" y="1077" fill="#E55B01" fg:w="2" fg:x="2715"/></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (2 samples, 0.05%)</title><rect width=".046%" height="15" x="62.558%" y="1061" fill="#CF651E" fg:w="2" fg:x="2715"/></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (2 samples, 0.05%)</title><rect width=".046%" height="15" x="62.558%" y="1045" fill="#DF5231" fg:w="2" fg:x="2715"/></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.05%)</title><rect width=".046%" height="15" x="62.558%" y="1029" fill="#DAA711" fg:w="2" fg:x="2715"/></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (2 samples, 0.05%)</title><rect width=".046%" height="15" x="62.558%" y="1013" fill="#D0670E" fg:w="2" fg:x="2715"/></g><g><title>alloc::alloc::dealloc (2 samples, 0.05%)</title><rect width=".046%" height="15" x="62.558%" y="997" fill="#EE1408" fg:w="2" fg:x="2715"/></g><g><title>__rust_dealloc (2 samples, 0.05%)</title><rect width=".046%" height="15" x="62.558%" y="981" fill="#DA5036" fg:w="2" fg:x="2715"/></g><g><title>&lt;jemallocator::Jemalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (2 samples, 0.05%)</title><rect width=".046%" height="15" x="62.558%" y="965" fill="#F09011" fg:w="2" fg:x="2715"/></g><g><title>_rjem_je_sdallocx_default (2 samples, 0.05%)</title><rect width=".046%" height="15" x="62.558%" y="949" fill="#F51B32" fg:w="2" fg:x="2715"/></g><g><title>_rjem_je_tcache_bin_flush_small (2 samples, 0.05%)</title><rect width=".046%" height="15" x="62.558%" y="933" fill="#FB3307" fg:w="2" fg:x="2715"/></g><g><title>tcache_bin_flush_bottom (2 samples, 0.05%)</title><rect width=".046%" height="15" x="62.558%" y="917" fill="#F5D91D" fg:w="2" fg:x="2715"/></g><g><title>tcache_bin_flush_impl (2 samples, 0.05%)</title><rect width=".046%" height="15" x="62.558%" y="901" fill="#DDB01D" fg:w="2" fg:x="2715"/></g><g><title>tcache_bin_flush_match (2 samples, 0.05%)</title><rect width=".046%" height="15" x="62.558%" y="885" fill="#D4B418" fg:w="2" fg:x="2715"/></g><g><title>?? (1 samples, 0.02%)</title><rect width=".023%" height="15" x="62.627%" y="1013" fill="#FE1802" fg:w="1" fg:x="2718"/></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.02%)</title><rect width=".023%" height="15" x="62.627%" y="997" fill="#E66402" fg:w="1" fg:x="2718"/></g><g><title>alloc::alloc::dealloc (1 samples, 0.02%)</title><rect width=".023%" height="15" x="62.627%" y="981" fill="#DB8E19" fg:w="1" fg:x="2718"/></g><g><title>__rust_dealloc (1 samples, 0.02%)</title><rect width=".023%" height="15" x="62.627%" y="965" fill="#F0492B" fg:w="1" fg:x="2718"/></g><g><title>&lt;jemallocator::Jemalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (1 samples, 0.02%)</title><rect width=".023%" height="15" x="62.627%" y="949" fill="#D6720F" fg:w="1" fg:x="2718"/></g><g><title>_rjem_je_sdallocx_default (1 samples, 0.02%)</title><rect width=".023%" height="15" x="62.627%" y="933" fill="#CF8204" fg:w="1" fg:x="2718"/></g><g><title>_rjem_je_tcache_bin_flush_small (1 samples, 0.02%)</title><rect width=".023%" height="15" x="62.627%" y="917" fill="#DD1928" fg:w="1" fg:x="2718"/></g><g><title>tcache_bin_flush_bottom (1 samples, 0.02%)</title><rect width=".023%" height="15" x="62.627%" y="901" fill="#F1B807" fg:w="1" fg:x="2718"/></g><g><title>tcache_bin_flush_impl (1 samples, 0.02%)</title><rect width=".023%" height="15" x="62.627%" y="885" fill="#EB9F04" fg:w="1" fg:x="2718"/></g><g><title>_rjem_je_arena_slab_dalloc (1 samples, 0.02%)</title><rect width=".023%" height="15" x="62.627%" y="869" fill="#D65730" fg:w="1" fg:x="2718"/></g><g><title>pac_dalloc_impl (1 samples, 0.02%)</title><rect width=".023%" height="15" x="62.627%" y="853" fill="#F6C618" fg:w="1" fg:x="2718"/></g><g><title>_rjem_je_extent_record (1 samples, 0.02%)</title><rect width=".023%" height="15" x="62.627%" y="837" fill="#D14228" fg:w="1" fg:x="2718"/></g><g><title>extent_try_coalesce_large (1 samples, 0.02%)</title><rect width=".023%" height="15" x="62.627%" y="821" fill="#E99327" fg:w="1" fg:x="2718"/></g><g><title>extent_try_coalesce_impl (1 samples, 0.02%)</title><rect width=".023%" height="15" x="62.627%" y="805" fill="#E79134" fg:w="1" fg:x="2718"/></g><g><title>extent_coalesce (1 samples, 0.02%)</title><rect width=".023%" height="15" x="62.627%" y="789" fill="#CE141A" fg:w="1" fg:x="2718"/></g><g><title>_rjem_je_eset_remove (1 samples, 0.02%)</title><rect width=".023%" height="15" x="62.627%" y="773" fill="#EEDC04" fg:w="1" fg:x="2718"/></g><g><title>_rjem_je_edata_heap_remove (1 samples, 0.02%)</title><rect width=".023%" height="15" x="62.627%" y="757" fill="#FCC32A" fg:w="1" fg:x="2718"/></g><g><title>ph_remove (1 samples, 0.02%)</title><rect width=".023%" height="15" x="62.627%" y="741" fill="#D10A06" fg:w="1" fg:x="2718"/></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::BTreeMap&lt;json_benchmark::prim_str::PrimStr&lt;u32&gt;,alloc::string::String&gt;&gt; (6 samples, 0.14%)</title><rect width=".138%" height="15" x="62.535%" y="1189" fill="#E50334" fg:w="6" fg:x="2714"/></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.14%)</title><rect width=".138%" height="15" x="62.535%" y="1173" fill="#FD3125" fg:w="6" fg:x="2714"/></g><g><title>core::mem::drop (6 samples, 0.14%)</title><rect width=".138%" height="15" x="62.535%" y="1157" fill="#F06731" fg:w="6" fg:x="2714"/></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;json_benchmark::prim_str::PrimStr&lt;u32&gt;,alloc::string::String&gt;&gt; (6 samples, 0.14%)</title><rect width=".138%" height="15" x="62.535%" y="1141" fill="#FAB61E" fg:w="6" fg:x="2714"/></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.14%)</title><rect width=".138%" height="15" x="62.535%" y="1125" fill="#F8081E" fg:w="6" fg:x="2714"/></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (3 samples, 0.07%)</title><rect width=".069%" height="15" x="62.604%" y="1109" fill="#ED781E" fg:w="3" fg:x="2717"/></g><g><title>?? (2 samples, 0.05%)</title><rect width=".046%" height="15" x="62.627%" y="1093" fill="#DD9222" fg:w="2" fg:x="2718"/></g><g><title>?? (2 samples, 0.05%)</title><rect width=".046%" height="15" x="62.627%" y="1077" fill="#F2370D" fg:w="2" fg:x="2718"/></g><g><title>alloc::collections::btree::mem::replace (2 samples, 0.05%)</title><rect width=".046%" height="15" x="62.627%" y="1061" fill="#F2701F" fg:w="2" fg:x="2718"/></g><g><title>alloc::collections::btree::navigate::_&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_next_unchecked::_{{closure}} (2 samples, 0.05%)</title><rect width=".046%" height="15" x="62.627%" y="1045" fill="#F9C01B" fg:w="2" fg:x="2718"/></g><g><title>?? (2 samples, 0.05%)</title><rect width=".046%" height="15" x="62.627%" y="1029" fill="#D0CC2C" fg:w="2" fg:x="2718"/></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.02%)</title><rect width=".023%" height="15" x="62.65%" y="1013" fill="#D05D36" fg:w="1" fg:x="2719"/></g><g><title>tcache_bin_flush_edatas_lookup (1 samples, 0.02%)</title><rect width=".023%" height="15" x="62.673%" y="1013" fill="#F2011F" fg:w="1" fg:x="2720"/></g><g><title>emap_edata_lookup_batch (1 samples, 0.02%)</title><rect width=".023%" height="15" x="62.673%" y="997" fill="#F15319" fg:w="1" fg:x="2720"/></g><g><title>tcache_bin_flush_metadata_visitor (1 samples, 0.02%)</title><rect width=".023%" height="15" x="62.673%" y="981" fill="#CDA932" fg:w="1" fg:x="2720"/></g><g><title>util_prefetch_write_range (1 samples, 0.02%)</title><rect width=".023%" height="15" x="62.673%" y="965" fill="#EFBA25" fg:w="1" fg:x="2720"/></g><g><title>util_prefetch_write (1 samples, 0.02%)</title><rect width=".023%" height="15" x="62.673%" y="949" fill="#CDDD0A" fg:w="1" fg:x="2720"/></g><g><title>_rjem_je_sdallocx_default (2 samples, 0.05%)</title><rect width=".046%" height="15" x="62.673%" y="1077" fill="#DAC40F" fg:w="2" fg:x="2720"/></g><g><title>_rjem_je_tcache_bin_flush_small (2 samples, 0.05%)</title><rect width=".046%" height="15" x="62.673%" y="1061" fill="#DAC423" fg:w="2" fg:x="2720"/></g><g><title>tcache_bin_flush_bottom (2 samples, 0.05%)</title><rect width=".046%" height="15" x="62.673%" y="1045" fill="#E93F18" fg:w="2" fg:x="2720"/></g><g><title>tcache_bin_flush_impl (2 samples, 0.05%)</title><rect width=".046%" height="15" x="62.673%" y="1029" fill="#E10804" fg:w="2" fg:x="2720"/></g><g><title>tcache_bin_flush_match (1 samples, 0.02%)</title><rect width=".023%" height="15" x="62.696%" y="1013" fill="#EA6923" fg:w="1" fg:x="2721"/></g><g><title>_rjem_sdallocx (1 samples, 0.02%)</title><rect width=".023%" height="15" x="62.719%" y="1077" fill="#EC1520" fg:w="1" fg:x="2722"/></g><g><title>bitmap_unset (1 samples, 0.02%)</title><rect width=".023%" height="15" x="62.742%" y="853" fill="#E46D06" fg:w="1" fg:x="2723"/></g><g><title>arena_dalloc_bin_locked_step (2 samples, 0.05%)</title><rect width=".046%" height="15" x="62.742%" y="869" fill="#E5D71F" fg:w="2" fg:x="2723"/></g><g><title>edata_nfree_inc (1 samples, 0.02%)</title><rect width=".023%" height="15" x="62.765%" y="853" fill="#DD3436" fg:w="1" fg:x="2724"/></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (3 samples, 0.07%)</title><rect width=".069%" height="15" x="62.742%" y="1061" fill="#FC812B" fg:w="3" fg:x="2723"/></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (3 samples, 0.07%)</title><rect width=".069%" height="15" x="62.742%" y="1045" fill="#F8B71B" fg:w="3" fg:x="2723"/></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (3 samples, 0.07%)</title><rect width=".069%" height="15" x="62.742%" y="1029" fill="#FA0016" fg:w="3" fg:x="2723"/></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.07%)</title><rect width=".069%" height="15" x="62.742%" y="1013" fill="#D5A60A" fg:w="3" fg:x="2723"/></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (3 samples, 0.07%)</title><rect width=".069%" height="15" x="62.742%" y="997" fill="#CFA324" fg:w="3" fg:x="2723"/></g><g><title>alloc::alloc::dealloc (3 samples, 0.07%)</title><rect width=".069%" height="15" x="62.742%" y="981" fill="#D07A16" fg:w="3" fg:x="2723"/></g><g><title>__rust_dealloc (3 samples, 0.07%)</title><rect width=".069%" height="15" x="62.742%" y="965" fill="#CF6831" fg:w="3" fg:x="2723"/></g><g><title>&lt;jemallocator::Jemalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (3 samples, 0.07%)</title><rect width=".069%" height="15" x="62.742%" y="949" fill="#F8D332" fg:w="3" fg:x="2723"/></g><g><title>_rjem_je_sdallocx_default (3 samples, 0.07%)</title><rect width=".069%" height="15" x="62.742%" y="933" fill="#D90D2D" fg:w="3" fg:x="2723"/></g><g><title>_rjem_je_tcache_bin_flush_small (3 samples, 0.07%)</title><rect width=".069%" height="15" x="62.742%" y="917" fill="#D3D831" fg:w="3" fg:x="2723"/></g><g><title>tcache_bin_flush_bottom (3 samples, 0.07%)</title><rect width=".069%" height="15" x="62.742%" y="901" fill="#DD3A35" fg:w="3" fg:x="2723"/></g><g><title>tcache_bin_flush_impl (3 samples, 0.07%)</title><rect width=".069%" height="15" x="62.742%" y="885" fill="#DC7029" fg:w="3" fg:x="2723"/></g><g><title>tcache_bin_flush_edatas_lookup (1 samples, 0.02%)</title><rect width=".023%" height="15" x="62.788%" y="869" fill="#EC261C" fg:w="1" fg:x="2725"/></g><g><title>emap_edata_lookup_batch (1 samples, 0.02%)</title><rect width=".023%" height="15" x="62.788%" y="853" fill="#E3C316" fg:w="1" fg:x="2725"/></g><g><title>tcache_bin_flush_metadata_visitor (1 samples, 0.02%)</title><rect width=".023%" height="15" x="62.788%" y="837" fill="#D63721" fg:w="1" fg:x="2725"/></g><g><title>util_prefetch_write_range (1 samples, 0.02%)</title><rect width=".023%" height="15" x="62.788%" y="821" fill="#F8500D" fg:w="1" fg:x="2725"/></g><g><title>util_prefetch_write (1 samples, 0.02%)</title><rect width=".023%" height="15" x="62.788%" y="805" fill="#EE3406" fg:w="1" fg:x="2725"/></g><g><title>_rjem_je_arena_slab_dalloc (1 samples, 0.02%)</title><rect width=".023%" height="15" x="62.811%" y="885" fill="#E0C62F" fg:w="1" fg:x="2726"/></g><g><title>pac_dalloc_impl (1 samples, 0.02%)</title><rect width=".023%" height="15" x="62.811%" y="869" fill="#E9AB14" fg:w="1" fg:x="2726"/></g><g><title>_rjem_je_extent_record (1 samples, 0.02%)</title><rect width=".023%" height="15" x="62.811%" y="853" fill="#F11E19" fg:w="1" fg:x="2726"/></g><g><title>extent_deactivate_locked (1 samples, 0.02%)</title><rect width=".023%" height="15" x="62.811%" y="837" fill="#CFAB26" fg:w="1" fg:x="2726"/></g><g><title>extent_deactivate_locked_impl (1 samples, 0.02%)</title><rect width=".023%" height="15" x="62.811%" y="821" fill="#EA4601" fg:w="1" fg:x="2726"/></g><g><title>_rjem_je_eset_insert (1 samples, 0.02%)</title><rect width=".023%" height="15" x="62.811%" y="805" fill="#E8B212" fg:w="1" fg:x="2726"/></g><g><title>edata_list_inactive_append (1 samples, 0.02%)</title><rect width=".023%" height="15" x="62.811%" y="789" fill="#F14E28" fg:w="1" fg:x="2726"/></g><g><title>_rjem_je_tcache_bin_flush_small (1 samples, 0.02%)</title><rect width=".023%" height="15" x="62.834%" y="885" fill="#DE2319" fg:w="1" fg:x="2727"/></g><g><title>_rjem_je_sdallocx_default (3 samples, 0.07%)</title><rect width=".069%" height="15" x="62.811%" y="949" fill="#CF5C10" fg:w="3" fg:x="2726"/></g><g><title>_rjem_je_tcache_bin_flush_small (3 samples, 0.07%)</title><rect width=".069%" height="15" x="62.811%" y="933" fill="#D83B33" fg:w="3" fg:x="2726"/></g><g><title>tcache_bin_flush_bottom (3 samples, 0.07%)</title><rect width=".069%" height="15" x="62.811%" y="917" fill="#D5501C" fg:w="3" fg:x="2726"/></g><g><title>tcache_bin_flush_impl (3 samples, 0.07%)</title><rect width=".069%" height="15" x="62.811%" y="901" fill="#DC5D07" fg:w="3" fg:x="2726"/></g><g><title>arena_dalloc_bin_locked_step (1 samples, 0.02%)</title><rect width=".023%" height="15" x="62.857%" y="885" fill="#E1182C" fg:w="1" fg:x="2728"/></g><g><title>edata_nfree_inc (1 samples, 0.02%)</title><rect width=".023%" height="15" x="62.857%" y="869" fill="#F34A28" fg:w="1" fg:x="2728"/></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u32&gt;&gt; (4 samples, 0.09%)</title><rect width=".092%" height="15" x="62.811%" y="1061" fill="#E42707" fg:w="4" fg:x="2726"/></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u32&gt;&gt; (4 samples, 0.09%)</title><rect width=".092%" height="15" x="62.811%" y="1045" fill="#E34F08" fg:w="4" fg:x="2726"/></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.09%)</title><rect width=".092%" height="15" x="62.811%" y="1029" fill="#EC3A0B" fg:w="4" fg:x="2726"/></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (4 samples, 0.09%)</title><rect width=".092%" height="15" x="62.811%" y="1013" fill="#F93F23" fg:w="4" fg:x="2726"/></g><g><title>alloc::alloc::dealloc (4 samples, 0.09%)</title><rect width=".092%" height="15" x="62.811%" y="997" fill="#FC7210" fg:w="4" fg:x="2726"/></g><g><title>__rust_dealloc (4 samples, 0.09%)</title><rect width=".092%" height="15" x="62.811%" y="981" fill="#FE9718" fg:w="4" fg:x="2726"/></g><g><title>&lt;jemallocator::Jemalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (4 samples, 0.09%)</title><rect width=".092%" height="15" x="62.811%" y="965" fill="#FD3627" fg:w="4" fg:x="2726"/></g><g><title>_rjem_sdallocx (1 samples, 0.02%)</title><rect width=".023%" height="15" x="62.88%" y="949" fill="#F3192D" fg:w="1" fg:x="2729"/></g><g><title>free_fastpath (1 samples, 0.02%)</title><rect width=".023%" height="15" x="62.88%" y="933" fill="#EA8609" fg:w="1" fg:x="2729"/></g><g><title>sz_size2index_lookup (1 samples, 0.02%)</title><rect width=".023%" height="15" x="62.88%" y="917" fill="#E3A61F" fg:w="1" fg:x="2729"/></g><g><title>sz_size2index_lookup_impl (1 samples, 0.02%)</title><rect width=".023%" height="15" x="62.88%" y="901" fill="#F58F29" fg:w="1" fg:x="2729"/></g><g><title>?? (12 samples, 0.28%)</title><rect width=".277%" height="15" x="62.673%" y="1109" fill="#EEB520" fg:w="12" fg:x="2720"/></g><g><title>core::ptr::drop_in_place&lt;json_benchmark::copy::citm_catalog::CitmCatalog&gt; (12 samples, 0.28%)</title><rect width=".277%" height="15" x="62.673%" y="1093" fill="#E07112" fg:w="12" fg:x="2720"/></g><g><title>core::ptr::drop_in_place&lt;json_benchmark::copy::citm_catalog::Event&gt; (9 samples, 0.21%)</title><rect width=".207%" height="15" x="62.742%" y="1077" fill="#F0E51C" fg:w="9" fg:x="2723"/></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;alloc::string::String&gt;&gt; (2 samples, 0.05%)</title><rect width=".046%" height="15" x="62.903%" y="1061" fill="#FAB903" fg:w="2" fg:x="2730"/></g><g><title>extent_deactivate_locked (1 samples, 0.02%)</title><rect width=".023%" height="15" x="62.972%" y="821" fill="#D43B19" fg:w="1" fg:x="2733"/></g><g><title>extent_deactivate_locked_impl (1 samples, 0.02%)</title><rect width=".023%" height="15" x="62.972%" y="805" fill="#DD5714" fg:w="1" fg:x="2733"/></g><g><title>_rjem_je_eset_insert (1 samples, 0.02%)</title><rect width=".023%" height="15" x="62.972%" y="789" fill="#D54A1C" fg:w="1" fg:x="2733"/></g><g><title>_rjem_je_edata_heap_empty (1 samples, 0.02%)</title><rect width=".023%" height="15" x="62.972%" y="773" fill="#E08422" fg:w="1" fg:x="2733"/></g><g><title>ph_empty (1 samples, 0.02%)</title><rect width=".023%" height="15" x="62.972%" y="757" fill="#DE6518" fg:w="1" fg:x="2733"/></g><g><title>_rjem_je_edata_cache_put (1 samples, 0.02%)</title><rect width=".023%" height="15" x="62.995%" y="757" fill="#FE8E04" fg:w="1" fg:x="2734"/></g><g><title>malloc_mutex_unlock (1 samples, 0.02%)</title><rect width=".023%" height="15" x="62.995%" y="741" fill="#E6E531" fg:w="1" fg:x="2734"/></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (3 samples, 0.07%)</title><rect width=".069%" height="15" x="62.972%" y="997" fill="#EE462F" fg:w="3" fg:x="2733"/></g><g><title>alloc::alloc::dealloc (3 samples, 0.07%)</title><rect width=".069%" height="15" x="62.972%" y="981" fill="#E7A011" fg:w="3" fg:x="2733"/></g><g><title>__rust_dealloc (3 samples, 0.07%)</title><rect width=".069%" height="15" x="62.972%" y="965" fill="#DA4435" fg:w="3" fg:x="2733"/></g><g><title>&lt;jemallocator::Jemalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (3 samples, 0.07%)</title><rect width=".069%" height="15" x="62.972%" y="949" fill="#EC6F0A" fg:w="3" fg:x="2733"/></g><g><title>_rjem_je_sdallocx_default (3 samples, 0.07%)</title><rect width=".069%" height="15" x="62.972%" y="933" fill="#E02229" fg:w="3" fg:x="2733"/></g><g><title>_rjem_je_tcache_bin_flush_small (3 samples, 0.07%)</title><rect width=".069%" height="15" x="62.972%" y="917" fill="#F17613" fg:w="3" fg:x="2733"/></g><g><title>tcache_bin_flush_bottom (3 samples, 0.07%)</title><rect width=".069%" height="15" x="62.972%" y="901" fill="#EE8119" fg:w="3" fg:x="2733"/></g><g><title>tcache_bin_flush_impl (3 samples, 0.07%)</title><rect width=".069%" height="15" x="62.972%" y="885" fill="#EE161F" fg:w="3" fg:x="2733"/></g><g><title>_rjem_je_arena_slab_dalloc (3 samples, 0.07%)</title><rect width=".069%" height="15" x="62.972%" y="869" fill="#DEAE30" fg:w="3" fg:x="2733"/></g><g><title>pac_dalloc_impl (3 samples, 0.07%)</title><rect width=".069%" height="15" x="62.972%" y="853" fill="#CE9828" fg:w="3" fg:x="2733"/></g><g><title>_rjem_je_extent_record (3 samples, 0.07%)</title><rect width=".069%" height="15" x="62.972%" y="837" fill="#DA6336" fg:w="3" fg:x="2733"/></g><g><title>extent_try_coalesce_large (2 samples, 0.05%)</title><rect width=".046%" height="15" x="62.995%" y="821" fill="#DCAE1A" fg:w="2" fg:x="2734"/></g><g><title>extent_try_coalesce_impl (2 samples, 0.05%)</title><rect width=".046%" height="15" x="62.995%" y="805" fill="#F57409" fg:w="2" fg:x="2734"/></g><g><title>extent_coalesce (2 samples, 0.05%)</title><rect width=".046%" height="15" x="62.995%" y="789" fill="#D14823" fg:w="2" fg:x="2734"/></g><g><title>extent_merge_impl (2 samples, 0.05%)</title><rect width=".046%" height="15" x="62.995%" y="773" fill="#E27E15" fg:w="2" fg:x="2734"/></g><g><title>_rjem_je_emap_merge_prepare (1 samples, 0.02%)</title><rect width=".023%" height="15" x="63.018%" y="757" fill="#E3C001" fg:w="1" fg:x="2735"/></g><g><title>?? (5 samples, 0.12%)</title><rect width=".115%" height="15" x="62.972%" y="1013" fill="#EDB41D" fg:w="5" fg:x="2733"/></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.05%)</title><rect width=".046%" height="15" x="63.041%" y="997" fill="#E6C523" fg:w="2" fg:x="2736"/></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::BTreeMap&lt;json_benchmark::prim_str::PrimStr&lt;u32&gt;,json_benchmark::copy::citm_catalog::Event&gt;&gt; (21 samples, 0.48%)</title><rect width=".484%" height="15" x="62.673%" y="1189" fill="#F6C11F" fg:w="21" fg:x="2720"/></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (21 samples, 0.48%)</title><rect width=".484%" height="15" x="62.673%" y="1173" fill="#F12404" fg:w="21" fg:x="2720"/></g><g><title>core::mem::drop (21 samples, 0.48%)</title><rect width=".484%" height="15" x="62.673%" y="1157" fill="#F18211" fg:w="21" fg:x="2720"/></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;json_benchmark::prim_str::PrimStr&lt;u32&gt;,json_benchmark::copy::citm_catalog::Event&gt;&gt; (21 samples, 0.48%)</title><rect width=".484%" height="15" x="62.673%" y="1141" fill="#CE8920" fg:w="21" fg:x="2720"/></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (21 samples, 0.48%)</title><rect width=".484%" height="15" x="62.673%" y="1125" fill="#EDE433" fg:w="21" fg:x="2720"/></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (9 samples, 0.21%)</title><rect width=".207%" height="15" x="62.949%" y="1109" fill="#F3062A" fg:w="9" fg:x="2732"/></g><g><title>?? (8 samples, 0.18%)</title><rect width=".184%" height="15" x="62.972%" y="1093" fill="#FB4A1C" fg:w="8" fg:x="2733"/></g><g><title>?? (8 samples, 0.18%)</title><rect width=".184%" height="15" x="62.972%" y="1077" fill="#DA1431" fg:w="8" fg:x="2733"/></g><g><title>alloc::collections::btree::mem::replace (8 samples, 0.18%)</title><rect width=".184%" height="15" x="62.972%" y="1061" fill="#EE1C0E" fg:w="8" fg:x="2733"/></g><g><title>alloc::collections::btree::navigate::_&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_next_unchecked::_{{closure}} (8 samples, 0.18%)</title><rect width=".184%" height="15" x="62.972%" y="1045" fill="#E5282E" fg:w="8" fg:x="2733"/></g><g><title>?? (8 samples, 0.18%)</title><rect width=".184%" height="15" x="62.972%" y="1029" fill="#F4C314" fg:w="8" fg:x="2733"/></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (3 samples, 0.07%)</title><rect width=".069%" height="15" x="63.088%" y="1013" fill="#FD3823" fg:w="3" fg:x="2738"/></g><g><title>_rjem_je_sdallocx_default (1 samples, 0.02%)</title><rect width=".023%" height="15" x="63.157%" y="1141" fill="#D2952C" fg:w="1" fg:x="2741"/></g><g><title>_rjem_je_tcache_bin_flush_small (1 samples, 0.02%)</title><rect width=".023%" height="15" x="63.157%" y="1125" fill="#F0870C" fg:w="1" fg:x="2741"/></g><g><title>tcache_bin_flush_bottom (1 samples, 0.02%)</title><rect width=".023%" height="15" x="63.157%" y="1109" fill="#FB1832" fg:w="1" fg:x="2741"/></g><g><title>tcache_bin_flush_impl (1 samples, 0.02%)</title><rect width=".023%" height="15" x="63.157%" y="1093" fill="#F3C82F" fg:w="1" fg:x="2741"/></g><g><title>tcache_bin_flush_edatas_lookup (1 samples, 0.02%)</title><rect width=".023%" height="15" x="63.157%" y="1077" fill="#E0A61A" fg:w="1" fg:x="2741"/></g><g><title>emap_edata_lookup_batch (1 samples, 0.02%)</title><rect width=".023%" height="15" x="63.157%" y="1061" fill="#E9002F" fg:w="1" fg:x="2741"/></g><g><title>tcache_bin_flush_metadata_visitor (1 samples, 0.02%)</title><rect width=".023%" height="15" x="63.157%" y="1045" fill="#FD5005" fg:w="1" fg:x="2741"/></g><g><title>util_prefetch_write_range (1 samples, 0.02%)</title><rect width=".023%" height="15" x="63.157%" y="1029" fill="#D68519" fg:w="1" fg:x="2741"/></g><g><title>util_prefetch_write (1 samples, 0.02%)</title><rect width=".023%" height="15" x="63.157%" y="1013" fill="#D11B0E" fg:w="1" fg:x="2741"/></g><g><title>_rjem_sdallocx (1 samples, 0.02%)</title><rect width=".023%" height="15" x="63.18%" y="1141" fill="#DB6633" fg:w="1" fg:x="2742"/></g><g><title>free_fastpath (1 samples, 0.02%)</title><rect width=".023%" height="15" x="63.18%" y="1125" fill="#ED1210" fg:w="1" fg:x="2742"/></g><g><title>cache_bin_dalloc_easy (1 samples, 0.02%)</title><rect width=".023%" height="15" x="63.18%" y="1109" fill="#F15511" fg:w="1" fg:x="2742"/></g><g><title>cache_bin_full (1 samples, 0.02%)</title><rect width=".023%" height="15" x="63.18%" y="1093" fill="#EC5A2A" fg:w="1" fg:x="2742"/></g><g><title>_rjem_je_arena_dalloc_bin_locked_handle_newly_empty (1 samples, 0.02%)</title><rect width=".023%" height="15" x="63.203%" y="933" fill="#F93915" fg:w="1" fg:x="2743"/></g><g><title>arena_dissociate_bin_slab (1 samples, 0.02%)</title><rect width=".023%" height="15" x="63.203%" y="917" fill="#F30C24" fg:w="1" fg:x="2743"/></g><g><title>arena_bin_slabs_nonfull_remove (1 samples, 0.02%)</title><rect width=".023%" height="15" x="63.203%" y="901" fill="#FD802F" fg:w="1" fg:x="2743"/></g><g><title>_rjem_je_edata_heap_remove (1 samples, 0.02%)</title><rect width=".023%" height="15" x="63.203%" y="885" fill="#CF2114" fg:w="1" fg:x="2743"/></g><g><title>ph_remove (1 samples, 0.02%)</title><rect width=".023%" height="15" x="63.203%" y="869" fill="#E9D723" fg:w="1" fg:x="2743"/></g><g><title>arena_dalloc_bin_locked_step (2 samples, 0.05%)</title><rect width=".046%" height="15" x="63.203%" y="949" fill="#F9BC34" fg:w="2" fg:x="2743"/></g><g><title>edata_nfree_get (1 samples, 0.02%)</title><rect width=".023%" height="15" x="63.226%" y="933" fill="#E10C20" fg:w="1" fg:x="2744"/></g><g><title>rtree_leaf_elm_lookup (1 samples, 0.02%)</title><rect width=".023%" height="15" x="63.249%" y="917" fill="#F7620E" fg:w="1" fg:x="2745"/></g><g><title>_rjem_je_tcache_bin_flush_small (4 samples, 0.09%)</title><rect width=".092%" height="15" x="63.203%" y="997" fill="#F7DB30" fg:w="4" fg:x="2743"/></g><g><title>tcache_bin_flush_bottom (4 samples, 0.09%)</title><rect width=".092%" height="15" x="63.203%" y="981" fill="#FD3C30" fg:w="4" fg:x="2743"/></g><g><title>tcache_bin_flush_impl (4 samples, 0.09%)</title><rect width=".092%" height="15" x="63.203%" y="965" fill="#F50F34" fg:w="4" fg:x="2743"/></g><g><title>tcache_bin_flush_edatas_lookup (2 samples, 0.05%)</title><rect width=".046%" height="15" x="63.249%" y="949" fill="#DC851C" fg:w="2" fg:x="2745"/></g><g><title>emap_edata_lookup_batch (2 samples, 0.05%)</title><rect width=".046%" height="15" x="63.249%" y="933" fill="#D9B404" fg:w="2" fg:x="2745"/></g><g><title>rtree_leaf_elm_read (1 samples, 0.02%)</title><rect width=".023%" height="15" x="63.272%" y="917" fill="#FB1801" fg:w="1" fg:x="2746"/></g><g><title>rtree_leaf_elm_bits_read (1 samples, 0.02%)</title><rect width=".023%" height="15" x="63.272%" y="901" fill="#D4B931" fg:w="1" fg:x="2746"/></g><g><title>atomic_load_p (1 samples, 0.02%)</title><rect width=".023%" height="15" x="63.272%" y="885" fill="#D7AF16" fg:w="1" fg:x="2746"/></g><g><title>_rjem_je_sdallocx_default (5 samples, 0.12%)</title><rect width=".115%" height="15" x="63.203%" y="1013" fill="#FACD0E" fg:w="5" fg:x="2743"/></g><g><title>inallocx (1 samples, 0.02%)</title><rect width=".023%" height="15" x="63.295%" y="997" fill="#E1D316" fg:w="1" fg:x="2747"/></g><g><title>aligned_usize_get (1 samples, 0.02%)</title><rect width=".023%" height="15" x="63.295%" y="981" fill="#FBB32A" fg:w="1" fg:x="2747"/></g><g><title>sz_s2u (1 samples, 0.02%)</title><rect width=".023%" height="15" x="63.295%" y="965" fill="#D0D833" fg:w="1" fg:x="2747"/></g><g><title>sz_s2u_lookup (1 samples, 0.02%)</title><rect width=".023%" height="15" x="63.295%" y="949" fill="#EB240B" fg:w="1" fg:x="2747"/></g><g><title>sz_index2size_lookup (1 samples, 0.02%)</title><rect width=".023%" height="15" x="63.295%" y="933" fill="#D5BD1C" fg:w="1" fg:x="2747"/></g><g><title>_rjem_je_sdallocx_default (1 samples, 0.02%)</title><rect width=".023%" height="15" x="63.295%" y="917" fill="#E3CB2A" fg:w="1" fg:x="2747"/></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;json_benchmark::copy::citm_catalog::Price&gt;&gt; (6 samples, 0.14%)</title><rect width=".138%" height="15" x="63.203%" y="1125" fill="#F44824" fg:w="6" fg:x="2743"/></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;json_benchmark::copy::citm_catalog::Price&gt;&gt; (6 samples, 0.14%)</title><rect width=".138%" height="15" x="63.203%" y="1109" fill="#D53511" fg:w="6" fg:x="2743"/></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.14%)</title><rect width=".138%" height="15" x="63.203%" y="1093" fill="#CFA703" fg:w="6" fg:x="2743"/></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (6 samples, 0.14%)</title><rect width=".138%" height="15" x="63.203%" y="1077" fill="#D8621E" fg:w="6" fg:x="2743"/></g><g><title>alloc::alloc::dealloc (6 samples, 0.14%)</title><rect width=".138%" height="15" x="63.203%" y="1061" fill="#EC7B0F" fg:w="6" fg:x="2743"/></g><g><title>__rust_dealloc (6 samples, 0.14%)</title><rect width=".138%" height="15" x="63.203%" y="1045" fill="#F85132" fg:w="6" fg:x="2743"/></g><g><title>&lt;jemallocator::Jemalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (6 samples, 0.14%)</title><rect width=".138%" height="15" x="63.203%" y="1029" fill="#D67804" fg:w="6" fg:x="2743"/></g><g><title>_rjem_sdallocx (1 samples, 0.02%)</title><rect width=".023%" height="15" x="63.318%" y="1013" fill="#D0B322" fg:w="1" fg:x="2748"/></g><g><title>free_fastpath (1 samples, 0.02%)</title><rect width=".023%" height="15" x="63.318%" y="997" fill="#E38C07" fg:w="1" fg:x="2748"/></g><g><title>_rjem_sdallocx (1 samples, 0.02%)</title><rect width=".023%" height="15" x="63.318%" y="981" fill="#D61606" fg:w="1" fg:x="2748"/></g><g><title>_rjem_je_arena_slab_dalloc (1 samples, 0.02%)</title><rect width=".023%" height="15" x="63.387%" y="885" fill="#CF891B" fg:w="1" fg:x="2751"/></g><g><title>pac_dalloc_impl (1 samples, 0.02%)</title><rect width=".023%" height="15" x="63.387%" y="869" fill="#D2082E" fg:w="1" fg:x="2751"/></g><g><title>_rjem_je_extent_record (1 samples, 0.02%)</title><rect width=".023%" height="15" x="63.387%" y="853" fill="#F01036" fg:w="1" fg:x="2751"/></g><g><title>extent_deactivate_locked (1 samples, 0.02%)</title><rect width=".023%" height="15" x="63.387%" y="837" fill="#D3D11D" fg:w="1" fg:x="2751"/></g><g><title>extent_deactivate_locked_impl (1 samples, 0.02%)</title><rect width=".023%" height="15" x="63.387%" y="821" fill="#E2E418" fg:w="1" fg:x="2751"/></g><g><title>_rjem_je_eset_insert (1 samples, 0.02%)</title><rect width=".023%" height="15" x="63.387%" y="805" fill="#DE5409" fg:w="1" fg:x="2751"/></g><g><title>edata_list_inactive_append (1 samples, 0.02%)</title><rect width=".023%" height="15" x="63.387%" y="789" fill="#EACB1E" fg:w="1" fg:x="2751"/></g><g><title>_rjem_je_tcache_bin_flush_small (1 samples, 0.02%)</title><rect width=".023%" height="15" x="63.41%" y="885" fill="#EE6D0E" fg:w="1" fg:x="2752"/></g><g><title>arena_bin_lower_slab (1 samples, 0.02%)</title><rect width=".023%" height="15" x="63.433%" y="869" fill="#E9CE22" fg:w="1" fg:x="2753"/></g><g><title>arena_bin_slabs_nonfull_insert (1 samples, 0.02%)</title><rect width=".023%" height="15" x="63.433%" y="853" fill="#DCA72F" fg:w="1" fg:x="2753"/></g><g><title>_rjem_je_edata_heap_insert (1 samples, 0.02%)</title><rect width=".023%" height="15" x="63.433%" y="837" fill="#EE690A" fg:w="1" fg:x="2753"/></g><g><title>bitmap_unset (2 samples, 0.05%)</title><rect width=".046%" height="15" x="63.456%" y="869" fill="#D5E311" fg:w="2" fg:x="2754"/></g><g><title>edata_nfree_get (1 samples, 0.02%)</title><rect width=".023%" height="15" x="63.502%" y="869" fill="#D98426" fg:w="1" fg:x="2756"/></g><g><title>arena_dalloc_bin_locked_step (5 samples, 0.12%)</title><rect width=".115%" height="15" x="63.433%" y="885" fill="#F29204" fg:w="5" fg:x="2753"/></g><g><title>edata_nfree_inc (1 samples, 0.02%)</title><rect width=".023%" height="15" x="63.525%" y="869" fill="#D43D09" fg:w="1" fg:x="2757"/></g><g><title>_rjem_je_tcache_bin_flush_small (1 samples, 0.02%)</title><rect width=".023%" height="15" x="63.548%" y="869" fill="#F77E16" fg:w="1" fg:x="2758"/></g><g><title>rtree_leaf_elm_lookup (2 samples, 0.05%)</title><rect width=".046%" height="15" x="63.641%" y="853" fill="#DCC402" fg:w="2" fg:x="2762"/></g><g><title>tcache_bin_flush_edatas_lookup (7 samples, 0.16%)</title><rect width=".161%" height="15" x="63.548%" y="885" fill="#D02E04" fg:w="7" fg:x="2758"/></g><g><title>emap_edata_lookup_batch (6 samples, 0.14%)</title><rect width=".138%" height="15" x="63.571%" y="869" fill="#FC682E" fg:w="6" fg:x="2759"/></g><g><title>rtree_leaf_elm_read (1 samples, 0.02%)</title><rect width=".023%" height="15" x="63.687%" y="853" fill="#ED9830" fg:w="1" fg:x="2764"/></g><g><title>rtree_leaf_elm_bits_decode (1 samples, 0.02%)</title><rect width=".023%" height="15" x="63.687%" y="837" fill="#DD3B25" fg:w="1" fg:x="2764"/></g><g><title>_rjem_je_sdallocx_default (17 samples, 0.39%)</title><rect width=".392%" height="15" x="63.364%" y="949" fill="#D1CA33" fg:w="17" fg:x="2750"/></g><g><title>_rjem_je_tcache_bin_flush_small (17 samples, 0.39%)</title><rect width=".392%" height="15" x="63.364%" y="933" fill="#E4511E" fg:w="17" fg:x="2750"/></g><g><title>tcache_bin_flush_bottom (17 samples, 0.39%)</title><rect width=".392%" height="15" x="63.364%" y="917" fill="#E32A27" fg:w="17" fg:x="2750"/></g><g><title>tcache_bin_flush_impl (17 samples, 0.39%)</title><rect width=".392%" height="15" x="63.364%" y="901" fill="#DD1A02" fg:w="17" fg:x="2750"/></g><g><title>tcache_bin_flush_match (2 samples, 0.05%)</title><rect width=".046%" height="15" x="63.71%" y="885" fill="#FE3D1F" fg:w="2" fg:x="2765"/></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (18 samples, 0.41%)</title><rect width=".415%" height="15" x="63.364%" y="1013" fill="#DEAD26" fg:w="18" fg:x="2750"/></g><g><title>alloc::alloc::dealloc (18 samples, 0.41%)</title><rect width=".415%" height="15" x="63.364%" y="997" fill="#DA320C" fg:w="18" fg:x="2750"/></g><g><title>__rust_dealloc (18 samples, 0.41%)</title><rect width=".415%" height="15" x="63.364%" y="981" fill="#DF5828" fg:w="18" fg:x="2750"/></g><g><title>&lt;jemallocator::Jemalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (18 samples, 0.41%)</title><rect width=".415%" height="15" x="63.364%" y="965" fill="#ED3613" fg:w="18" fg:x="2750"/></g><g><title>_rjem_sdallocx (1 samples, 0.02%)</title><rect width=".023%" height="15" x="63.756%" y="949" fill="#FB8119" fg:w="1" fg:x="2767"/></g><g><title>free_fastpath (1 samples, 0.02%)</title><rect width=".023%" height="15" x="63.756%" y="933" fill="#EE6113" fg:w="1" fg:x="2767"/></g><g><title>sz_size2index_lookup (1 samples, 0.02%)</title><rect width=".023%" height="15" x="63.756%" y="917" fill="#F0A912" fg:w="1" fg:x="2767"/></g><g><title>sz_size2index_lookup_impl (1 samples, 0.02%)</title><rect width=".023%" height="15" x="63.756%" y="901" fill="#E6BB31" fg:w="1" fg:x="2767"/></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (23 samples, 0.53%)</title><rect width=".53%" height="15" x="63.341%" y="1109" fill="#D12C1A" fg:w="23" fg:x="2749"/></g><g><title>core::ptr::drop_in_place&lt;[json_benchmark::copy::citm_catalog::SeatCategory]&gt; (23 samples, 0.53%)</title><rect width=".53%" height="15" x="63.341%" y="1093" fill="#F40006" fg:w="23" fg:x="2749"/></g><g><title>core::ptr::drop_in_place&lt;json_benchmark::copy::citm_catalog::SeatCategory&gt; (22 samples, 0.51%)</title><rect width=".507%" height="15" x="63.364%" y="1077" fill="#F81215" fg:w="22" fg:x="2750"/></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;json_benchmark::copy::citm_catalog::Area&gt;&gt; (22 samples, 0.51%)</title><rect width=".507%" height="15" x="63.364%" y="1061" fill="#F5B413" fg:w="22" fg:x="2750"/></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;json_benchmark::copy::citm_catalog::Area&gt;&gt; (22 samples, 0.51%)</title><rect width=".507%" height="15" x="63.364%" y="1045" fill="#FC7624" fg:w="22" fg:x="2750"/></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (22 samples, 0.51%)</title><rect width=".507%" height="15" x="63.364%" y="1029" fill="#D2E013" fg:w="22" fg:x="2750"/></g><g><title>core::ptr::drop_in_place&lt;json_benchmark::copy::citm_catalog::Performance&gt; (4 samples, 0.09%)</title><rect width=".092%" height="15" x="63.779%" y="1013" fill="#DA1E18" fg:w="4" fg:x="2768"/></g><g><title>arena_dalloc_bin_locked_step (1 samples, 0.02%)</title><rect width=".023%" height="15" x="63.871%" y="949" fill="#DB4B32" fg:w="1" fg:x="2772"/></g><g><title>_rjem_je_arena_dalloc_bin_locked_handle_newly_empty (1 samples, 0.02%)</title><rect width=".023%" height="15" x="63.871%" y="933" fill="#EA4832" fg:w="1" fg:x="2772"/></g><g><title>arena_dissociate_bin_slab (1 samples, 0.02%)</title><rect width=".023%" height="15" x="63.871%" y="917" fill="#DB6430" fg:w="1" fg:x="2772"/></g><g><title>arena_bin_slabs_nonfull_remove (1 samples, 0.02%)</title><rect width=".023%" height="15" x="63.871%" y="901" fill="#FD0529" fg:w="1" fg:x="2772"/></g><g><title>_rjem_je_edata_heap_remove (1 samples, 0.02%)</title><rect width=".023%" height="15" x="63.871%" y="885" fill="#F7B50B" fg:w="1" fg:x="2772"/></g><g><title>ph_remove (1 samples, 0.02%)</title><rect width=".023%" height="15" x="63.871%" y="869" fill="#DEDF19" fg:w="1" fg:x="2772"/></g><g><title>ph_merge_children (1 samples, 0.02%)</title><rect width=".023%" height="15" x="63.871%" y="853" fill="#D6C61C" fg:w="1" fg:x="2772"/></g><g><title>phn_merge_siblings (1 samples, 0.02%)</title><rect width=".023%" height="15" x="63.871%" y="837" fill="#E62E2B" fg:w="1" fg:x="2772"/></g><g><title>phn_merge (1 samples, 0.02%)</title><rect width=".023%" height="15" x="63.871%" y="821" fill="#E94135" fg:w="1" fg:x="2772"/></g><g><title>edata_heap_ph_cmp (1 samples, 0.02%)</title><rect width=".023%" height="15" x="63.871%" y="805" fill="#DD791B" fg:w="1" fg:x="2772"/></g><g><title>edata_snad_comp (1 samples, 0.02%)</title><rect width=".023%" height="15" x="63.871%" y="789" fill="#F7462F" fg:w="1" fg:x="2772"/></g><g><title>edata_cmp_summary_comp (1 samples, 0.02%)</title><rect width=".023%" height="15" x="63.871%" y="773" fill="#E45523" fg:w="1" fg:x="2772"/></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;json_benchmark::copy::citm_catalog::SeatCategory&gt;&gt; (25 samples, 0.58%)</title><rect width=".576%" height="15" x="63.341%" y="1125" fill="#D13212" fg:w="25" fg:x="2749"/></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;json_benchmark::copy::citm_catalog::SeatCategory&gt;&gt; (2 samples, 0.05%)</title><rect width=".046%" height="15" x="63.871%" y="1109" fill="#FA1323" fg:w="2" fg:x="2772"/></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.05%)</title><rect width=".046%" height="15" x="63.871%" y="1093" fill="#FD6B1D" fg:w="2" fg:x="2772"/></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (2 samples, 0.05%)</title><rect width=".046%" height="15" x="63.871%" y="1077" fill="#FCB31D" fg:w="2" fg:x="2772"/></g><g><title>alloc::alloc::dealloc (2 samples, 0.05%)</title><rect width=".046%" height="15" x="63.871%" y="1061" fill="#EEC206" fg:w="2" fg:x="2772"/></g><g><title>__rust_dealloc (2 samples, 0.05%)</title><rect width=".046%" height="15" x="63.871%" y="1045" fill="#EEA41D" fg:w="2" fg:x="2772"/></g><g><title>&lt;jemallocator::Jemalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (2 samples, 0.05%)</title><rect width=".046%" height="15" x="63.871%" y="1029" fill="#E01909" fg:w="2" fg:x="2772"/></g><g><title>_rjem_je_sdallocx_default (2 samples, 0.05%)</title><rect width=".046%" height="15" x="63.871%" y="1013" fill="#F49917" fg:w="2" fg:x="2772"/></g><g><title>_rjem_je_tcache_bin_flush_small (2 samples, 0.05%)</title><rect width=".046%" height="15" x="63.871%" y="997" fill="#D4CB0E" fg:w="2" fg:x="2772"/></g><g><title>tcache_bin_flush_bottom (2 samples, 0.05%)</title><rect width=".046%" height="15" x="63.871%" y="981" fill="#DCA414" fg:w="2" fg:x="2772"/></g><g><title>tcache_bin_flush_impl (2 samples, 0.05%)</title><rect width=".046%" height="15" x="63.871%" y="965" fill="#DECB30" fg:w="2" fg:x="2772"/></g><g><title>tcache_bin_flush_edatas_lookup (1 samples, 0.02%)</title><rect width=".023%" height="15" x="63.894%" y="949" fill="#D79F16" fg:w="1" fg:x="2773"/></g><g><title>emap_edata_lookup_batch (1 samples, 0.02%)</title><rect width=".023%" height="15" x="63.894%" y="933" fill="#D8B72F" fg:w="1" fg:x="2773"/></g><g><title>rtree_leaf_elm_read (1 samples, 0.02%)</title><rect width=".023%" height="15" x="63.894%" y="917" fill="#E5C319" fg:w="1" fg:x="2773"/></g><g><title>rtree_leaf_elm_bits_decode (1 samples, 0.02%)</title><rect width=".023%" height="15" x="63.894%" y="901" fill="#E08433" fg:w="1" fg:x="2773"/></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;core::result::Result&lt;json_benchmark::copy::citm_catalog::CitmCatalog,simd_json::error::Error&gt;&gt;&gt; (61 samples, 1.41%)</title><rect width="1.405%" height="15" x="62.535%" y="1269" fill="#F03F07" fg:w="61" fg:x="2714"/></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (61 samples, 1.41%)</title><rect width="1.405%" height="15" x="62.535%" y="1253" fill="#F9B629" fg:w="61" fg:x="2714"/></g><g><title>core::ptr::drop_in_place&lt;[core::result::Result&lt;json_benchmark::copy::citm_catalog::CitmCatalog,simd_json::error::Error&gt;]&gt; (61 samples, 1.41%)</title><rect width="1.405%" height="15" x="62.535%" y="1237" fill="#F32F1A" fg:w="61" fg:x="2714"/></g><g><title>core::ptr::drop_in_place&lt;core::result::Result&lt;json_benchmark::copy::citm_catalog::CitmCatalog,simd_json::error::Error&gt;&gt; (61 samples, 1.41%)</title><rect width="1.405%" height="15" x="62.535%" y="1221" fill="#E93002" fg:w="61" fg:x="2714"/></g><g><title>core::ptr::drop_in_place&lt;json_benchmark::copy::citm_catalog::CitmCatalog&gt; (61 samples, 1.41%)</title><rect width="1.405%" height="15" x="62.535%" y="1205" fill="#F4A522" fg:w="61" fg:x="2714"/></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;json_benchmark::copy::citm_catalog::Performance&gt;&gt; (34 samples, 0.78%)</title><rect width=".783%" height="15" x="63.157%" y="1189" fill="#CF5907" fg:w="34" fg:x="2741"/></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (34 samples, 0.78%)</title><rect width=".783%" height="15" x="63.157%" y="1173" fill="#F47524" fg:w="34" fg:x="2741"/></g><g><title>core::ptr::drop_in_place&lt;[json_benchmark::copy::citm_catalog::Performance]&gt; (34 samples, 0.78%)</title><rect width=".783%" height="15" x="63.157%" y="1157" fill="#E29022" fg:w="34" fg:x="2741"/></g><g><title>core::ptr::drop_in_place&lt;json_benchmark::copy::citm_catalog::Performance&gt; (32 samples, 0.74%)</title><rect width=".737%" height="15" x="63.203%" y="1141" fill="#D51713" fg:w="32" fg:x="2743"/></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;alloc::string::String&gt;&gt; (1 samples, 0.02%)</title><rect width=".023%" height="15" x="63.917%" y="1125" fill="#D94B0C" fg:w="1" fg:x="2774"/></g><g><title>&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Routine&lt;M,T&gt;&gt;::bench (2,697 samples, 62.14%)</title><rect width="62.143%" height="15" x="1.82%" y="1493" fill="#E09F11" fg:w="2697" fg:x="79"/><text x="2.07%" y="1503.5">&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Routine&lt;M,T&gt;&gt;::bench</text></g><g><title>core::iter::traits::iterator::Iterator::collect (2,697 samples, 62.14%)</title><rect width="62.143%" height="15" x="1.82%" y="1477" fill="#D97601" fg:w="2697" fg:x="79"/><text x="2.07%" y="1487.5">core::iter::traits::iterator::Iterator::collect</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (2,697 samples, 62.14%)</title><rect width="62.143%" height="15" x="1.82%" y="1461" fill="#E8B430" fg:w="2697" fg:x="79"/><text x="2.07%" y="1471.5">&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2,697 samples, 62.14%)</title><rect width="62.143%" height="15" x="1.82%" y="1445" fill="#E61B21" fg:w="2697" fg:x="79"/><text x="2.07%" y="1455.5">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (2,697 samples, 62.14%)</title><rect width="62.143%" height="15" x="1.82%" y="1429" fill="#CD1F15" fg:w="2697" fg:x="79"/><text x="2.07%" y="1439.5">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (2,697 samples, 62.14%)</title><rect width="62.143%" height="15" x="1.82%" y="1413" fill="#FD3B04" fg:w="2697" fg:x="79"/><text x="2.07%" y="1423.5">&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend</text></g><g><title>?? (2,697 samples, 62.14%)</title><rect width="62.143%" height="15" x="1.82%" y="1397" fill="#E0C909" fg:w="2697" fg:x="79"/><text x="2.07%" y="1407.5">??</text></g><g><title>core::iter::traits::iterator::Iterator::for_each (2,697 samples, 62.14%)</title><rect width="62.143%" height="15" x="1.82%" y="1381" fill="#E5CE1E" fg:w="2697" fg:x="79"/><text x="2.07%" y="1391.5">core::iter::traits::iterator::Iterator::for_each</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2,697 samples, 62.14%)</title><rect width="62.143%" height="15" x="1.82%" y="1365" fill="#D4432F" fg:w="2697" fg:x="79"/><text x="2.07%" y="1375.5">&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2,697 samples, 62.14%)</title><rect width="62.143%" height="15" x="1.82%" y="1349" fill="#D36032" fg:w="2697" fg:x="79"/><text x="2.07%" y="1359.5">&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold</text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (2,697 samples, 62.14%)</title><rect width="62.143%" height="15" x="1.82%" y="1333" fill="#FC7212" fg:w="2697" fg:x="79"/><text x="2.07%" y="1343.5">core::iter::adapters::map::map_fold::_{{closure}}</text></g><g><title>&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Routine&lt;M,T&gt;&gt;::bench::_{{closure}} (2,697 samples, 62.14%)</title><rect width="62.143%" height="15" x="1.82%" y="1317" fill="#DF3A25" fg:w="2697" fg:x="79"/><text x="2.07%" y="1327.5">&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Routine&lt;M,T&gt;&gt;::bench::_{{closure}}</text></g><g><title>deserialize_struct::bench_citm_catalog_CitmCatalog::_{{closure}} (2,697 samples, 62.14%)</title><rect width="62.143%" height="15" x="1.82%" y="1301" fill="#ED4604" fg:w="2697" fg:x="79"/><text x="2.07%" y="1311.5">deserialize_struct::bench_citm_catalog_CitmCatalog::_{{closure}}</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter_batched (2,697 samples, 62.14%)</title><rect width="62.143%" height="15" x="1.82%" y="1285" fill="#F4552E" fg:w="2697" fg:x="79"/><text x="2.07%" y="1295.5">criterion::bencher::Bencher&lt;M&gt;::iter_batched</text></g><g><title>std::time::Instant::elapsed (1 samples, 0.02%)</title><rect width=".023%" height="15" x="63.94%" y="1269" fill="#DF2734" fg:w="1" fg:x="2775"/></g><g><title>&lt;std::time::Instant as core::ops::arith::Sub&gt;::sub (1 samples, 0.02%)</title><rect width=".023%" height="15" x="63.94%" y="1253" fill="#DAC80E" fg:w="1" fg:x="2775"/></g><g><title>std::time::Instant::duration_since (1 samples, 0.02%)</title><rect width=".023%" height="15" x="63.94%" y="1237" fill="#D0AB10" fg:w="1" fg:x="2775"/></g><g><title>std::time::Instant::checked_duration_since (1 samples, 0.02%)</title><rect width=".023%" height="15" x="63.94%" y="1221" fill="#EAC812" fg:w="1" fg:x="2775"/></g><g><title>std::sys::unix::time::inner::Instant::checked_sub_instant (1 samples, 0.02%)</title><rect width=".023%" height="15" x="63.94%" y="1205" fill="#E42D0B" fg:w="1" fg:x="2775"/></g><g><title>std::sys::unix::time::Timespec::sub_timespec (1 samples, 0.02%)</title><rect width=".023%" height="15" x="63.94%" y="1189" fill="#EDB60B" fg:w="1" fg:x="2775"/></g><g><title>_rjem_je_extent_dalloc_wrapper (1 samples, 0.02%)</title><rect width=".023%" height="15" x="63.986%" y="1093" fill="#F1AF31" fg:w="1" fg:x="2777"/></g><g><title>ehooks_purge_forced (1 samples, 0.02%)</title><rect width=".023%" height="15" x="63.986%" y="1077" fill="#F72623" fg:w="1" fg:x="2777"/></g><g><title>_rjem_je_pages_purge_forced (1 samples, 0.02%)</title><rect width=".023%" height="15" x="63.986%" y="1061" fill="#E42731" fg:w="1" fg:x="2777"/></g><g><title>__GI_madvise (1 samples, 0.02%)</title><rect width=".023%" height="15" x="63.986%" y="1045" fill="#E2651A" fg:w="1" fg:x="2777"/></g><g><title>extent_maximally_purge (2 samples, 0.05%)</title><rect width=".046%" height="15" x="63.986%" y="1109" fill="#CE8D13" fg:w="2" fg:x="2777"/></g><g><title>_rjem_je_extent_record (1 samples, 0.02%)</title><rect width=".023%" height="15" x="64.009%" y="1093" fill="#D3C80D" fg:w="1" fg:x="2778"/></g><g><title>malloc_mutex_lock (1 samples, 0.02%)</title><rect width=".023%" height="15" x="64.009%" y="1077" fill="#F17906" fg:w="1" fg:x="2778"/></g><g><title>malloc_mutex_trylock_final (1 samples, 0.02%)</title><rect width=".023%" height="15" x="64.009%" y="1061" fill="#EADD1D" fg:w="1" fg:x="2778"/></g><g><title>__GI___pthread_mutex_trylock (1 samples, 0.02%)</title><rect width=".023%" height="15" x="64.009%" y="1045" fill="#E58805" fg:w="1" fg:x="2778"/></g><g><title>_rjem_je_emap_try_acquire_edata_neighbor (1 samples, 0.02%)</title><rect width=".023%" height="15" x="64.032%" y="1077" fill="#EE240B" fg:w="1" fg:x="2779"/></g><g><title>emap_try_acquire_edata_neighbor_impl (1 samples, 0.02%)</title><rect width=".023%" height="15" x="64.032%" y="1061" fill="#FB3729" fg:w="1" fg:x="2779"/></g><g><title>rtree_leaf_elm_read (1 samples, 0.02%)</title><rect width=".023%" height="15" x="64.032%" y="1045" fill="#F22228" fg:w="1" fg:x="2779"/></g><g><title>rtree_leaf_elm_bits_decode (1 samples, 0.02%)</title><rect width=".023%" height="15" x="64.032%" y="1029" fill="#D72A11" fg:w="1" fg:x="2779"/></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (5 samples, 0.12%)</title><rect width=".115%" height="15" x="63.963%" y="1301" fill="#CF2C2E" fg:w="5" fg:x="2776"/></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (5 samples, 0.12%)</title><rect width=".115%" height="15" x="63.963%" y="1285" fill="#D3CE1C" fg:w="5" fg:x="2776"/></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.12%)</title><rect width=".115%" height="15" x="63.963%" y="1269" fill="#EDA710" fg:w="5" fg:x="2776"/></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (5 samples, 0.12%)</title><rect width=".115%" height="15" x="63.963%" y="1253" fill="#E94206" fg:w="5" fg:x="2776"/></g><g><title>alloc::alloc::dealloc (5 samples, 0.12%)</title><rect width=".115%" height="15" x="63.963%" y="1237" fill="#F67B1D" fg:w="5" fg:x="2776"/></g><g><title>__rust_dealloc (5 samples, 0.12%)</title><rect width=".115%" height="15" x="63.963%" y="1221" fill="#D13E28" fg:w="5" fg:x="2776"/></g><g><title>&lt;jemallocator::Jemalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (5 samples, 0.12%)</title><rect width=".115%" height="15" x="63.963%" y="1205" fill="#DA0419" fg:w="5" fg:x="2776"/></g><g><title>_rjem_je_sdallocx_default (5 samples, 0.12%)</title><rect width=".115%" height="15" x="63.963%" y="1189" fill="#FD5B31" fg:w="5" fg:x="2776"/></g><g><title>_rjem_je_large_dalloc (4 samples, 0.09%)</title><rect width=".092%" height="15" x="63.986%" y="1173" fill="#E49B1D" fg:w="4" fg:x="2777"/></g><g><title>large_dalloc_finish_impl (4 samples, 0.09%)</title><rect width=".092%" height="15" x="63.986%" y="1157" fill="#F33925" fg:w="4" fg:x="2777"/></g><g><title>pac_dalloc_impl (4 samples, 0.09%)</title><rect width=".092%" height="15" x="63.986%" y="1141" fill="#F4A711" fg:w="4" fg:x="2777"/></g><g><title>_rjem_je_extent_record (4 samples, 0.09%)</title><rect width=".092%" height="15" x="63.986%" y="1125" fill="#CFB526" fg:w="4" fg:x="2777"/></g><g><title>extent_try_coalesce_large (2 samples, 0.05%)</title><rect width=".046%" height="15" x="64.032%" y="1109" fill="#D30817" fg:w="2" fg:x="2779"/></g><g><title>extent_try_coalesce_impl (2 samples, 0.05%)</title><rect width=".046%" height="15" x="64.032%" y="1093" fill="#EB0B2C" fg:w="2" fg:x="2779"/></g><g><title>extent_coalesce (1 samples, 0.02%)</title><rect width=".023%" height="15" x="64.055%" y="1077" fill="#F81234" fg:w="1" fg:x="2780"/></g><g><title>_rjem_je_eset_remove (1 samples, 0.02%)</title><rect width=".023%" height="15" x="64.055%" y="1061" fill="#D00407" fg:w="1" fg:x="2780"/></g><g><title>eset_stats_sub (1 samples, 0.02%)</title><rect width=".023%" height="15" x="64.055%" y="1045" fill="#F01127" fg:w="1" fg:x="2780"/></g><g><title>atomic_store_zu (1 samples, 0.02%)</title><rect width=".023%" height="15" x="64.055%" y="1029" fill="#CFAA03" fg:w="1" fg:x="2780"/></g><g><title>large_dalloc_finish_impl (1 samples, 0.02%)</title><rect width=".023%" height="15" x="64.101%" y="1109" fill="#EC6434" fg:w="1" fg:x="2782"/></g><g><title>pac_dalloc_impl (1 samples, 0.02%)</title><rect width=".023%" height="15" x="64.101%" y="1093" fill="#F64E33" fg:w="1" fg:x="2782"/></g><g><title>_rjem_je_extent_record (1 samples, 0.02%)</title><rect width=".023%" height="15" x="64.101%" y="1077" fill="#D3110F" fg:w="1" fg:x="2782"/></g><g><title>extent_deactivate_locked (1 samples, 0.02%)</title><rect width=".023%" height="15" x="64.101%" y="1061" fill="#D13B2E" fg:w="1" fg:x="2782"/></g><g><title>extent_deactivate_locked_impl (1 samples, 0.02%)</title><rect width=".023%" height="15" x="64.101%" y="1045" fill="#D25C19" fg:w="1" fg:x="2782"/></g><g><title>_rjem_je_emap_update_edata_state (1 samples, 0.02%)</title><rect width=".023%" height="15" x="64.101%" y="1029" fill="#EEAE34" fg:w="1" fg:x="2782"/></g><g><title>edata_last_get (1 samples, 0.02%)</title><rect width=".023%" height="15" x="64.101%" y="1013" fill="#E64907" fg:w="1" fg:x="2782"/></g><g><title>core::ptr::drop_in_place&lt;simd_json::Deserializer&gt; (3 samples, 0.07%)</title><rect width=".069%" height="15" x="64.078%" y="1269" fill="#F37C28" fg:w="3" fg:x="2781"/></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;simd_json::value::tape::Node&gt;&gt; (3 samples, 0.07%)</title><rect width=".069%" height="15" x="64.078%" y="1253" fill="#F4AA0B" fg:w="3" fg:x="2781"/></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;simd_json::value::tape::Node&gt;&gt; (3 samples, 0.07%)</title><rect width=".069%" height="15" x="64.078%" y="1237" fill="#CF7236" fg:w="3" fg:x="2781"/></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.07%)</title><rect width=".069%" height="15" x="64.078%" y="1221" fill="#CD2A14" fg:w="3" fg:x="2781"/></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (3 samples, 0.07%)</title><rect width=".069%" height="15" x="64.078%" y="1205" fill="#E61E1C" fg:w="3" fg:x="2781"/></g><g><title>alloc::alloc::dealloc (3 samples, 0.07%)</title><rect width=".069%" height="15" x="64.078%" y="1189" fill="#CD4936" fg:w="3" fg:x="2781"/></g><g><title>__rust_dealloc (3 samples, 0.07%)</title><rect width=".069%" height="15" x="64.078%" y="1173" fill="#FEE317" fg:w="3" fg:x="2781"/></g><g><title>&lt;jemallocator::Jemalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (3 samples, 0.07%)</title><rect width=".069%" height="15" x="64.078%" y="1157" fill="#E4CA22" fg:w="3" fg:x="2781"/></g><g><title>_rjem_je_sdallocx_default (3 samples, 0.07%)</title><rect width=".069%" height="15" x="64.078%" y="1141" fill="#DEE125" fg:w="3" fg:x="2781"/></g><g><title>_rjem_je_large_dalloc (2 samples, 0.05%)</title><rect width=".046%" height="15" x="64.101%" y="1125" fill="#DD0E36" fg:w="2" fg:x="2782"/></g><g><title>large_dalloc_prep_impl (1 samples, 0.02%)</title><rect width=".023%" height="15" x="64.124%" y="1109" fill="#FE6602" fg:w="1" fg:x="2783"/></g><g><title>_rjem_je_arena_extent_dalloc_large_prep (1 samples, 0.02%)</title><rect width=".023%" height="15" x="64.124%" y="1093" fill="#E86811" fg:w="1" fg:x="2783"/></g><g><title>&lt;json_benchmark::prim_str::PrimStr&lt;T&gt; as core::cmp::Ord&gt;::cmp (1 samples, 0.02%)</title><rect width=".023%" height="15" x="64.217%" y="1045" fill="#FADC0E" fg:w="1" fg:x="2787"/></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for u32&gt;::cmp (1 samples, 0.02%)</title><rect width=".023%" height="15" x="64.217%" y="1029" fill="#F19E09" fg:w="1" fg:x="2787"/></g><g><title>alloc::boxed::Box&lt;T,A&gt;::new_uninit_in (1 samples, 0.02%)</title><rect width=".023%" height="15" x="64.24%" y="1029" fill="#F6092B" fg:w="1" fg:x="2788"/></g><g><title>alloc::boxed::Box&lt;T,A&gt;::try_new_uninit_in (1 samples, 0.02%)</title><rect width=".023%" height="15" x="64.24%" y="1013" fill="#CE4921" fg:w="1" fg:x="2788"/></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.02%)</title><rect width=".023%" height="15" x="64.24%" y="997" fill="#DE4F08" fg:w="1" fg:x="2788"/></g><g><title>?? (1 samples, 0.02%)</title><rect width=".023%" height="15" x="64.24%" y="981" fill="#EA0836" fg:w="1" fg:x="2788"/></g><g><title>alloc::alloc::alloc (1 samples, 0.02%)</title><rect width=".023%" height="15" x="64.24%" y="965" fill="#D18626" fg:w="1" fg:x="2788"/></g><g><title>__rust_alloc (1 samples, 0.02%)</title><rect width=".023%" height="15" x="64.24%" y="949" fill="#E67F1D" fg:w="1" fg:x="2788"/></g><g><title>&lt;jemallocator::Jemalloc as core::alloc::global::GlobalAlloc&gt;::alloc (1 samples, 0.02%)</title><rect width=".023%" height="15" x="64.24%" y="933" fill="#F22C29" fg:w="1" fg:x="2788"/></g><g><title>_rjem_je_malloc_default (1 samples, 0.02%)</title><rect width=".023%" height="15" x="64.24%" y="917" fill="#DE382B" fg:w="1" fg:x="2788"/></g><g><title>imalloc (1 samples, 0.02%)</title><rect width=".023%" height="15" x="64.24%" y="901" fill="#EE272F" fg:w="1" fg:x="2788"/></g><g><title>imalloc_body (1 samples, 0.02%)</title><rect width=".023%" height="15" x="64.24%" y="885" fill="#E24F2B" fg:w="1" fg:x="2788"/></g><g><title>imalloc_no_sample (1 samples, 0.02%)</title><rect width=".023%" height="15" x="64.24%" y="869" fill="#F26935" fg:w="1" fg:x="2788"/></g><g><title>iallocztm (1 samples, 0.02%)</title><rect width=".023%" height="15" x="64.24%" y="853" fill="#FB842E" fg:w="1" fg:x="2788"/></g><g><title>arena_malloc (1 samples, 0.02%)</title><rect width=".023%" height="15" x="64.24%" y="837" fill="#E74D0E" fg:w="1" fg:x="2788"/></g><g><title>tcache_alloc_small (1 samples, 0.02%)</title><rect width=".023%" height="15" x="64.24%" y="821" fill="#F08709" fg:w="1" fg:x="2788"/></g><g><title>_rjem_je_tcache_alloc_small_hard (1 samples, 0.02%)</title><rect width=".023%" height="15" x="64.24%" y="805" fill="#F86D0E" fg:w="1" fg:x="2788"/></g><g><title>_rjem_je_arena_cache_bin_fill_small (1 samples, 0.02%)</title><rect width=".023%" height="15" x="64.24%" y="789" fill="#E39234" fg:w="1" fg:x="2788"/></g><g><title>edata_nfree_get (1 samples, 0.02%)</title><rect width=".023%" height="15" x="64.24%" y="773" fill="#E83603" fg:w="1" fg:x="2788"/></g><g><title>?? (2 samples, 0.05%)</title><rect width=".046%" height="15" x="64.24%" y="1045" fill="#E5C92B" fg:w="2" fg:x="2788"/></g><g><title>alloc::collections::btree::node::move_to_slice (1 samples, 0.02%)</title><rect width=".023%" height="15" x="64.263%" y="1029" fill="#FCA121" fg:w="1" fg:x="2789"/></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.02%)</title><rect width=".023%" height="15" x="64.263%" y="1013" fill="#E29228" fg:w="1" fg:x="2789"/></g><g><title>__memmove_avx_unaligned_erms (1 samples, 0.02%)</title><rect width=".023%" height="15" x="64.263%" y="997" fill="#DB2F19" fg:w="1" fg:x="2789"/></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.02%)</title><rect width=".023%" height="15" x="64.286%" y="1029" fill="#FA870D" fg:w="1" fg:x="2790"/></g><g><title>?? (5 samples, 0.12%)</title><rect width=".115%" height="15" x="64.217%" y="1061" fill="#DBE512" fg:w="5" fg:x="2787"/></g><g><title>alloc::collections::btree::node::slice_insert (2 samples, 0.05%)</title><rect width=".046%" height="15" x="64.286%" y="1045" fill="#D9981B" fg:w="2" fg:x="2790"/></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (1 samples, 0.02%)</title><rect width=".023%" height="15" x="64.309%" y="1029" fill="#E1472F" fg:w="1" fg:x="2791"/></g><g><title>?? (7 samples, 0.16%)</title><rect width=".161%" height="15" x="64.217%" y="1077" fill="#DC8B0E" fg:w="7" fg:x="2787"/></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.05%)</title><rect width=".046%" height="15" x="64.332%" y="1061" fill="#F73620" fg:w="2" fg:x="2792"/></g><g><title>?? (8 samples, 0.18%)</title><rect width=".184%" height="15" x="64.217%" y="1093" fill="#FC8327" fg:w="8" fg:x="2787"/></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.02%)</title><rect width=".023%" height="15" x="64.378%" y="1077" fill="#D26C27" fg:w="1" fg:x="2794"/></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (9 samples, 0.21%)</title><rect width=".207%" height="15" x="64.217%" y="1125" fill="#CD171D" fg:w="9" fg:x="2787"/></g><g><title>?? (9 samples, 0.21%)</title><rect width=".207%" height="15" x="64.217%" y="1109" fill="#F68B2E" fg:w="9" fg:x="2787"/></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.02%)</title><rect width=".023%" height="15" x="64.401%" y="1093" fill="#FA511A" fg:w="1" fg:x="2795"/></g><g><title>&lt;simd_json::serde::de::CommaSeparated as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.02%)</title><rect width=".023%" height="15" x="64.447%" y="1013" fill="#D66807" fg:w="1" fg:x="2797"/></g><g><title>&lt;simd_json::serde::de::CommaSeparated as serde::de::MapAccess&gt;::next_key_seed (3 samples, 0.07%)</title><rect width=".069%" height="15" x="64.424%" y="1093" fill="#E9BD08" fg:w="3" fg:x="2796"/></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (2 samples, 0.05%)</title><rect width=".046%" height="15" x="64.447%" y="1077" fill="#E48D11" fg:w="2" fg:x="2797"/></g><g><title>&lt;json_benchmark::prim_str::PrimStr&lt;T&gt; as serde::de::Deserialize&gt;::deserialize (2 samples, 0.05%)</title><rect width=".046%" height="15" x="64.447%" y="1061" fill="#F79D01" fg:w="2" fg:x="2797"/></g><g><title>&lt;simd_json::serde::de::MapKey as serde::de::Deserializer&gt;::deserialize_str (2 samples, 0.05%)</title><rect width=".046%" height="15" x="64.447%" y="1045" fill="#F9E105" fg:w="2" fg:x="2797"/></g><g><title>&lt;simd_json::serde::de::MapKey as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.05%)</title><rect width=".046%" height="15" x="64.447%" y="1029" fill="#F2370D" fg:w="2" fg:x="2797"/></g><g><title>serde::de::Visitor::visit_borrowed_str (1 samples, 0.02%)</title><rect width=".023%" height="15" x="64.47%" y="1013" fill="#E63132" fg:w="1" fg:x="2798"/></g><g><title>&lt;&lt;json_benchmark::prim_str::PrimStr&lt;T&gt; as serde::de::Deserialize&gt;::deserialize::Visitor&lt;T&gt; as serde::de::Visitor&gt;::visit_str (1 samples, 0.02%)</title><rect width=".023%" height="15" x="64.47%" y="997" fill="#F16F26" fg:w="1" fg:x="2798"/></g><g><title>core::num::&lt;impl core::str::traits::FromStr for u32&gt;::from_str (1 samples, 0.02%)</title><rect width=".023%" height="15" x="64.47%" y="981" fill="#FC9B04" fg:w="1" fg:x="2798"/></g><g><title>core::num::from_str_radix (1 samples, 0.02%)</title><rect width=".023%" height="15" x="64.47%" y="965" fill="#D44520" fg:w="1" fg:x="2798"/></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.02%)</title><rect width=".023%" height="15" x="64.562%" y="1013" fill="#F36B2F" fg:w="1" fg:x="2802"/></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (7 samples, 0.16%)</title><rect width=".161%" height="15" x="64.585%" y="1013" fill="#F7820C" fg:w="7" fg:x="2803"/></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.02%)</title><rect width=".023%" height="15" x="64.793%" y="901" fill="#E94A10" fg:w="1" fg:x="2812"/></g><g><title>?? (2 samples, 0.05%)</title><rect width=".046%" height="15" x="64.793%" y="917" fill="#D03A12" fg:w="2" fg:x="2812"/></g><g><title>core::slice::&lt;impl [T]&gt;::get (1 samples, 0.02%)</title><rect width=".023%" height="15" x="64.816%" y="901" fill="#F2E101" fg:w="1" fg:x="2813"/></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (1 samples, 0.02%)</title><rect width=".023%" height="15" x="64.816%" y="885" fill="#F92728" fg:w="1" fg:x="2813"/></g><g><title>serde::de::MapAccess::next_key (14 samples, 0.32%)</title><rect width=".323%" height="15" x="64.746%" y="1013" fill="#CF482C" fg:w="14" fg:x="2810"/></g><g><title>&lt;simd_json::serde::de::CommaSeparated as serde::de::MapAccess&gt;::next_key_seed (14 samples, 0.32%)</title><rect width=".323%" height="15" x="64.746%" y="997" fill="#D7C10C" fg:w="14" fg:x="2810"/></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (14 samples, 0.32%)</title><rect width=".323%" height="15" x="64.746%" y="981" fill="#F82927" fg:w="14" fg:x="2810"/></g><g><title>&lt;json_benchmark::copy::citm_catalog::_::&lt;impl serde::de::Deserialize for json_benchmark::copy::citm_catalog::Event&gt;::deserialize::__Field as serde::de::Deserialize&gt;::deserialize (14 samples, 0.32%)</title><rect width=".323%" height="15" x="64.746%" y="965" fill="#FD5504" fg:w="14" fg:x="2810"/></g><g><title>&lt;simd_json::serde::de::MapKey as serde::de::Deserializer&gt;::deserialize_identifier (14 samples, 0.32%)</title><rect width=".323%" height="15" x="64.746%" y="949" fill="#F3461F" fg:w="14" fg:x="2810"/></g><g><title>&lt;simd_json::serde::de::MapKey as serde::de::Deserializer&gt;::deserialize_any (14 samples, 0.32%)</title><rect width=".323%" height="15" x="64.746%" y="933" fill="#FDC31A" fg:w="14" fg:x="2810"/></g><g><title>serde::de::Visitor::visit_borrowed_str (10 samples, 0.23%)</title><rect width=".23%" height="15" x="64.839%" y="917" fill="#F32A0B" fg:w="10" fg:x="2814"/></g><g><title>&lt;json_benchmark::copy::citm_catalog::_::&lt;impl serde::de::Deserialize for json_benchmark::copy::citm_catalog::Event&gt;::deserialize::__FieldVisitor as serde::de::Visitor&gt;::visit_str (10 samples, 0.23%)</title><rect width=".23%" height="15" x="64.839%" y="901" fill="#EF4211" fg:w="10" fg:x="2814"/></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (4 samples, 0.09%)</title><rect width=".092%" height="15" x="64.977%" y="885" fill="#D98415" fg:w="4" fg:x="2820"/></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (4 samples, 0.09%)</title><rect width=".092%" height="15" x="64.977%" y="869" fill="#FCCA15" fg:w="4" fg:x="2820"/></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (4 samples, 0.09%)</title><rect width=".092%" height="15" x="64.977%" y="853" fill="#E96224" fg:w="4" fg:x="2820"/></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (4 samples, 0.09%)</title><rect width=".092%" height="15" x="64.977%" y="837" fill="#D89936" fg:w="4" fg:x="2820"/></g><g><title>arena_slab_alloc (1 samples, 0.02%)</title><rect width=".023%" height="15" x="65.069%" y="549" fill="#FA6307" fg:w="1" fg:x="2824"/></g><g><title>_rjem_je_pa_alloc (1 samples, 0.02%)</title><rect width=".023%" height="15" x="65.069%" y="533" fill="#CF3832" fg:w="1" fg:x="2824"/></g><g><title>pai_alloc (1 samples, 0.02%)</title><rect width=".023%" height="15" x="65.069%" y="517" fill="#F43D22" fg:w="1" fg:x="2824"/></g><g><title>pac_alloc_impl (1 samples, 0.02%)</title><rect width=".023%" height="15" x="65.069%" y="501" fill="#F13226" fg:w="1" fg:x="2824"/></g><g><title>pac_alloc_real (1 samples, 0.02%)</title><rect width=".023%" height="15" x="65.069%" y="485" fill="#D4A61E" fg:w="1" fg:x="2824"/></g><g><title>_rjem_je_ecache_alloc (1 samples, 0.02%)</title><rect width=".023%" height="15" x="65.069%" y="469" fill="#F97F20" fg:w="1" fg:x="2824"/></g><g><title>extent_recycle (1 samples, 0.02%)</title><rect width=".023%" height="15" x="65.069%" y="453" fill="#D16700" fg:w="1" fg:x="2824"/></g><g><title>extent_recycle_split (1 samples, 0.02%)</title><rect width=".023%" height="15" x="65.069%" y="437" fill="#EED133" fg:w="1" fg:x="2824"/></g><g><title>extent_split_interior (1 samples, 0.02%)</title><rect width=".023%" height="15" x="65.069%" y="421" fill="#ED3817" fg:w="1" fg:x="2824"/></g><g><title>extent_split_impl (1 samples, 0.02%)</title><rect width=".023%" height="15" x="65.069%" y="405" fill="#D7992E" fg:w="1" fg:x="2824"/></g><g><title>_rjem_je_edata_cache_get (1 samples, 0.02%)</title><rect width=".023%" height="15" x="65.069%" y="389" fill="#E0311F" fg:w="1" fg:x="2824"/></g><g><title>_rjem_je_edata_avail_remove (1 samples, 0.02%)</title><rect width=".023%" height="15" x="65.069%" y="373" fill="#FA122A" fg:w="1" fg:x="2824"/></g><g><title>ph_remove (1 samples, 0.02%)</title><rect width=".023%" height="15" x="65.069%" y="357" fill="#D7B027" fg:w="1" fg:x="2824"/></g><g><title>ph_merge_children (1 samples, 0.02%)</title><rect width=".023%" height="15" x="65.069%" y="341" fill="#DF4D1D" fg:w="1" fg:x="2824"/></g><g><title>phn_merge_siblings (1 samples, 0.02%)</title><rect width=".023%" height="15" x="65.069%" y="325" fill="#EA5E34" fg:w="1" fg:x="2824"/></g><g><title>?? (2 samples, 0.05%)</title><rect width=".046%" height="15" x="65.069%" y="789" fill="#DC9A32" fg:w="2" fg:x="2824"/></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.05%)</title><rect width=".046%" height="15" x="65.069%" y="773" fill="#D40B0A" fg:w="2" fg:x="2824"/></g><g><title>?? (2 samples, 0.05%)</title><rect width=".046%" height="15" x="65.069%" y="757" fill="#CDA613" fg:w="2" fg:x="2824"/></g><g><title>alloc::alloc::alloc (2 samples, 0.05%)</title><rect width=".046%" height="15" x="65.069%" y="741" fill="#F4C610" fg:w="2" fg:x="2824"/></g><g><title>__rust_alloc (2 samples, 0.05%)</title><rect width=".046%" height="15" x="65.069%" y="725" fill="#DB450C" fg:w="2" fg:x="2824"/></g><g><title>&lt;jemallocator::Jemalloc as core::alloc::global::GlobalAlloc&gt;::alloc (2 samples, 0.05%)</title><rect width=".046%" height="15" x="65.069%" y="709" fill="#F51E07" fg:w="2" fg:x="2824"/></g><g><title>_rjem_je_malloc_default (2 samples, 0.05%)</title><rect width=".046%" height="15" x="65.069%" y="693" fill="#DADD30" fg:w="2" fg:x="2824"/></g><g><title>imalloc (2 samples, 0.05%)</title><rect width=".046%" height="15" x="65.069%" y="677" fill="#D8420F" fg:w="2" fg:x="2824"/></g><g><title>imalloc_body (2 samples, 0.05%)</title><rect width=".046%" height="15" x="65.069%" y="661" fill="#E27A32" fg:w="2" fg:x="2824"/></g><g><title>imalloc_no_sample (2 samples, 0.05%)</title><rect width=".046%" height="15" x="65.069%" y="645" fill="#EF9C10" fg:w="2" fg:x="2824"/></g><g><title>iallocztm (2 samples, 0.05%)</title><rect width=".046%" height="15" x="65.069%" y="629" fill="#E01B26" fg:w="2" fg:x="2824"/></g><g><title>arena_malloc (2 samples, 0.05%)</title><rect width=".046%" height="15" x="65.069%" y="613" fill="#E0271B" fg:w="2" fg:x="2824"/></g><g><title>tcache_alloc_small (2 samples, 0.05%)</title><rect width=".046%" height="15" x="65.069%" y="597" fill="#D75C1D" fg:w="2" fg:x="2824"/></g><g><title>_rjem_je_tcache_alloc_small_hard (2 samples, 0.05%)</title><rect width=".046%" height="15" x="65.069%" y="581" fill="#CF9F10" fg:w="2" fg:x="2824"/></g><g><title>_rjem_je_arena_cache_bin_fill_small (2 samples, 0.05%)</title><rect width=".046%" height="15" x="65.069%" y="565" fill="#EEA32F" fg:w="2" fg:x="2824"/></g><g><title>arena_slab_reg_alloc_batch (1 samples, 0.02%)</title><rect width=".023%" height="15" x="65.092%" y="549" fill="#DB5B31" fg:w="1" fg:x="2825"/></g><g><title>?? (3 samples, 0.07%)</title><rect width=".069%" height="15" x="65.069%" y="821" fill="#E3A71F" fg:w="3" fg:x="2824"/></g><g><title>?? (3 samples, 0.07%)</title><rect width=".069%" height="15" x="65.069%" y="805" fill="#EA5036" fg:w="3" fg:x="2824"/></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for alloc::string::String&gt;::deserialize (1 samples, 0.02%)</title><rect width=".023%" height="15" x="65.115%" y="789" fill="#D47202" fg:w="1" fg:x="2826"/></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for alloc::string::String&gt;::deserialize (4 samples, 0.09%)</title><rect width=".092%" height="15" x="65.069%" y="965" fill="#EA3218" fg:w="4" fg:x="2824"/></g><g><title>simd_json::serde::de::&lt;impl serde::de::Deserializer for &amp;mut simd_json::Deserializer&gt;::deserialize_string (4 samples, 0.09%)</title><rect width=".092%" height="15" x="65.069%" y="949" fill="#DD4408" fg:w="4" fg:x="2824"/></g><g><title>&lt;serde::de::impls::StringVisitor as serde::de::Visitor&gt;::visit_str (4 samples, 0.09%)</title><rect width=".092%" height="15" x="65.069%" y="933" fill="#FEB41F" fg:w="4" fg:x="2824"/></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (4 samples, 0.09%)</title><rect width=".092%" height="15" x="65.069%" y="917" fill="#F78232" fg:w="4" fg:x="2824"/></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (4 samples, 0.09%)</title><rect width=".092%" height="15" x="65.069%" y="901" fill="#D36D04" fg:w="4" fg:x="2824"/></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (4 samples, 0.09%)</title><rect width=".092%" height="15" x="65.069%" y="885" fill="#EE3215" fg:w="4" fg:x="2824"/></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (4 samples, 0.09%)</title><rect width=".092%" height="15" x="65.069%" y="869" fill="#E1392D" fg:w="4" fg:x="2824"/></g><g><title>alloc::slice::hack::to_vec (4 samples, 0.09%)</title><rect width=".092%" height="15" x="65.069%" y="853" fill="#D1C432" fg:w="4" fg:x="2824"/></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (4 samples, 0.09%)</title><rect width=".092%" height="15" x="65.069%" y="837" fill="#F28C0D" fg:w="4" fg:x="2824"/></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.02%)</title><rect width=".023%" height="15" x="65.138%" y="821" fill="#D96F07" fg:w="1" fg:x="2827"/></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.02%)</title><rect width=".023%" height="15" x="65.138%" y="805" fill="#FDC133" fg:w="1" fg:x="2827"/></g><g><title>__memmove_avx_unaligned_erms (1 samples, 0.02%)</title><rect width=".023%" height="15" x="65.138%" y="789" fill="#FC461D" fg:w="1" fg:x="2827"/></g><g><title>arena_slab_alloc (1 samples, 0.02%)</title><rect width=".023%" height="15" x="65.161%" y="629" fill="#E87F0C" fg:w="1" fg:x="2828"/></g><g><title>_rjem_je_pa_alloc (1 samples, 0.02%)</title><rect width=".023%" height="15" x="65.161%" y="613" fill="#D3B415" fg:w="1" fg:x="2828"/></g><g><title>pai_alloc (1 samples, 0.02%)</title><rect width=".023%" height="15" x="65.161%" y="597" fill="#E5480D" fg:w="1" fg:x="2828"/></g><g><title>pac_alloc_impl (1 samples, 0.02%)</title><rect width=".023%" height="15" x="65.161%" y="581" fill="#F0D331" fg:w="1" fg:x="2828"/></g><g><title>pac_alloc_real (1 samples, 0.02%)</title><rect width=".023%" height="15" x="65.161%" y="565" fill="#DB9528" fg:w="1" fg:x="2828"/></g><g><title>_rjem_je_ecache_alloc (1 samples, 0.02%)</title><rect width=".023%" height="15" x="65.161%" y="549" fill="#D27F2E" fg:w="1" fg:x="2828"/></g><g><title>extent_recycle (1 samples, 0.02%)</title><rect width=".023%" height="15" x="65.161%" y="533" fill="#DC6A07" fg:w="1" fg:x="2828"/></g><g><title>extent_recycle_split (1 samples, 0.02%)</title><rect width=".023%" height="15" x="65.161%" y="517" fill="#F91F16" fg:w="1" fg:x="2828"/></g><g><title>extent_split_interior (1 samples, 0.02%)</title><rect width=".023%" height="15" x="65.161%" y="501" fill="#FD0131" fg:w="1" fg:x="2828"/></g><g><title>extent_split_impl (1 samples, 0.02%)</title><rect width=".023%" height="15" x="65.161%" y="485" fill="#E39021" fg:w="1" fg:x="2828"/></g><g><title>_rjem_je_edata_cache_get (1 samples, 0.02%)</title><rect width=".023%" height="15" x="65.161%" y="469" fill="#F9A32C" fg:w="1" fg:x="2828"/></g><g><title>_rjem_je_edata_avail_remove (1 samples, 0.02%)</title><rect width=".023%" height="15" x="65.161%" y="453" fill="#EA0F27" fg:w="1" fg:x="2828"/></g><g><title>ph_remove (1 samples, 0.02%)</title><rect width=".023%" height="15" x="65.161%" y="437" fill="#CF4210" fg:w="1" fg:x="2828"/></g><g><title>ph_merge_children (1 samples, 0.02%)</title><rect width=".023%" height="15" x="65.161%" y="421" fill="#E97018" fg:w="1" fg:x="2828"/></g><g><title>phn_merge_siblings (1 samples, 0.02%)</title><rect width=".023%" height="15" x="65.161%" y="405" fill="#E65A16" fg:w="1" fg:x="2828"/></g><g><title>_rjem_je_malloc_default (2 samples, 0.05%)</title><rect width=".046%" height="15" x="65.161%" y="773" fill="#E53D0D" fg:w="2" fg:x="2828"/></g><g><title>imalloc (2 samples, 0.05%)</title><rect width=".046%" height="15" x="65.161%" y="757" fill="#E13918" fg:w="2" fg:x="2828"/></g><g><title>imalloc_body (2 samples, 0.05%)</title><rect width=".046%" height="15" x="65.161%" y="741" fill="#D0A930" fg:w="2" fg:x="2828"/></g><g><title>imalloc_no_sample (2 samples, 0.05%)</title><rect width=".046%" height="15" x="65.161%" y="725" fill="#F4DA33" fg:w="2" fg:x="2828"/></g><g><title>iallocztm (2 samples, 0.05%)</title><rect width=".046%" height="15" x="65.161%" y="709" fill="#D6940A" fg:w="2" fg:x="2828"/></g><g><title>arena_malloc (2 samples, 0.05%)</title><rect width=".046%" height="15" x="65.161%" y="693" fill="#E1AE1B" fg:w="2" fg:x="2828"/></g><g><title>tcache_alloc_small (2 samples, 0.05%)</title><rect width=".046%" height="15" x="65.161%" y="677" fill="#E6601A" fg:w="2" fg:x="2828"/></g><g><title>_rjem_je_tcache_alloc_small_hard (2 samples, 0.05%)</title><rect width=".046%" height="15" x="65.161%" y="661" fill="#E80A1E" fg:w="2" fg:x="2828"/></g><g><title>_rjem_je_arena_cache_bin_fill_small (2 samples, 0.05%)</title><rect width=".046%" height="15" x="65.161%" y="645" fill="#DE0832" fg:w="2" fg:x="2828"/></g><g><title>arena_slab_reg_alloc_batch (1 samples, 0.02%)</title><rect width=".023%" height="15" x="65.184%" y="629" fill="#D5511B" fg:w="1" fg:x="2829"/></g><g><title>_rjem_malloc (1 samples, 0.02%)</title><rect width=".023%" height="15" x="65.207%" y="757" fill="#F5320A" fg:w="1" fg:x="2830"/></g><g><title>?? (4 samples, 0.09%)</title><rect width=".092%" height="15" x="65.161%" y="917" fill="#D86412" fg:w="4" fg:x="2828"/></g><g><title>?? (4 samples, 0.09%)</title><rect width=".092%" height="15" x="65.161%" y="901" fill="#EC9336" fg:w="4" fg:x="2828"/></g><g><title>?? (4 samples, 0.09%)</title><rect width=".092%" height="15" x="65.161%" y="885" fill="#CD8F1A" fg:w="4" fg:x="2828"/></g><g><title>?? (4 samples, 0.09%)</title><rect width=".092%" height="15" x="65.161%" y="869" fill="#EC1A09" fg:w="4" fg:x="2828"/></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (4 samples, 0.09%)</title><rect width=".092%" height="15" x="65.161%" y="853" fill="#DDA535" fg:w="4" fg:x="2828"/></g><g><title>?? (4 samples, 0.09%)</title><rect width=".092%" height="15" x="65.161%" y="837" fill="#D66E11" fg:w="4" fg:x="2828"/></g><g><title>alloc::alloc::alloc (4 samples, 0.09%)</title><rect width=".092%" height="15" x="65.161%" y="821" fill="#EDC50C" fg:w="4" fg:x="2828"/></g><g><title>__rust_alloc (4 samples, 0.09%)</title><rect width=".092%" height="15" x="65.161%" y="805" fill="#CD5411" fg:w="4" fg:x="2828"/></g><g><title>&lt;jemallocator::Jemalloc as core::alloc::global::GlobalAlloc&gt;::alloc (4 samples, 0.09%)</title><rect width=".092%" height="15" x="65.161%" y="789" fill="#ED122D" fg:w="4" fg:x="2828"/></g><g><title>_rjem_malloc (2 samples, 0.05%)</title><rect width=".046%" height="15" x="65.207%" y="773" fill="#DD570E" fg:w="2" fg:x="2830"/></g><g><title>imalloc_fastpath (1 samples, 0.02%)</title><rect width=".023%" height="15" x="65.23%" y="757" fill="#EEBA0F" fg:w="1" fg:x="2831"/></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize (5 samples, 0.12%)</title><rect width=".115%" height="15" x="65.161%" y="965" fill="#D0730B" fg:w="5" fg:x="2828"/></g><g><title>simd_json::serde::de::&lt;impl serde::de::Deserializer for &amp;mut simd_json::Deserializer&gt;::deserialize_seq (5 samples, 0.12%)</title><rect width=".115%" height="15" x="65.161%" y="949" fill="#FEAF00" fg:w="5" fg:x="2828"/></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (5 samples, 0.12%)</title><rect width=".115%" height="15" x="65.161%" y="933" fill="#E3182A" fg:w="5" fg:x="2828"/></g><g><title>serde::de::SeqAccess::next_element (1 samples, 0.02%)</title><rect width=".023%" height="15" x="65.254%" y="917" fill="#DFD325" fg:w="1" fg:x="2832"/></g><g><title>&lt;simd_json::serde::de::CommaSeparated as serde::de::SeqAccess&gt;::next_element_seed (1 samples, 0.02%)</title><rect width=".023%" height="15" x="65.254%" y="901" fill="#EB311B" fg:w="1" fg:x="2832"/></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.02%)</title><rect width=".023%" height="15" x="65.254%" y="885" fill="#FE6133" fg:w="1" fg:x="2832"/></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u32&gt;::deserialize (1 samples, 0.02%)</title><rect width=".023%" height="15" x="65.254%" y="869" fill="#F93328" fg:w="1" fg:x="2832"/></g><g><title>simd_json::serde::de::&lt;impl serde::de::Deserializer for &amp;mut simd_json::Deserializer&gt;::deserialize_u32 (1 samples, 0.02%)</title><rect width=".023%" height="15" x="65.254%" y="853" fill="#D2802D" fg:w="1" fg:x="2832"/></g><g><title>?? (1 samples, 0.02%)</title><rect width=".023%" height="15" x="65.254%" y="837" fill="#E08932" fg:w="1" fg:x="2832"/></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.02%)</title><rect width=".023%" height="15" x="65.254%" y="821" fill="#F20F09" fg:w="1" fg:x="2832"/></g><g><title>?? (1 samples, 0.02%)</title><rect width=".023%" height="15" x="65.276%" y="773" fill="#E9BB29" fg:w="1" fg:x="2833"/></g><g><title>?? (1 samples, 0.02%)</title><rect width=".023%" height="15" x="65.276%" y="757" fill="#E3021D" fg:w="1" fg:x="2833"/></g><g><title>?? (1 samples, 0.02%)</title><rect width=".023%" height="15" x="65.276%" y="741" fill="#DE4603" fg:w="1" fg:x="2833"/></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.02%)</title><rect width=".023%" height="15" x="65.276%" y="725" fill="#D50B2A" fg:w="1" fg:x="2833"/></g><g><title>?? (1 samples, 0.02%)</title><rect width=".023%" height="15" x="65.276%" y="709" fill="#E19609" fg:w="1" fg:x="2833"/></g><g><title>alloc::alloc::alloc (1 samples, 0.02%)</title><rect width=".023%" height="15" x="65.276%" y="693" fill="#E6A22D" fg:w="1" fg:x="2833"/></g><g><title>__rust_alloc (1 samples, 0.02%)</title><rect width=".023%" height="15" x="65.276%" y="677" fill="#DE0E34" fg:w="1" fg:x="2833"/></g><g><title>&lt;jemallocator::Jemalloc as core::alloc::global::GlobalAlloc&gt;::alloc (1 samples, 0.02%)</title><rect width=".023%" height="15" x="65.276%" y="661" fill="#FEC60E" fg:w="1" fg:x="2833"/></g><g><title>_rjem_malloc (1 samples, 0.02%)</title><rect width=".023%" height="15" x="65.276%" y="645" fill="#DCD91E" fg:w="1" fg:x="2833"/></g><g><title>&lt;serde::de::impls::OptionVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_some (2 samples, 0.05%)</title><rect width=".046%" height="15" x="65.276%" y="933" fill="#D79229" fg:w="2" fg:x="2833"/></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for alloc::string::String&gt;::deserialize (2 samples, 0.05%)</title><rect width=".046%" height="15" x="65.276%" y="917" fill="#D91B24" fg:w="2" fg:x="2833"/></g><g><title>simd_json::serde::de::&lt;impl serde::de::Deserializer for &amp;mut simd_json::Deserializer&gt;::deserialize_string (2 samples, 0.05%)</title><rect width=".046%" height="15" x="65.276%" y="901" fill="#DBDA27" fg:w="2" fg:x="2833"/></g><g><title>&lt;serde::de::impls::StringVisitor as serde::de::Visitor&gt;::visit_str (2 samples, 0.05%)</title><rect width=".046%" height="15" x="65.276%" y="885" fill="#DB042A" fg:w="2" fg:x="2833"/></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (2 samples, 0.05%)</title><rect width=".046%" height="15" x="65.276%" y="869" fill="#F97724" fg:w="2" fg:x="2833"/></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (2 samples, 0.05%)</title><rect width=".046%" height="15" x="65.276%" y="853" fill="#D11721" fg:w="2" fg:x="2833"/></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (2 samples, 0.05%)</title><rect width=".046%" height="15" x="65.276%" y="837" fill="#D30A00" fg:w="2" fg:x="2833"/></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2 samples, 0.05%)</title><rect width=".046%" height="15" x="65.276%" y="821" fill="#D06325" fg:w="2" fg:x="2833"/></g><g><title>alloc::slice::hack::to_vec (2 samples, 0.05%)</title><rect width=".046%" height="15" x="65.276%" y="805" fill="#D5841F" fg:w="2" fg:x="2833"/></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2 samples, 0.05%)</title><rect width=".046%" height="15" x="65.276%" y="789" fill="#F38128" fg:w="2" fg:x="2833"/></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.02%)</title><rect width=".023%" height="15" x="65.299%" y="773" fill="#D24221" fg:w="1" fg:x="2834"/></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.02%)</title><rect width=".023%" height="15" x="65.299%" y="757" fill="#D1BD04" fg:w="1" fg:x="2834"/></g><g><title>__memmove_avx_unaligned_erms (1 samples, 0.02%)</title><rect width=".023%" height="15" x="65.299%" y="741" fill="#D66B25" fg:w="1" fg:x="2834"/></g><g><title>json_benchmark::copy::citm_catalog::_::&lt;impl serde::de::Deserialize for json_benchmark::copy::citm_catalog::Event&gt;::deserialize (37 samples, 0.85%)</title><rect width=".853%" height="15" x="64.493%" y="1061" fill="#F55836" fg:w="37" fg:x="2799"/></g><g><title>simd_json::serde::de::&lt;impl serde::de::Deserializer for &amp;mut simd_json::Deserializer&gt;::deserialize_struct (37 samples, 0.85%)</title><rect width=".853%" height="15" x="64.493%" y="1045" fill="#CD9214" fg:w="37" fg:x="2799"/></g><g><title>&lt;json_benchmark::copy::citm_catalog::_::&lt;impl serde::de::Deserialize for json_benchmark::copy::citm_catalog::Event&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_map (37 samples, 0.85%)</title><rect width=".853%" height="15" x="64.493%" y="1029" fill="#DCA119" fg:w="37" fg:x="2799"/></g><g><title>serde::de::MapAccess::next_value (12 samples, 0.28%)</title><rect width=".277%" height="15" x="65.069%" y="1013" fill="#D7980F" fg:w="12" fg:x="2824"/></g><g><title>&lt;simd_json::serde::de::CommaSeparated as serde::de::MapAccess&gt;::next_value_seed (12 samples, 0.28%)</title><rect width=".277%" height="15" x="65.069%" y="997" fill="#E9C02C" fg:w="12" fg:x="2824"/></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (12 samples, 0.28%)</title><rect width=".277%" height="15" x="65.069%" y="981" fill="#F0AA2E" fg:w="12" fg:x="2824"/></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for core::option::Option&lt;T&gt;&gt;::deserialize (3 samples, 0.07%)</title><rect width=".069%" height="15" x="65.276%" y="965" fill="#CF6821" fg:w="3" fg:x="2833"/></g><g><title>simd_json::serde::de::&lt;impl serde::de::Deserializer for &amp;mut simd_json::Deserializer&gt;::deserialize_option (3 samples, 0.07%)</title><rect width=".069%" height="15" x="65.276%" y="949" fill="#DB1527" fg:w="3" fg:x="2833"/></g><g><title>?? (1 samples, 0.02%)</title><rect width=".023%" height="15" x="65.323%" y="933" fill="#D6851D" fg:w="1" fg:x="2835"/></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.02%)</title><rect width=".023%" height="15" x="65.323%" y="917" fill="#E25D06" fg:w="1" fg:x="2835"/></g><g><title>_rjem_je_malloc_default (1 samples, 0.02%)</title><rect width=".023%" height="15" x="65.369%" y="789" fill="#FCDE22" fg:w="1" fg:x="2837"/></g><g><title>imalloc (1 samples, 0.02%)</title><rect width=".023%" height="15" x="65.369%" y="773" fill="#FC5C30" fg:w="1" fg:x="2837"/></g><g><title>imalloc_body (1 samples, 0.02%)</title><rect width=".023%" height="15" x="65.369%" y="757" fill="#F5DF18" fg:w="1" fg:x="2837"/></g><g><title>imalloc_no_sample (1 samples, 0.02%)</title><rect width=".023%" height="15" x="65.369%" y="741" fill="#CDB003" fg:w="1" fg:x="2837"/></g><g><title>iallocztm (1 samples, 0.02%)</title><rect width=".023%" height="15" x="65.369%" y="725" fill="#EB970F" fg:w="1" fg:x="2837"/></g><g><title>arena_malloc (1 samples, 0.02%)</title><rect width=".023%" height="15" x="65.369%" y="709" fill="#EDD10B" fg:w="1" fg:x="2837"/></g><g><title>tcache_alloc_small (1 samples, 0.02%)</title><rect width=".023%" height="15" x="65.369%" y="693" fill="#F3E318" fg:w="1" fg:x="2837"/></g><g><title>arena_choose (1 samples, 0.02%)</title><rect width=".023%" height="15" x="65.369%" y="677" fill="#EFC110" fg:w="1" fg:x="2837"/></g><g><title>cache_bin_alloc (1 samples, 0.02%)</title><rect width=".023%" height="15" x="65.392%" y="757" fill="#E71B09" fg:w="1" fg:x="2838"/></g><g><title>cache_bin_alloc_impl (1 samples, 0.02%)</title><rect width=".023%" height="15" x="65.392%" y="741" fill="#DBA90A" fg:w="1" fg:x="2838"/></g><g><title>?? (4 samples, 0.09%)</title><rect width=".092%" height="15" x="65.369%" y="917" fill="#F4E52B" fg:w="4" fg:x="2837"/></g><g><title>?? (4 samples, 0.09%)</title><rect width=".092%" height="15" x="65.369%" y="901" fill="#FE2614" fg:w="4" fg:x="2837"/></g><g><title>?? (4 samples, 0.09%)</title><rect width=".092%" height="15" x="65.369%" y="885" fill="#FA2F1E" fg:w="4" fg:x="2837"/></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (4 samples, 0.09%)</title><rect width=".092%" height="15" x="65.369%" y="869" fill="#E07C24" fg:w="4" fg:x="2837"/></g><g><title>?? (4 samples, 0.09%)</title><rect width=".092%" height="15" x="65.369%" y="853" fill="#F64433" fg:w="4" fg:x="2837"/></g><g><title>alloc::alloc::alloc (4 samples, 0.09%)</title><rect width=".092%" height="15" x="65.369%" y="837" fill="#FD2B31" fg:w="4" fg:x="2837"/></g><g><title>__rust_alloc (4 samples, 0.09%)</title><rect width=".092%" height="15" x="65.369%" y="821" fill="#DB3624" fg:w="4" fg:x="2837"/></g><g><title>&lt;jemallocator::Jemalloc as core::alloc::global::GlobalAlloc&gt;::alloc (4 samples, 0.09%)</title><rect width=".092%" height="15" x="65.369%" y="805" fill="#E38522" fg:w="4" fg:x="2837"/></g><g><title>_rjem_malloc (3 samples, 0.07%)</title><rect width=".069%" height="15" x="65.392%" y="789" fill="#F7E30F" fg:w="3" fg:x="2838"/></g><g><title>imalloc_fastpath (3 samples, 0.07%)</title><rect width=".069%" height="15" x="65.392%" y="773" fill="#E5600E" fg:w="3" fg:x="2838"/></g><g><title>cache_bin_alloc_easy (2 samples, 0.05%)</title><rect width=".046%" height="15" x="65.415%" y="757" fill="#DC4F11" fg:w="2" fg:x="2839"/></g><g><title>cache_bin_alloc_impl (2 samples, 0.05%)</title><rect width=".046%" height="15" x="65.415%" y="741" fill="#CD8335" fg:w="2" fg:x="2839"/></g><g><title>&lt;serde::de::impls::StringVisitor as serde::de::Visitor&gt;::visit_str (6 samples, 0.14%)</title><rect width=".138%" height="15" x="65.369%" y="1029" fill="#D1321D" fg:w="6" fg:x="2837"/></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (6 samples, 0.14%)</title><rect width=".138%" height="15" x="65.369%" y="1013" fill="#F5562E" fg:w="6" fg:x="2837"/></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (6 samples, 0.14%)</title><rect width=".138%" height="15" x="65.369%" y="997" fill="#EB422E" fg:w="6" fg:x="2837"/></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (6 samples, 0.14%)</title><rect width=".138%" height="15" x="65.369%" y="981" fill="#E8941F" fg:w="6" fg:x="2837"/></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (6 samples, 0.14%)</title><rect width=".138%" height="15" x="65.369%" y="965" fill="#D99508" fg:w="6" fg:x="2837"/></g><g><title>alloc::slice::hack::to_vec (6 samples, 0.14%)</title><rect width=".138%" height="15" x="65.369%" y="949" fill="#D1B70B" fg:w="6" fg:x="2837"/></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (6 samples, 0.14%)</title><rect width=".138%" height="15" x="65.369%" y="933" fill="#D03714" fg:w="6" fg:x="2837"/></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (2 samples, 0.05%)</title><rect width=".046%" height="15" x="65.461%" y="917" fill="#DA270E" fg:w="2" fg:x="2841"/></g><g><title>core::intrinsics::copy_nonoverlapping (2 samples, 0.05%)</title><rect width=".046%" height="15" x="65.461%" y="901" fill="#D8A921" fg:w="2" fg:x="2841"/></g><g><title>__memmove_avx_unaligned_erms (2 samples, 0.05%)</title><rect width=".046%" height="15" x="65.461%" y="885" fill="#E95018" fg:w="2" fg:x="2841"/></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for alloc::string::String&gt;::deserialize (8 samples, 0.18%)</title><rect width=".184%" height="15" x="65.346%" y="1061" fill="#D5B31F" fg:w="8" fg:x="2836"/></g><g><title>simd_json::serde::de::&lt;impl serde::de::Deserializer for &amp;mut simd_json::Deserializer&gt;::deserialize_string (7 samples, 0.16%)</title><rect width=".161%" height="15" x="65.369%" y="1045" fill="#D11305" fg:w="7" fg:x="2837"/></g><g><title>?? (1 samples, 0.02%)</title><rect width=".023%" height="15" x="65.507%" y="1029" fill="#DB1223" fg:w="1" fg:x="2843"/></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for alloc::string::String&gt;::deserialize (1 samples, 0.02%)</title><rect width=".023%" height="15" x="65.507%" y="1013" fill="#D1A910" fg:w="1" fg:x="2843"/></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::collections::btree::map::BTreeMap&lt;K,V&gt;&gt;::deserialize::MapVisitor&lt;K,V&gt; as serde::de::Visitor&gt;::visit_map (59 samples, 1.36%)</title><rect width="1.359%" height="15" x="64.194%" y="1141" fill="#F55A33" fg:w="59" fg:x="2786"/></g><g><title>serde::de::MapAccess::next_entry (49 samples, 1.13%)</title><rect width="1.129%" height="15" x="64.424%" y="1125" fill="#DC632D" fg:w="49" fg:x="2796"/></g><g><title>serde::de::MapAccess::next_entry_seed (49 samples, 1.13%)</title><rect width="1.129%" height="15" x="64.424%" y="1109" fill="#F95919" fg:w="49" fg:x="2796"/></g><g><title>&lt;simd_json::serde::de::CommaSeparated as serde::de::MapAccess&gt;::next_value_seed (46 samples, 1.06%)</title><rect width="1.06%" height="15" x="64.493%" y="1093" fill="#EFC100" fg:w="46" fg:x="2799"/></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (46 samples, 1.06%)</title><rect width="1.06%" height="15" x="64.493%" y="1077" fill="#E77E01" fg:w="46" fg:x="2799"/></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize (1 samples, 0.02%)</title><rect width=".023%" height="15" x="65.53%" y="1061" fill="#F3A603" fg:w="1" fg:x="2844"/></g><g><title>simd_json::serde::de::&lt;impl serde::de::Deserializer for &amp;mut simd_json::Deserializer&gt;::deserialize_seq (1 samples, 0.02%)</title><rect width=".023%" height="15" x="65.53%" y="1045" fill="#DF1622" fg:w="1" fg:x="2844"/></g><g><title>?? (1 samples, 0.02%)</title><rect width=".023%" height="15" x="65.53%" y="1029" fill="#FB3433" fg:w="1" fg:x="2844"/></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.02%)</title><rect width=".023%" height="15" x="65.53%" y="1013" fill="#DDA51C" fg:w="1" fg:x="2844"/></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for alloc::collections::btree::map::BTreeMap&lt;K,V&gt;&gt;::deserialize (60 samples, 1.38%)</title><rect width="1.383%" height="15" x="64.194%" y="1173" fill="#DA792F" fg:w="60" fg:x="2786"/></g><g><title>simd_json::serde::de::&lt;impl serde::de::Deserializer for &amp;mut simd_json::Deserializer&gt;::deserialize_map (60 samples, 1.38%)</title><rect width="1.383%" height="15" x="64.194%" y="1157" fill="#D17809" fg:w="60" fg:x="2786"/></g><g><title>?? (1 samples, 0.02%)</title><rect width=".023%" height="15" x="65.553%" y="1141" fill="#EC440C" fg:w="1" fg:x="2845"/></g><g><title>core::slice::&lt;impl [T]&gt;::get (1 samples, 0.02%)</title><rect width=".023%" height="15" x="65.553%" y="1125" fill="#E1C21A" fg:w="1" fg:x="2845"/></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (1 samples, 0.02%)</title><rect width=".023%" height="15" x="65.553%" y="1109" fill="#E75427" fg:w="1" fg:x="2845"/></g><g><title>?? (1 samples, 0.02%)</title><rect width=".023%" height="15" x="65.576%" y="1109" fill="#D20B2D" fg:w="1" fg:x="2846"/></g><g><title>?? (1 samples, 0.02%)</title><rect width=".023%" height="15" x="65.576%" y="1093" fill="#E03634" fg:w="1" fg:x="2846"/></g><g><title>?? (1 samples, 0.02%)</title><rect width=".023%" height="15" x="65.576%" y="1077" fill="#EE660E" fg:w="1" fg:x="2846"/></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.02%)</title><rect width=".023%" height="15" x="65.576%" y="1061" fill="#F3A034" fg:w="1" fg:x="2846"/></g><g><title>?? (1 samples, 0.02%)</title><rect width=".023%" height="15" x="65.576%" y="1045" fill="#D87213" fg:w="1" fg:x="2846"/></g><g><title>alloc::alloc::alloc (1 samples, 0.02%)</title><rect width=".023%" height="15" x="65.576%" y="1029" fill="#F4A625" fg:w="1" fg:x="2846"/></g><g><title>__rust_alloc (1 samples, 0.02%)</title><rect width=".023%" height="15" x="65.576%" y="1013" fill="#F61D2C" fg:w="1" fg:x="2846"/></g><g><title>&lt;jemallocator::Jemalloc as core::alloc::global::GlobalAlloc&gt;::alloc (1 samples, 0.02%)</title><rect width=".023%" height="15" x="65.576%" y="997" fill="#D73835" fg:w="1" fg:x="2846"/></g><g><title>_rjem_je_malloc_default (1 samples, 0.02%)</title><rect width=".023%" height="15" x="65.576%" y="981" fill="#D93C02" fg:w="1" fg:x="2846"/></g><g><title>imalloc (1 samples, 0.02%)</title><rect width=".023%" height="15" x="65.576%" y="965" fill="#CF1A18" fg:w="1" fg:x="2846"/></g><g><title>imalloc_body (1 samples, 0.02%)</title><rect width=".023%" height="15" x="65.576%" y="949" fill="#FCD20F" fg:w="1" fg:x="2846"/></g><g><title>imalloc_no_sample (1 samples, 0.02%)</title><rect width=".023%" height="15" x="65.576%" y="933" fill="#FDD11A" fg:w="1" fg:x="2846"/></g><g><title>iallocztm (1 samples, 0.02%)</title><rect width=".023%" height="15" x="65.576%" y="917" fill="#EEAA0E" fg:w="1" fg:x="2846"/></g><g><title>arena_malloc (1 samples, 0.02%)</title><rect width=".023%" height="15" x="65.576%" y="901" fill="#D8B20F" fg:w="1" fg:x="2846"/></g><g><title>tcache_alloc_large (1 samples, 0.02%)</title><rect width=".023%" height="15" x="65.576%" y="885" fill="#FAC502" fg:w="1" fg:x="2846"/></g><g><title>_rjem_je_large_palloc (1 samples, 0.02%)</title><rect width=".023%" height="15" x="65.576%" y="869" fill="#D4462A" fg:w="1" fg:x="2846"/></g><g><title>_rjem_je_arena_extent_alloc_large (1 samples, 0.02%)</title><rect width=".023%" height="15" x="65.576%" y="853" fill="#E3D509" fg:w="1" fg:x="2846"/></g><g><title>_rjem_je_pa_alloc (1 samples, 0.02%)</title><rect width=".023%" height="15" x="65.576%" y="837" fill="#F56319" fg:w="1" fg:x="2846"/></g><g><title>pai_alloc (1 samples, 0.02%)</title><rect width=".023%" height="15" x="65.576%" y="821" fill="#FA521D" fg:w="1" fg:x="2846"/></g><g><title>pac_alloc_impl (1 samples, 0.02%)</title><rect width=".023%" height="15" x="65.576%" y="805" fill="#F1E236" fg:w="1" fg:x="2846"/></g><g><title>pac_alloc_real (1 samples, 0.02%)</title><rect width=".023%" height="15" x="65.576%" y="789" fill="#DD6329" fg:w="1" fg:x="2846"/></g><g><title>_rjem_je_ecache_alloc (1 samples, 0.02%)</title><rect width=".023%" height="15" x="65.576%" y="773" fill="#D55A15" fg:w="1" fg:x="2846"/></g><g><title>extent_recycle (1 samples, 0.02%)</title><rect width=".023%" height="15" x="65.576%" y="757" fill="#CDD018" fg:w="1" fg:x="2846"/></g><g><title>extent_recycle_extract (1 samples, 0.02%)</title><rect width=".023%" height="15" x="65.576%" y="741" fill="#F61F0C" fg:w="1" fg:x="2846"/></g><g><title>extent_activate_locked (1 samples, 0.02%)</title><rect width=".023%" height="15" x="65.576%" y="725" fill="#D59A06" fg:w="1" fg:x="2846"/></g><g><title>_rjem_je_eset_remove (1 samples, 0.02%)</title><rect width=".023%" height="15" x="65.576%" y="709" fill="#DEA31D" fg:w="1" fg:x="2846"/></g><g><title>?? (3 samples, 0.07%)</title><rect width=".069%" height="15" x="65.576%" y="1125" fill="#E3C908" fg:w="3" fg:x="2846"/></g><g><title>core::ptr::write (2 samples, 0.05%)</title><rect width=".046%" height="15" x="65.599%" y="1109" fill="#E90920" fg:w="2" fg:x="2847"/></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (2 samples, 0.05%)</title><rect width=".046%" height="15" x="65.714%" y="1029" fill="#D93618" fg:w="2" fg:x="2852"/></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (2 samples, 0.05%)</title><rect width=".046%" height="15" x="65.76%" y="933" fill="#EBC000" fg:w="2" fg:x="2854"/></g><g><title>serde::de::MapAccess::next_key (5 samples, 0.12%)</title><rect width=".115%" height="15" x="65.76%" y="1029" fill="#EB2D09" fg:w="5" fg:x="2854"/></g><g><title>&lt;simd_json::serde::de::CommaSeparated as serde::de::MapAccess&gt;::next_key_seed (5 samples, 0.12%)</title><rect width=".115%" height="15" x="65.76%" y="1013" fill="#F62A28" fg:w="5" fg:x="2854"/></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (5 samples, 0.12%)</title><rect width=".115%" height="15" x="65.76%" y="997" fill="#F86F18" fg:w="5" fg:x="2854"/></g><g><title>&lt;json_benchmark::copy::citm_catalog::_::&lt;impl serde::de::Deserialize for json_benchmark::copy::citm_catalog::Performance&gt;::deserialize::__Field as serde::de::Deserialize&gt;::deserialize (5 samples, 0.12%)</title><rect width=".115%" height="15" x="65.76%" y="981" fill="#F94116" fg:w="5" fg:x="2854"/></g><g><title>&lt;simd_json::serde::de::MapKey as serde::de::Deserializer&gt;::deserialize_identifier (5 samples, 0.12%)</title><rect width=".115%" height="15" x="65.76%" y="965" fill="#EE6F33" fg:w="5" fg:x="2854"/></g><g><title>&lt;simd_json::serde::de::MapKey as serde::de::Deserializer&gt;::deserialize_any (5 samples, 0.12%)</title><rect width=".115%" height="15" x="65.76%" y="949" fill="#FA7616" fg:w="5" fg:x="2854"/></g><g><title>serde::de::Visitor::visit_borrowed_str (3 samples, 0.07%)</title><rect width=".069%" height="15" x="65.806%" y="933" fill="#EA541A" fg:w="3" fg:x="2856"/></g><g><title>&lt;json_benchmark::copy::citm_catalog::_::&lt;impl serde::de::Deserialize for json_benchmark::copy::citm_catalog::Performance&gt;::deserialize::__FieldVisitor as serde::de::Visitor&gt;::visit_str (3 samples, 0.07%)</title><rect width=".069%" height="15" x="65.806%" y="917" fill="#F3AC0C" fg:w="3" fg:x="2856"/></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (2 samples, 0.05%)</title><rect width=".046%" height="15" x="65.829%" y="901" fill="#EC9631" fg:w="2" fg:x="2857"/></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (2 samples, 0.05%)</title><rect width=".046%" height="15" x="65.829%" y="885" fill="#E1C51A" fg:w="2" fg:x="2857"/></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (2 samples, 0.05%)</title><rect width=".046%" height="15" x="65.829%" y="869" fill="#D6112A" fg:w="2" fg:x="2857"/></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (2 samples, 0.05%)</title><rect width=".046%" height="15" x="65.829%" y="853" fill="#E0A528" fg:w="2" fg:x="2857"/></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for ()&gt;::deserialize (1 samples, 0.02%)</title><rect width=".023%" height="15" x="65.876%" y="981" fill="#F66404" fg:w="1" fg:x="2859"/></g><g><title>simd_json::serde::de::&lt;impl serde::de::Deserializer for &amp;mut simd_json::Deserializer&gt;::deserialize_unit (1 samples, 0.02%)</title><rect width=".023%" height="15" x="65.876%" y="965" fill="#DE6700" fg:w="1" fg:x="2859"/></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.02%)</title><rect width=".023%" height="15" x="65.876%" y="949" fill="#E3BD1A" fg:w="1" fg:x="2859"/></g><g><title>?? (1 samples, 0.02%)</title><rect width=".023%" height="15" x="65.899%" y="837" fill="#D6CA11" fg:w="1" fg:x="2860"/></g><g><title>?? (1 samples, 0.02%)</title><rect width=".023%" height="15" x="65.899%" y="821" fill="#E56F03" fg:w="1" fg:x="2860"/></g><g><title>?? (1 samples, 0.02%)</title><rect width=".023%" height="15" x="65.899%" y="805" fill="#E5AC0F" fg:w="1" fg:x="2860"/></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.02%)</title><rect width=".023%" height="15" x="65.899%" y="789" fill="#E6E023" fg:w="1" fg:x="2860"/></g><g><title>?? (1 samples, 0.02%)</title><rect width=".023%" height="15" x="65.899%" y="773" fill="#FB8D06" fg:w="1" fg:x="2860"/></g><g><title>alloc::alloc::alloc (1 samples, 0.02%)</title><rect width=".023%" height="15" x="65.899%" y="757" fill="#E1D006" fg:w="1" fg:x="2860"/></g><g><title>__rust_alloc (1 samples, 0.02%)</title><rect width=".023%" height="15" x="65.899%" y="741" fill="#F6B510" fg:w="1" fg:x="2860"/></g><g><title>&lt;jemallocator::Jemalloc as core::alloc::global::GlobalAlloc&gt;::alloc (1 samples, 0.02%)</title><rect width=".023%" height="15" x="65.899%" y="725" fill="#E38124" fg:w="1" fg:x="2860"/></g><g><title>_rjem_je_malloc_default (1 samples, 0.02%)</title><rect width=".023%" height="15" x="65.899%" y="709" fill="#F87518" fg:w="1" fg:x="2860"/></g><g><title>imalloc (1 samples, 0.02%)</title><rect width=".023%" height="15" x="65.899%" y="693" fill="#D6B923" fg:w="1" fg:x="2860"/></g><g><title>imalloc_body (1 samples, 0.02%)</title><rect width=".023%" height="15" x="65.899%" y="677" fill="#EC9622" fg:w="1" fg:x="2860"/></g><g><title>imalloc_no_sample (1 samples, 0.02%)</title><rect width=".023%" height="15" x="65.899%" y="661" fill="#F3E41B" fg:w="1" fg:x="2860"/></g><g><title>iallocztm (1 samples, 0.02%)</title><rect width=".023%" height="15" x="65.899%" y="645" fill="#F54D2C" fg:w="1" fg:x="2860"/></g><g><title>arena_malloc (1 samples, 0.02%)</title><rect width=".023%" height="15" x="65.899%" y="629" fill="#EBD62A" fg:w="1" fg:x="2860"/></g><g><title>tcache_alloc_small (1 samples, 0.02%)</title><rect width=".023%" height="15" x="65.899%" y="613" fill="#DD4A03" fg:w="1" fg:x="2860"/></g><g><title>_rjem_je_tcache_alloc_small_hard (1 samples, 0.02%)</title><rect width=".023%" height="15" x="65.899%" y="597" fill="#CE791D" fg:w="1" fg:x="2860"/></g><g><title>_rjem_je_arena_cache_bin_fill_small (1 samples, 0.02%)</title><rect width=".023%" height="15" x="65.899%" y="581" fill="#F98335" fg:w="1" fg:x="2860"/></g><g><title>arena_slab_reg_alloc_batch (1 samples, 0.02%)</title><rect width=".023%" height="15" x="65.899%" y="565" fill="#ECAA1D" fg:w="1" fg:x="2860"/></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for alloc::string::String&gt;::deserialize (3 samples, 0.07%)</title><rect width=".069%" height="15" x="65.899%" y="981" fill="#F7600F" fg:w="3" fg:x="2860"/></g><g><title>simd_json::serde::de::&lt;impl serde::de::Deserializer for &amp;mut simd_json::Deserializer&gt;::deserialize_string (3 samples, 0.07%)</title><rect width=".069%" height="15" x="65.899%" y="965" fill="#D3D207" fg:w="3" fg:x="2860"/></g><g><title>&lt;serde::de::impls::StringVisitor as serde::de::Visitor&gt;::visit_str (3 samples, 0.07%)</title><rect width=".069%" height="15" x="65.899%" y="949" fill="#F05832" fg:w="3" fg:x="2860"/></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (3 samples, 0.07%)</title><rect width=".069%" height="15" x="65.899%" y="933" fill="#D1E51A" fg:w="3" fg:x="2860"/></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (3 samples, 0.07%)</title><rect width=".069%" height="15" x="65.899%" y="917" fill="#D24417" fg:w="3" fg:x="2860"/></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (3 samples, 0.07%)</title><rect width=".069%" height="15" x="65.899%" y="901" fill="#E5B40D" fg:w="3" fg:x="2860"/></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (3 samples, 0.07%)</title><rect width=".069%" height="15" x="65.899%" y="885" fill="#EC352C" fg:w="3" fg:x="2860"/></g><g><title>alloc::slice::hack::to_vec (3 samples, 0.07%)</title><rect width=".069%" height="15" x="65.899%" y="869" fill="#F4D61D" fg:w="3" fg:x="2860"/></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (3 samples, 0.07%)</title><rect width=".069%" height="15" x="65.899%" y="853" fill="#DC4B1D" fg:w="3" fg:x="2860"/></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (2 samples, 0.05%)</title><rect width=".046%" height="15" x="65.922%" y="837" fill="#D6B725" fg:w="2" fg:x="2861"/></g><g><title>core::intrinsics::copy_nonoverlapping (2 samples, 0.05%)</title><rect width=".046%" height="15" x="65.922%" y="821" fill="#EF751D" fg:w="2" fg:x="2861"/></g><g><title>__memmove_avx_unaligned_erms (2 samples, 0.05%)</title><rect width=".046%" height="15" x="65.922%" y="805" fill="#EDAB23" fg:w="2" fg:x="2861"/></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.02%)</title><rect width=".023%" height="15" x="66.037%" y="885" fill="#E5B235" fg:w="1" fg:x="2866"/></g><g><title>_rjem_je_edata_heap_first (1 samples, 0.02%)</title><rect width=".023%" height="15" x="66.083%" y="485" fill="#D26613" fg:w="1" fg:x="2868"/></g><g><title>ph_first (1 samples, 0.02%)</title><rect width=".023%" height="15" x="66.083%" y="469" fill="#EB7F16" fg:w="1" fg:x="2868"/></g><g><title>ph_merge_aux (1 samples, 0.02%)</title><rect width=".023%" height="15" x="66.083%" y="453" fill="#F41F1F" fg:w="1" fg:x="2868"/></g><g><title>extent_recycle_extract (3 samples, 0.07%)</title><rect width=".069%" height="15" x="66.06%" y="533" fill="#E72B15" fg:w="3" fg:x="2867"/></g><g><title>_rjem_je_eset_fit (3 samples, 0.07%)</title><rect width=".069%" height="15" x="66.06%" y="517" fill="#D98323" fg:w="3" fg:x="2867"/></g><g><title>eset_first_fit (2 samples, 0.05%)</title><rect width=".046%" height="15" x="66.083%" y="501" fill="#DD9504" fg:w="2" fg:x="2868"/></g><g><title>sz_psz2ind (1 samples, 0.02%)</title><rect width=".023%" height="15" x="66.106%" y="485" fill="#E8AA1C" fg:w="1" fg:x="2869"/></g><g><title>extent_deactivate_locked (1 samples, 0.02%)</title><rect width=".023%" height="15" x="66.129%" y="517" fill="#EE380A" fg:w="1" fg:x="2870"/></g><g><title>extent_deactivate_locked_impl (1 samples, 0.02%)</title><rect width=".023%" height="15" x="66.129%" y="501" fill="#EBC40E" fg:w="1" fg:x="2870"/></g><g><title>_rjem_je_eset_insert (1 samples, 0.02%)</title><rect width=".023%" height="15" x="66.129%" y="485" fill="#D82D30" fg:w="1" fg:x="2870"/></g><g><title>edata_list_inactive_append (1 samples, 0.02%)</title><rect width=".023%" height="15" x="66.129%" y="469" fill="#EED511" fg:w="1" fg:x="2870"/></g><g><title>_rjem_je_malloc_default (5 samples, 0.12%)</title><rect width=".115%" height="15" x="66.06%" y="789" fill="#D40D02" fg:w="5" fg:x="2867"/></g><g><title>imalloc (5 samples, 0.12%)</title><rect width=".115%" height="15" x="66.06%" y="773" fill="#F07214" fg:w="5" fg:x="2867"/></g><g><title>imalloc_body (5 samples, 0.12%)</title><rect width=".115%" height="15" x="66.06%" y="757" fill="#E42928" fg:w="5" fg:x="2867"/></g><g><title>imalloc_no_sample (5 samples, 0.12%)</title><rect width=".115%" height="15" x="66.06%" y="741" fill="#F48423" fg:w="5" fg:x="2867"/></g><g><title>iallocztm (5 samples, 0.12%)</title><rect width=".115%" height="15" x="66.06%" y="725" fill="#FDBD04" fg:w="5" fg:x="2867"/></g><g><title>arena_malloc (5 samples, 0.12%)</title><rect width=".115%" height="15" x="66.06%" y="709" fill="#E02513" fg:w="5" fg:x="2867"/></g><g><title>tcache_alloc_small (5 samples, 0.12%)</title><rect width=".115%" height="15" x="66.06%" y="693" fill="#EBDF12" fg:w="5" fg:x="2867"/></g><g><title>_rjem_je_tcache_alloc_small_hard (5 samples, 0.12%)</title><rect width=".115%" height="15" x="66.06%" y="677" fill="#EBA319" fg:w="5" fg:x="2867"/></g><g><title>_rjem_je_arena_cache_bin_fill_small (5 samples, 0.12%)</title><rect width=".115%" height="15" x="66.06%" y="661" fill="#D9911C" fg:w="5" fg:x="2867"/></g><g><title>arena_slab_alloc (5 samples, 0.12%)</title><rect width=".115%" height="15" x="66.06%" y="645" fill="#DFDF20" fg:w="5" fg:x="2867"/></g><g><title>_rjem_je_pa_alloc (5 samples, 0.12%)</title><rect width=".115%" height="15" x="66.06%" y="629" fill="#E3BD27" fg:w="5" fg:x="2867"/></g><g><title>pai_alloc (5 samples, 0.12%)</title><rect width=".115%" height="15" x="66.06%" y="613" fill="#F80A16" fg:w="5" fg:x="2867"/></g><g><title>pac_alloc_impl (5 samples, 0.12%)</title><rect width=".115%" height="15" x="66.06%" y="597" fill="#F82E27" fg:w="5" fg:x="2867"/></g><g><title>pac_alloc_real (5 samples, 0.12%)</title><rect width=".115%" height="15" x="66.06%" y="581" fill="#F87130" fg:w="5" fg:x="2867"/></g><g><title>_rjem_je_ecache_alloc (5 samples, 0.12%)</title><rect width=".115%" height="15" x="66.06%" y="565" fill="#F51019" fg:w="5" fg:x="2867"/></g><g><title>extent_recycle (5 samples, 0.12%)</title><rect width=".115%" height="15" x="66.06%" y="549" fill="#F99810" fg:w="5" fg:x="2867"/></g><g><title>extent_recycle_split (2 samples, 0.05%)</title><rect width=".046%" height="15" x="66.129%" y="533" fill="#FA1001" fg:w="2" fg:x="2870"/></g><g><title>extent_split_interior (1 samples, 0.02%)</title><rect width=".023%" height="15" x="66.152%" y="517" fill="#F98A03" fg:w="1" fg:x="2871"/></g><g><title>extent_split_impl (1 samples, 0.02%)</title><rect width=".023%" height="15" x="66.152%" y="501" fill="#E34729" fg:w="1" fg:x="2871"/></g><g><title>_rjem_je_edata_cache_get (1 samples, 0.02%)</title><rect width=".023%" height="15" x="66.152%" y="485" fill="#D1B817" fg:w="1" fg:x="2871"/></g><g><title>_rjem_je_edata_avail_remove (1 samples, 0.02%)</title><rect width=".023%" height="15" x="66.152%" y="469" fill="#DFD71F" fg:w="1" fg:x="2871"/></g><g><title>ph_remove (1 samples, 0.02%)</title><rect width=".023%" height="15" x="66.152%" y="453" fill="#D2921C" fg:w="1" fg:x="2871"/></g><g><title>ph_merge_children (1 samples, 0.02%)</title><rect width=".023%" height="15" x="66.152%" y="437" fill="#D1B729" fg:w="1" fg:x="2871"/></g><g><title>phn_merge_siblings (1 samples, 0.02%)</title><rect width=".023%" height="15" x="66.152%" y="421" fill="#D1E02D" fg:w="1" fg:x="2871"/></g><g><title>phn_merge (1 samples, 0.02%)</title><rect width=".023%" height="15" x="66.152%" y="405" fill="#E0D133" fg:w="1" fg:x="2871"/></g><g><title>edata_avail_ph_cmp (1 samples, 0.02%)</title><rect width=".023%" height="15" x="66.152%" y="389" fill="#DF1127" fg:w="1" fg:x="2871"/></g><g><title>edata_esnead_comp (1 samples, 0.02%)</title><rect width=".023%" height="15" x="66.152%" y="373" fill="#EACC25" fg:w="1" fg:x="2871"/></g><g><title>edata_esn_comp (1 samples, 0.02%)</title><rect width=".023%" height="15" x="66.152%" y="357" fill="#EC7805" fg:w="1" fg:x="2871"/></g><g><title>cache_bin_alloc_easy (1 samples, 0.02%)</title><rect width=".023%" height="15" x="66.198%" y="757" fill="#F8611B" fg:w="1" fg:x="2873"/></g><g><title>cache_bin_alloc_impl (1 samples, 0.02%)</title><rect width=".023%" height="15" x="66.198%" y="741" fill="#F04211" fg:w="1" fg:x="2873"/></g><g><title>?? (9 samples, 0.21%)</title><rect width=".207%" height="15" x="66.037%" y="917" fill="#D24F03" fg:w="9" fg:x="2866"/></g><g><title>?? (9 samples, 0.21%)</title><rect width=".207%" height="15" x="66.037%" y="901" fill="#D6B01B" fg:w="9" fg:x="2866"/></g><g><title>?? (8 samples, 0.18%)</title><rect width=".184%" height="15" x="66.06%" y="885" fill="#EBB903" fg:w="8" fg:x="2867"/></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (8 samples, 0.18%)</title><rect width=".184%" height="15" x="66.06%" y="869" fill="#E3180C" fg:w="8" fg:x="2867"/></g><g><title>?? (8 samples, 0.18%)</title><rect width=".184%" height="15" x="66.06%" y="853" fill="#FCA930" fg:w="8" fg:x="2867"/></g><g><title>alloc::alloc::alloc (8 samples, 0.18%)</title><rect width=".184%" height="15" x="66.06%" y="837" fill="#D44101" fg:w="8" fg:x="2867"/></g><g><title>__rust_alloc (8 samples, 0.18%)</title><rect width=".184%" height="15" x="66.06%" y="821" fill="#F22718" fg:w="8" fg:x="2867"/></g><g><title>&lt;jemallocator::Jemalloc as core::alloc::global::GlobalAlloc&gt;::alloc (8 samples, 0.18%)</title><rect width=".184%" height="15" x="66.06%" y="805" fill="#F92017" fg:w="8" fg:x="2867"/></g><g><title>_rjem_malloc (3 samples, 0.07%)</title><rect width=".069%" height="15" x="66.175%" y="789" fill="#FBC317" fg:w="3" fg:x="2872"/></g><g><title>imalloc_fastpath (3 samples, 0.07%)</title><rect width=".069%" height="15" x="66.175%" y="773" fill="#ECAE08" fg:w="3" fg:x="2872"/></g><g><title>sz_size2index_usize_fastpath (1 samples, 0.02%)</title><rect width=".023%" height="15" x="66.221%" y="757" fill="#DCC508" fg:w="1" fg:x="2874"/></g><g><title>sz_index2size_lookup_impl (1 samples, 0.02%)</title><rect width=".023%" height="15" x="66.221%" y="741" fill="#F06C25" fg:w="1" fg:x="2874"/></g><g><title>?? (11 samples, 0.25%)</title><rect width=".254%" height="15" x="66.037%" y="933" fill="#E8B018" fg:w="11" fg:x="2866"/></g><g><title>core::ptr::write (2 samples, 0.05%)</title><rect width=".046%" height="15" x="66.244%" y="917" fill="#F3231D" fg:w="2" fg:x="2875"/></g><g><title>serde::de::MapAccess::next_key (9 samples, 0.21%)</title><rect width=".207%" height="15" x="66.359%" y="837" fill="#D22512" fg:w="9" fg:x="2880"/></g><g><title>&lt;simd_json::serde::de::CommaSeparated as serde::de::MapAccess&gt;::next_key_seed (9 samples, 0.21%)</title><rect width=".207%" height="15" x="66.359%" y="821" fill="#E0B828" fg:w="9" fg:x="2880"/></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (9 samples, 0.21%)</title><rect width=".207%" height="15" x="66.359%" y="805" fill="#EC271D" fg:w="9" fg:x="2880"/></g><g><title>&lt;json_benchmark::copy::citm_catalog::_::&lt;impl serde::de::Deserialize for json_benchmark::copy::citm_catalog::Price&gt;::deserialize::__Field as serde::de::Deserialize&gt;::deserialize (9 samples, 0.21%)</title><rect width=".207%" height="15" x="66.359%" y="789" fill="#E83027" fg:w="9" fg:x="2880"/></g><g><title>&lt;simd_json::serde::de::MapKey as serde::de::Deserializer&gt;::deserialize_identifier (9 samples, 0.21%)</title><rect width=".207%" height="15" x="66.359%" y="773" fill="#EC222A" fg:w="9" fg:x="2880"/></g><g><title>&lt;simd_json::serde::de::MapKey as serde::de::Deserializer&gt;::deserialize_any (9 samples, 0.21%)</title><rect width=".207%" height="15" x="66.359%" y="757" fill="#F36A25" fg:w="9" fg:x="2880"/></g><g><title>serde::de::Visitor::visit_borrowed_str (9 samples, 0.21%)</title><rect width=".207%" height="15" x="66.359%" y="741" fill="#DA6006" fg:w="9" fg:x="2880"/></g><g><title>&lt;json_benchmark::copy::citm_catalog::_::&lt;impl serde::de::Deserialize for json_benchmark::copy::citm_catalog::Price&gt;::deserialize::__FieldVisitor as serde::de::Visitor&gt;::visit_str (9 samples, 0.21%)</title><rect width=".207%" height="15" x="66.359%" y="725" fill="#EB820C" fg:w="9" fg:x="2880"/></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (9 samples, 0.21%)</title><rect width=".207%" height="15" x="66.359%" y="709" fill="#E75F00" fg:w="9" fg:x="2880"/></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (9 samples, 0.21%)</title><rect width=".207%" height="15" x="66.359%" y="693" fill="#E40C17" fg:w="9" fg:x="2880"/></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (9 samples, 0.21%)</title><rect width=".207%" height="15" x="66.359%" y="677" fill="#D80C01" fg:w="9" fg:x="2880"/></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (9 samples, 0.21%)</title><rect width=".207%" height="15" x="66.359%" y="661" fill="#DB3B03" fg:w="9" fg:x="2880"/></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.02%)</title><rect width=".023%" height="15" x="66.567%" y="757" fill="#D7D02E" fg:w="1" fg:x="2889"/></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (3 samples, 0.07%)</title><rect width=".069%" height="15" x="66.59%" y="741" fill="#FEE01D" fg:w="3" fg:x="2890"/></g><g><title>&lt;json_benchmark::copy::citm_catalog::_::&lt;impl serde::de::Deserialize for json_benchmark::copy::citm_catalog::Price&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_map (15 samples, 0.35%)</title><rect width=".346%" height="15" x="66.336%" y="853" fill="#E80E1D" fg:w="15" fg:x="2879"/></g><g><title>serde::de::MapAccess::next_value (5 samples, 0.12%)</title><rect width=".115%" height="15" x="66.567%" y="837" fill="#D02D34" fg:w="5" fg:x="2889"/></g><g><title>&lt;simd_json::serde::de::CommaSeparated as serde::de::MapAccess&gt;::next_value_seed (5 samples, 0.12%)</title><rect width=".115%" height="15" x="66.567%" y="821" fill="#EABF1C" fg:w="5" fg:x="2889"/></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (5 samples, 0.12%)</title><rect width=".115%" height="15" x="66.567%" y="805" fill="#F4432B" fg:w="5" fg:x="2889"/></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u32&gt;::deserialize (5 samples, 0.12%)</title><rect width=".115%" height="15" x="66.567%" y="789" fill="#ECBD18" fg:w="5" fg:x="2889"/></g><g><title>simd_json::serde::de::&lt;impl serde::de::Deserializer for &amp;mut simd_json::Deserializer&gt;::deserialize_u32 (5 samples, 0.12%)</title><rect width=".115%" height="15" x="66.567%" y="773" fill="#EFD621" fg:w="5" fg:x="2889"/></g><g><title>?? (4 samples, 0.09%)</title><rect width=".092%" height="15" x="66.59%" y="757" fill="#E2B029" fg:w="4" fg:x="2890"/></g><g><title>?? (1 samples, 0.02%)</title><rect width=".023%" height="15" x="66.659%" y="741" fill="#F82F08" fg:w="1" fg:x="2893"/></g><g><title>&lt;[T] as simd_json::safer_unchecked::GetSaferUnchecked&lt;T&gt;&gt;::get_kinda_unchecked (1 samples, 0.02%)</title><rect width=".023%" height="15" x="66.659%" y="725" fill="#DA512C" fg:w="1" fg:x="2893"/></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked (1 samples, 0.02%)</title><rect width=".023%" height="15" x="66.659%" y="709" fill="#D56206" fg:w="1" fg:x="2893"/></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (1 samples, 0.02%)</title><rect width=".023%" height="15" x="66.659%" y="693" fill="#DE5516" fg:w="1" fg:x="2893"/></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (1 samples, 0.02%)</title><rect width=".023%" height="15" x="66.659%" y="677" fill="#EF2E27" fg:w="1" fg:x="2893"/></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.02%)</title><rect width=".023%" height="15" x="66.682%" y="837" fill="#ED0C1D" fg:w="1" fg:x="2894"/></g><g><title>json_benchmark::copy::citm_catalog::_::&lt;impl serde::de::Deserialize for json_benchmark::copy::citm_catalog::Price&gt;::deserialize (18 samples, 0.41%)</title><rect width=".415%" height="15" x="66.313%" y="885" fill="#D64D08" fg:w="18" fg:x="2878"/></g><g><title>simd_json::serde::de::&lt;impl serde::de::Deserializer for &amp;mut simd_json::Deserializer&gt;::deserialize_struct (18 samples, 0.41%)</title><rect width=".415%" height="15" x="66.313%" y="869" fill="#D9A825" fg:w="18" fg:x="2878"/></g><g><title>?? (2 samples, 0.05%)</title><rect width=".046%" height="15" x="66.682%" y="853" fill="#DDD917" fg:w="2" fg:x="2894"/></g><g><title>core::slice::&lt;impl [T]&gt;::get (1 samples, 0.02%)</title><rect width=".023%" height="15" x="66.705%" y="837" fill="#F3E524" fg:w="1" fg:x="2895"/></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (1 samples, 0.02%)</title><rect width=".023%" height="15" x="66.705%" y="821" fill="#FBA328" fg:w="1" fg:x="2895"/></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (5 samples, 0.12%)</title><rect width=".115%" height="15" x="66.889%" y="837" fill="#EDDE0C" fg:w="5" fg:x="2903"/></g><g><title>?? (1 samples, 0.02%)</title><rect width=".023%" height="15" x="67.005%" y="741" fill="#F88406" fg:w="1" fg:x="2908"/></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.02%)</title><rect width=".023%" height="15" x="67.005%" y="725" fill="#E3A732" fg:w="1" fg:x="2908"/></g><g><title>serde::de::MapAccess::next_key (8 samples, 0.18%)</title><rect width=".184%" height="15" x="67.005%" y="837" fill="#F25425" fg:w="8" fg:x="2908"/></g><g><title>&lt;simd_json::serde::de::CommaSeparated as serde::de::MapAccess&gt;::next_key_seed (8 samples, 0.18%)</title><rect width=".184%" height="15" x="67.005%" y="821" fill="#D40432" fg:w="8" fg:x="2908"/></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (8 samples, 0.18%)</title><rect width=".184%" height="15" x="67.005%" y="805" fill="#E6E420" fg:w="8" fg:x="2908"/></g><g><title>&lt;json_benchmark::copy::citm_catalog::_::&lt;impl serde::de::Deserialize for json_benchmark::copy::citm_catalog::SeatCategory&gt;::deserialize::__Field as serde::de::Deserialize&gt;::deserialize (8 samples, 0.18%)</title><rect width=".184%" height="15" x="67.005%" y="789" fill="#F8D917" fg:w="8" fg:x="2908"/></g><g><title>&lt;simd_json::serde::de::MapKey as serde::de::Deserializer&gt;::deserialize_identifier (8 samples, 0.18%)</title><rect width=".184%" height="15" x="67.005%" y="773" fill="#EEC520" fg:w="8" fg:x="2908"/></g><g><title>&lt;simd_json::serde::de::MapKey as serde::de::Deserializer&gt;::deserialize_any (8 samples, 0.18%)</title><rect width=".184%" height="15" x="67.005%" y="757" fill="#EC6A01" fg:w="8" fg:x="2908"/></g><g><title>serde::de::Visitor::visit_borrowed_str (7 samples, 0.16%)</title><rect width=".161%" height="15" x="67.028%" y="741" fill="#DBE40D" fg:w="7" fg:x="2909"/></g><g><title>&lt;json_benchmark::copy::citm_catalog::_::&lt;impl serde::de::Deserialize for json_benchmark::copy::citm_catalog::SeatCategory&gt;::deserialize::__FieldVisitor as serde::de::Visitor&gt;::visit_str (7 samples, 0.16%)</title><rect width=".161%" height="15" x="67.028%" y="725" fill="#EE1E23" fg:w="7" fg:x="2909"/></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (7 samples, 0.16%)</title><rect width=".161%" height="15" x="67.028%" y="709" fill="#EC4617" fg:w="7" fg:x="2909"/></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (7 samples, 0.16%)</title><rect width=".161%" height="15" x="67.028%" y="693" fill="#F96830" fg:w="7" fg:x="2909"/></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (7 samples, 0.16%)</title><rect width=".161%" height="15" x="67.028%" y="677" fill="#FE7532" fg:w="7" fg:x="2909"/></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (7 samples, 0.16%)</title><rect width=".161%" height="15" x="67.028%" y="661" fill="#DF9804" fg:w="7" fg:x="2909"/></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (7 samples, 0.16%)</title><rect width=".161%" height="15" x="67.327%" y="741" fill="#F50602" fg:w="7" fg:x="2922"/></g><g><title>arena_slab_alloc (1 samples, 0.02%)</title><rect width=".023%" height="15" x="67.489%" y="453" fill="#F99618" fg:w="1" fg:x="2929"/></g><g><title>_rjem_je_pa_alloc (1 samples, 0.02%)</title><rect width=".023%" height="15" x="67.489%" y="437" fill="#E4B92A" fg:w="1" fg:x="2929"/></g><g><title>pai_alloc (1 samples, 0.02%)</title><rect width=".023%" height="15" x="67.489%" y="421" fill="#E22721" fg:w="1" fg:x="2929"/></g><g><title>pac_alloc_impl (1 samples, 0.02%)</title><rect width=".023%" height="15" x="67.489%" y="405" fill="#DDA613" fg:w="1" fg:x="2929"/></g><g><title>pac_alloc_real (1 samples, 0.02%)</title><rect width=".023%" height="15" x="67.489%" y="389" fill="#D16D02" fg:w="1" fg:x="2929"/></g><g><title>_rjem_je_ecache_alloc (1 samples, 0.02%)</title><rect width=".023%" height="15" x="67.489%" y="373" fill="#FCD81A" fg:w="1" fg:x="2929"/></g><g><title>extent_recycle (1 samples, 0.02%)</title><rect width=".023%" height="15" x="67.489%" y="357" fill="#E3AD24" fg:w="1" fg:x="2929"/></g><g><title>malloc_mutex_lock (1 samples, 0.02%)</title><rect width=".023%" height="15" x="67.489%" y="341" fill="#D15A07" fg:w="1" fg:x="2929"/></g><g><title>malloc_mutex_trylock_final (1 samples, 0.02%)</title><rect width=".023%" height="15" x="67.489%" y="325" fill="#FAC20B" fg:w="1" fg:x="2929"/></g><g><title>__GI___pthread_mutex_trylock (1 samples, 0.02%)</title><rect width=".023%" height="15" x="67.489%" y="309" fill="#DC4832" fg:w="1" fg:x="2929"/></g><g><title>_rjem_je_malloc_default (3 samples, 0.07%)</title><rect width=".069%" height="15" x="67.489%" y="597" fill="#DE6A30" fg:w="3" fg:x="2929"/></g><g><title>imalloc (3 samples, 0.07%)</title><rect width=".069%" height="15" x="67.489%" y="581" fill="#D8DC2D" fg:w="3" fg:x="2929"/></g><g><title>imalloc_body (3 samples, 0.07%)</title><rect width=".069%" height="15" x="67.489%" y="565" fill="#EA7012" fg:w="3" fg:x="2929"/></g><g><title>imalloc_no_sample (3 samples, 0.07%)</title><rect width=".069%" height="15" x="67.489%" y="549" fill="#CEB309" fg:w="3" fg:x="2929"/></g><g><title>iallocztm (3 samples, 0.07%)</title><rect width=".069%" height="15" x="67.489%" y="533" fill="#D77328" fg:w="3" fg:x="2929"/></g><g><title>arena_malloc (3 samples, 0.07%)</title><rect width=".069%" height="15" x="67.489%" y="517" fill="#DE4522" fg:w="3" fg:x="2929"/></g><g><title>tcache_alloc_small (3 samples, 0.07%)</title><rect width=".069%" height="15" x="67.489%" y="501" fill="#D1A10A" fg:w="3" fg:x="2929"/></g><g><title>_rjem_je_tcache_alloc_small_hard (3 samples, 0.07%)</title><rect width=".069%" height="15" x="67.489%" y="485" fill="#D90626" fg:w="3" fg:x="2929"/></g><g><title>_rjem_je_arena_cache_bin_fill_small (3 samples, 0.07%)</title><rect width=".069%" height="15" x="67.489%" y="469" fill="#E5E530" fg:w="3" fg:x="2929"/></g><g><title>arena_slab_reg_alloc_batch (2 samples, 0.05%)</title><rect width=".046%" height="15" x="67.511%" y="453" fill="#E1151C" fg:w="2" fg:x="2930"/></g><g><title>?? (6 samples, 0.14%)</title><rect width=".138%" height="15" x="67.489%" y="741" fill="#CE210D" fg:w="6" fg:x="2929"/></g><g><title>?? (6 samples, 0.14%)</title><rect width=".138%" height="15" x="67.489%" y="725" fill="#F2B211" fg:w="6" fg:x="2929"/></g><g><title>?? (6 samples, 0.14%)</title><rect width=".138%" height="15" x="67.489%" y="709" fill="#DCA205" fg:w="6" fg:x="2929"/></g><g><title>?? (6 samples, 0.14%)</title><rect width=".138%" height="15" x="67.489%" y="693" fill="#D2212B" fg:w="6" fg:x="2929"/></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (6 samples, 0.14%)</title><rect width=".138%" height="15" x="67.489%" y="677" fill="#D87436" fg:w="6" fg:x="2929"/></g><g><title>?? (6 samples, 0.14%)</title><rect width=".138%" height="15" x="67.489%" y="661" fill="#F95C18" fg:w="6" fg:x="2929"/></g><g><title>alloc::alloc::alloc (6 samples, 0.14%)</title><rect width=".138%" height="15" x="67.489%" y="645" fill="#E7BD0E" fg:w="6" fg:x="2929"/></g><g><title>__rust_alloc (6 samples, 0.14%)</title><rect width=".138%" height="15" x="67.489%" y="629" fill="#E60829" fg:w="6" fg:x="2929"/></g><g><title>&lt;jemallocator::Jemalloc as core::alloc::global::GlobalAlloc&gt;::alloc (6 samples, 0.14%)</title><rect width=".138%" height="15" x="67.489%" y="613" fill="#F9071B" fg:w="6" fg:x="2929"/></g><g><title>_rjem_malloc (3 samples, 0.07%)</title><rect width=".069%" height="15" x="67.558%" y="597" fill="#E85605" fg:w="3" fg:x="2932"/></g><g><title>imalloc_fastpath (1 samples, 0.02%)</title><rect width=".023%" height="15" x="67.604%" y="581" fill="#E0AF12" fg:w="1" fg:x="2934"/></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (4 samples, 0.09%)</title><rect width=".092%" height="15" x="67.834%" y="661" fill="#DC810C" fg:w="4" fg:x="2944"/></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (2 samples, 0.05%)</title><rect width=".046%" height="15" x="68.733%" y="549" fill="#D21324" fg:w="2" fg:x="2983"/></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (4 samples, 0.09%)</title><rect width=".092%" height="15" x="68.779%" y="533" fill="#DB600E" fg:w="4" fg:x="2985"/></g><g><title>?? (5 samples, 0.12%)</title><rect width=".115%" height="15" x="68.779%" y="549" fill="#F96A01" fg:w="5" fg:x="2985"/></g><g><title>core::slice::&lt;impl [T]&gt;::get (1 samples, 0.02%)</title><rect width=".023%" height="15" x="68.871%" y="533" fill="#F99B14" fg:w="1" fg:x="2989"/></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (1 samples, 0.02%)</title><rect width=".023%" height="15" x="68.871%" y="517" fill="#F4A809" fg:w="1" fg:x="2989"/></g><g><title>serde::de::MapAccess::next_key (49 samples, 1.13%)</title><rect width="1.129%" height="15" x="68.571%" y="645" fill="#D81732" fg:w="49" fg:x="2976"/></g><g><title>&lt;simd_json::serde::de::CommaSeparated as serde::de::MapAccess&gt;::next_key_seed (49 samples, 1.13%)</title><rect width="1.129%" height="15" x="68.571%" y="629" fill="#E0DB14" fg:w="49" fg:x="2976"/></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (45 samples, 1.04%)</title><rect width="1.037%" height="15" x="68.664%" y="613" fill="#DE9C0F" fg:w="45" fg:x="2980"/></g><g><title>&lt;json_benchmark::copy::citm_catalog::_::&lt;impl serde::de::Deserialize for json_benchmark::copy::citm_catalog::Area&gt;::deserialize::__Field as serde::de::Deserialize&gt;::deserialize (45 samples, 1.04%)</title><rect width="1.037%" height="15" x="68.664%" y="597" fill="#E76111" fg:w="45" fg:x="2980"/></g><g><title>&lt;simd_json::serde::de::MapKey as serde::de::Deserializer&gt;::deserialize_identifier (45 samples, 1.04%)</title><rect width="1.037%" height="15" x="68.664%" y="581" fill="#DA4630" fg:w="45" fg:x="2980"/></g><g><title>&lt;simd_json::serde::de::MapKey as serde::de::Deserializer&gt;::deserialize_any (45 samples, 1.04%)</title><rect width="1.037%" height="15" x="68.664%" y="565" fill="#D4C434" fg:w="45" fg:x="2980"/></g><g><title>serde::de::Visitor::visit_borrowed_str (35 samples, 0.81%)</title><rect width=".806%" height="15" x="68.894%" y="549" fill="#F3CB12" fg:w="35" fg:x="2990"/></g><g><title>&lt;json_benchmark::copy::citm_catalog::_::&lt;impl serde::de::Deserialize for json_benchmark::copy::citm_catalog::Area&gt;::deserialize::__FieldVisitor as serde::de::Visitor&gt;::visit_str (35 samples, 0.81%)</title><rect width=".806%" height="15" x="68.894%" y="533" fill="#FC7D29" fg:w="35" fg:x="2990"/></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (34 samples, 0.78%)</title><rect width=".783%" height="15" x="68.917%" y="517" fill="#DFB421" fg:w="34" fg:x="2991"/></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (34 samples, 0.78%)</title><rect width=".783%" height="15" x="68.917%" y="501" fill="#FE9F2E" fg:w="34" fg:x="2991"/></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (34 samples, 0.78%)</title><rect width=".783%" height="15" x="68.917%" y="485" fill="#FE260A" fg:w="34" fg:x="2991"/></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (34 samples, 0.78%)</title><rect width=".783%" height="15" x="68.917%" y="469" fill="#D0D920" fg:w="34" fg:x="2991"/></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (3 samples, 0.07%)</title><rect width=".069%" height="15" x="69.701%" y="533" fill="#DD780D" fg:w="3" fg:x="3025"/></g><g><title>&lt;json_benchmark::empty::Array as serde::de::Deserialize&gt;::deserialize (6 samples, 0.14%)</title><rect width=".138%" height="15" x="69.701%" y="597" fill="#F63634" fg:w="6" fg:x="3025"/></g><g><title>simd_json::serde::de::&lt;impl serde::de::Deserializer for &amp;mut simd_json::Deserializer&gt;::deserialize_tuple (6 samples, 0.14%)</title><rect width=".138%" height="15" x="69.701%" y="581" fill="#F22219" fg:w="6" fg:x="3025"/></g><g><title>simd_json::serde::de::&lt;impl serde::de::Deserializer for &amp;mut simd_json::Deserializer&gt;::deserialize_seq (6 samples, 0.14%)</title><rect width=".138%" height="15" x="69.701%" y="565" fill="#F7D109" fg:w="6" fg:x="3025"/></g><g><title>?? (6 samples, 0.14%)</title><rect width=".138%" height="15" x="69.701%" y="549" fill="#E4471A" fg:w="6" fg:x="3025"/></g><g><title>core::slice::&lt;impl [T]&gt;::get (3 samples, 0.07%)</title><rect width=".069%" height="15" x="69.77%" y="533" fill="#DE9131" fg:w="3" fg:x="3028"/></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (3 samples, 0.07%)</title><rect width=".069%" height="15" x="69.77%" y="517" fill="#DA7911" fg:w="3" fg:x="3028"/></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (9 samples, 0.21%)</title><rect width=".207%" height="15" x="69.839%" y="565" fill="#F43207" fg:w="9" fg:x="3031"/></g><g><title>&lt;json_benchmark::copy::citm_catalog::_::&lt;impl serde::de::Deserialize for json_benchmark::copy::citm_catalog::Area&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_map (99 samples, 2.28%)</title><rect width="2.281%" height="15" x="67.926%" y="661" fill="#F6E525" fg:w="99" fg:x="2948"/><text x="68.176%" y="671.5">&lt;..</text></g><g><title>serde::de::MapAccess::next_value (22 samples, 0.51%)</title><rect width=".507%" height="15" x="69.701%" y="645" fill="#E11205" fg:w="22" fg:x="3025"/></g><g><title>&lt;simd_json::serde::de::CommaSeparated as serde::de::MapAccess&gt;::next_value_seed (22 samples, 0.51%)</title><rect width=".507%" height="15" x="69.701%" y="629" fill="#D5CC08" fg:w="22" fg:x="3025"/></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (22 samples, 0.51%)</title><rect width=".507%" height="15" x="69.701%" y="613" fill="#EE6706" fg:w="22" fg:x="3025"/></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u32&gt;::deserialize (16 samples, 0.37%)</title><rect width=".369%" height="15" x="69.839%" y="597" fill="#DE1923" fg:w="16" fg:x="3031"/></g><g><title>simd_json::serde::de::&lt;impl serde::de::Deserializer for &amp;mut simd_json::Deserializer&gt;::deserialize_u32 (16 samples, 0.37%)</title><rect width=".369%" height="15" x="69.839%" y="581" fill="#D5CB23" fg:w="16" fg:x="3031"/></g><g><title>?? (7 samples, 0.16%)</title><rect width=".161%" height="15" x="70.046%" y="565" fill="#DD4F35" fg:w="7" fg:x="3040"/></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (7 samples, 0.16%)</title><rect width=".161%" height="15" x="70.046%" y="549" fill="#F3C823" fg:w="7" fg:x="3040"/></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (140 samples, 3.23%)</title><rect width="3.226%" height="15" x="67.235%" y="757" fill="#F83C19" fg:w="140" fg:x="2918"/><text x="67.485%" y="767.5">&lt;se..</text></g><g><title>serde::de::SeqAccess::next_element (123 samples, 2.83%)</title><rect width="2.834%" height="15" x="67.627%" y="741" fill="#E3352E" fg:w="123" fg:x="2935"/><text x="67.877%" y="751.5">se..</text></g><g><title>&lt;simd_json::serde::de::CommaSeparated as serde::de::SeqAccess&gt;::next_element_seed (123 samples, 2.83%)</title><rect width="2.834%" height="15" x="67.627%" y="725" fill="#D87820" fg:w="123" fg:x="2935"/><text x="67.877%" y="735.5">&lt;s..</text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (123 samples, 2.83%)</title><rect width="2.834%" height="15" x="67.627%" y="709" fill="#DC8601" fg:w="123" fg:x="2935"/><text x="67.877%" y="719.5">&lt;c..</text></g><g><title>json_benchmark::copy::citm_catalog::_::&lt;impl serde::de::Deserialize for json_benchmark::copy::citm_catalog::Area&gt;::deserialize (123 samples, 2.83%)</title><rect width="2.834%" height="15" x="67.627%" y="693" fill="#EDA805" fg:w="123" fg:x="2935"/><text x="67.877%" y="703.5">js..</text></g><g><title>simd_json::serde::de::&lt;impl serde::de::Deserializer for &amp;mut simd_json::Deserializer&gt;::deserialize_struct (123 samples, 2.83%)</title><rect width="2.834%" height="15" x="67.627%" y="677" fill="#E76421" fg:w="123" fg:x="2935"/><text x="67.877%" y="687.5">si..</text></g><g><title>?? (11 samples, 0.25%)</title><rect width=".254%" height="15" x="70.207%" y="661" fill="#ECB12F" fg:w="11" fg:x="3047"/></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (11 samples, 0.25%)</title><rect width=".254%" height="15" x="70.207%" y="645" fill="#EB0731" fg:w="11" fg:x="3047"/></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize (141 samples, 3.25%)</title><rect width="3.249%" height="15" x="67.235%" y="789" fill="#E87716" fg:w="141" fg:x="2918"/><text x="67.485%" y="799.5">ser..</text></g><g><title>simd_json::serde::de::&lt;impl serde::de::Deserializer for &amp;mut simd_json::Deserializer&gt;::deserialize_seq (141 samples, 3.25%)</title><rect width="3.249%" height="15" x="67.235%" y="773" fill="#FE4935" fg:w="141" fg:x="2918"/><text x="67.485%" y="783.5">sim..</text></g><g><title>?? (1 samples, 0.02%)</title><rect width=".023%" height="15" x="70.461%" y="757" fill="#FB2314" fg:w="1" fg:x="3058"/></g><g><title>core::slice::&lt;impl [T]&gt;::get (1 samples, 0.02%)</title><rect width=".023%" height="15" x="70.461%" y="741" fill="#F17714" fg:w="1" fg:x="3058"/></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (1 samples, 0.02%)</title><rect width=".023%" height="15" x="70.461%" y="725" fill="#CF660E" fg:w="1" fg:x="3058"/></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.02%)</title><rect width=".023%" height="15" x="70.484%" y="757" fill="#F8C932" fg:w="1" fg:x="3059"/></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize (198 samples, 4.56%)</title><rect width="4.562%" height="15" x="65.968%" y="981" fill="#DEB92C" fg:w="198" fg:x="2863"/><text x="66.218%" y="991.5">serde..</text></g><g><title>simd_json::serde::de::&lt;impl serde::de::Deserializer for &amp;mut simd_json::Deserializer&gt;::deserialize_seq (198 samples, 4.56%)</title><rect width="4.562%" height="15" x="65.968%" y="965" fill="#DA6B12" fg:w="198" fg:x="2863"/><text x="66.218%" y="975.5">simd_..</text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (198 samples, 4.56%)</title><rect width="4.562%" height="15" x="65.968%" y="949" fill="#EDB127" fg:w="198" fg:x="2863"/><text x="66.218%" y="959.5">&lt;serd..</text></g><g><title>serde::de::SeqAccess::next_element (184 samples, 4.24%)</title><rect width="4.24%" height="15" x="66.29%" y="933" fill="#F64506" fg:w="184" fg:x="2877"/><text x="66.54%" y="943.5">serde..</text></g><g><title>&lt;simd_json::serde::de::CommaSeparated as serde::de::SeqAccess&gt;::next_element_seed (184 samples, 4.24%)</title><rect width="4.24%" height="15" x="66.29%" y="917" fill="#EAD025" fg:w="184" fg:x="2877"/><text x="66.54%" y="927.5">&lt;simd..</text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (183 samples, 4.22%)</title><rect width="4.217%" height="15" x="66.313%" y="901" fill="#E10406" fg:w="183" fg:x="2878"/><text x="66.563%" y="911.5">&lt;core..</text></g><g><title>json_benchmark::copy::citm_catalog::_::&lt;impl serde::de::Deserialize for json_benchmark::copy::citm_catalog::SeatCategory&gt;::deserialize (165 samples, 3.80%)</title><rect width="3.802%" height="15" x="66.728%" y="885" fill="#E92D00" fg:w="165" fg:x="2896"/><text x="66.978%" y="895.5">json..</text></g><g><title>simd_json::serde::de::&lt;impl serde::de::Deserializer for &amp;mut simd_json::Deserializer&gt;::deserialize_struct (165 samples, 3.80%)</title><rect width="3.802%" height="15" x="66.728%" y="869" fill="#E28805" fg:w="165" fg:x="2896"/><text x="66.978%" y="879.5">simd..</text></g><g><title>&lt;json_benchmark::copy::citm_catalog::_::&lt;impl serde::de::Deserialize for json_benchmark::copy::citm_catalog::SeatCategory&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_map (164 samples, 3.78%)</title><rect width="3.779%" height="15" x="66.751%" y="853" fill="#D35B2F" fg:w="164" fg:x="2897"/><text x="67.001%" y="863.5">&lt;jso..</text></g><g><title>serde::de::MapAccess::next_value (145 samples, 3.34%)</title><rect width="3.341%" height="15" x="67.189%" y="837" fill="#F25833" fg:w="145" fg:x="2916"/><text x="67.439%" y="847.5">ser..</text></g><g><title>&lt;simd_json::serde::de::CommaSeparated as serde::de::MapAccess&gt;::next_value_seed (145 samples, 3.34%)</title><rect width="3.341%" height="15" x="67.189%" y="821" fill="#E65B1C" fg:w="145" fg:x="2916"/><text x="67.439%" y="831.5">&lt;si..</text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (145 samples, 3.34%)</title><rect width="3.341%" height="15" x="67.189%" y="805" fill="#FEBA1D" fg:w="145" fg:x="2916"/><text x="67.439%" y="815.5">&lt;co..</text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u32&gt;::deserialize (2 samples, 0.05%)</title><rect width=".046%" height="15" x="70.484%" y="789" fill="#EE0604" fg:w="2" fg:x="3059"/></g><g><title>simd_json::serde::de::&lt;impl serde::de::Deserializer for &amp;mut simd_json::Deserializer&gt;::deserialize_u32 (2 samples, 0.05%)</title><rect width=".046%" height="15" x="70.484%" y="773" fill="#DD9710" fg:w="2" fg:x="3059"/></g><g><title>?? (1 samples, 0.02%)</title><rect width=".023%" height="15" x="70.507%" y="757" fill="#FB8F34" fg:w="1" fg:x="3060"/></g><g><title>value_trait::ValueAccess::as_u32 (1 samples, 0.02%)</title><rect width=".023%" height="15" x="70.507%" y="741" fill="#CE5A0F" fg:w="1" fg:x="3060"/></g><g><title>&lt;value_trait::node::StaticNode as value_trait::ValueAccess&gt;::as_u64 (1 samples, 0.02%)</title><rect width=".023%" height="15" x="70.507%" y="725" fill="#DA2308" fg:w="1" fg:x="3060"/></g><g><title>_rjem_je_malloc_default (1 samples, 0.02%)</title><rect width=".023%" height="15" x="70.53%" y="661" fill="#EFD706" fg:w="1" fg:x="3061"/></g><g><title>imalloc (1 samples, 0.02%)</title><rect width=".023%" height="15" x="70.53%" y="645" fill="#F57427" fg:w="1" fg:x="3061"/></g><g><title>imalloc_body (1 samples, 0.02%)</title><rect width=".023%" height="15" x="70.53%" y="629" fill="#F2411C" fg:w="1" fg:x="3061"/></g><g><title>imalloc_no_sample (1 samples, 0.02%)</title><rect width=".023%" height="15" x="70.53%" y="613" fill="#FC8435" fg:w="1" fg:x="3061"/></g><g><title>iallocztm (1 samples, 0.02%)</title><rect width=".023%" height="15" x="70.53%" y="597" fill="#E09F32" fg:w="1" fg:x="3061"/></g><g><title>arena_malloc (1 samples, 0.02%)</title><rect width=".023%" height="15" x="70.53%" y="581" fill="#E05D04" fg:w="1" fg:x="3061"/></g><g><title>tcache_alloc_small (1 samples, 0.02%)</title><rect width=".023%" height="15" x="70.53%" y="565" fill="#D05122" fg:w="1" fg:x="3061"/></g><g><title>_rjem_je_tcache_alloc_small_hard (1 samples, 0.02%)</title><rect width=".023%" height="15" x="70.53%" y="549" fill="#E95C36" fg:w="1" fg:x="3061"/></g><g><title>_rjem_je_arena_cache_bin_fill_small (1 samples, 0.02%)</title><rect width=".023%" height="15" x="70.53%" y="533" fill="#ED150E" fg:w="1" fg:x="3061"/></g><g><title>arena_slab_alloc (1 samples, 0.02%)</title><rect width=".023%" height="15" x="70.53%" y="517" fill="#F98033" fg:w="1" fg:x="3061"/></g><g><title>_rjem_je_pa_alloc (1 samples, 0.02%)</title><rect width=".023%" height="15" x="70.53%" y="501" fill="#DF8118" fg:w="1" fg:x="3061"/></g><g><title>pai_alloc (1 samples, 0.02%)</title><rect width=".023%" height="15" x="70.53%" y="485" fill="#E7A819" fg:w="1" fg:x="3061"/></g><g><title>pac_alloc_impl (1 samples, 0.02%)</title><rect width=".023%" height="15" x="70.53%" y="469" fill="#E02714" fg:w="1" fg:x="3061"/></g><g><title>pac_alloc_real (1 samples, 0.02%)</title><rect width=".023%" height="15" x="70.53%" y="453" fill="#E19835" fg:w="1" fg:x="3061"/></g><g><title>_rjem_je_ecache_alloc (1 samples, 0.02%)</title><rect width=".023%" height="15" x="70.53%" y="437" fill="#FC1118" fg:w="1" fg:x="3061"/></g><g><title>extent_recycle (1 samples, 0.02%)</title><rect width=".023%" height="15" x="70.53%" y="421" fill="#FA721E" fg:w="1" fg:x="3061"/></g><g><title>extent_recycle_extract (1 samples, 0.02%)</title><rect width=".023%" height="15" x="70.53%" y="405" fill="#E50504" fg:w="1" fg:x="3061"/></g><g><title>extent_activate_locked (1 samples, 0.02%)</title><rect width=".023%" height="15" x="70.53%" y="389" fill="#E1B031" fg:w="1" fg:x="3061"/></g><g><title>_rjem_je_eset_remove (1 samples, 0.02%)</title><rect width=".023%" height="15" x="70.53%" y="373" fill="#E0DD31" fg:w="1" fg:x="3061"/></g><g><title>json_benchmark::copy::citm_catalog::_::&lt;impl serde::de::Deserialize for json_benchmark::copy::citm_catalog::CitmCatalog&gt;::deserialize (279 samples, 6.43%)</title><rect width="6.429%" height="15" x="64.147%" y="1269" fill="#FDA91B" fg:w="279" fg:x="2784"/><text x="64.397%" y="1279.5">json_ben..</text></g><g><title>simd_json::serde::de::&lt;impl serde::de::Deserializer for &amp;mut simd_json::Deserializer&gt;::deserialize_struct (279 samples, 6.43%)</title><rect width="6.429%" height="15" x="64.147%" y="1253" fill="#D3CE10" fg:w="279" fg:x="2784"/><text x="64.397%" y="1263.5">simd_jso..</text></g><g><title>&lt;json_benchmark::copy::citm_catalog::_::&lt;impl serde::de::Deserialize for json_benchmark::copy::citm_catalog::CitmCatalog&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_map (279 samples, 6.43%)</title><rect width="6.429%" height="15" x="64.147%" y="1237" fill="#F45723" fg:w="279" fg:x="2784"/><text x="64.397%" y="1247.5">&lt;json_be..</text></g><g><title>serde::de::MapAccess::next_value (278 samples, 6.41%)</title><rect width="6.405%" height="15" x="64.171%" y="1221" fill="#F61C0A" fg:w="278" fg:x="2785"/><text x="64.421%" y="1231.5">serde::d..</text></g><g><title>&lt;simd_json::serde::de::CommaSeparated as serde::de::MapAccess&gt;::next_value_seed (278 samples, 6.41%)</title><rect width="6.405%" height="15" x="64.171%" y="1205" fill="#E50C2C" fg:w="278" fg:x="2785"/><text x="64.421%" y="1215.5">&lt;simd_js..</text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (278 samples, 6.41%)</title><rect width="6.405%" height="15" x="64.171%" y="1189" fill="#D29125" fg:w="278" fg:x="2785"/><text x="64.421%" y="1199.5">&lt;core::m..</text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize (217 samples, 5.00%)</title><rect width="5%" height="15" x="65.576%" y="1173" fill="#E37034" fg:w="217" fg:x="2846"/><text x="65.826%" y="1183.5">serde:..</text></g><g><title>simd_json::serde::de::&lt;impl serde::de::Deserializer for &amp;mut simd_json::Deserializer&gt;::deserialize_seq (217 samples, 5.00%)</title><rect width="5%" height="15" x="65.576%" y="1157" fill="#EE9B22" fg:w="217" fg:x="2846"/><text x="65.826%" y="1167.5">simd_j..</text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (217 samples, 5.00%)</title><rect width="5%" height="15" x="65.576%" y="1141" fill="#EFE224" fg:w="217" fg:x="2846"/><text x="65.826%" y="1151.5">&lt;serde..</text></g><g><title>serde::de::SeqAccess::next_element (214 samples, 4.93%)</title><rect width="4.931%" height="15" x="65.645%" y="1125" fill="#E61017" fg:w="214" fg:x="2849"/><text x="65.895%" y="1135.5">serde:..</text></g><g><title>&lt;simd_json::serde::de::CommaSeparated as serde::de::SeqAccess&gt;::next_element_seed (214 samples, 4.93%)</title><rect width="4.931%" height="15" x="65.645%" y="1109" fill="#ECAB24" fg:w="214" fg:x="2849"/><text x="65.895%" y="1119.5">&lt;simd_..</text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (214 samples, 4.93%)</title><rect width="4.931%" height="15" x="65.645%" y="1093" fill="#DD160E" fg:w="214" fg:x="2849"/><text x="65.895%" y="1103.5">&lt;core:..</text></g><g><title>json_benchmark::copy::citm_catalog::_::&lt;impl serde::de::Deserialize for json_benchmark::copy::citm_catalog::Performance&gt;::deserialize (214 samples, 4.93%)</title><rect width="4.931%" height="15" x="65.645%" y="1077" fill="#F22B0B" fg:w="214" fg:x="2849"/><text x="65.895%" y="1087.5">json_b..</text></g><g><title>simd_json::serde::de::&lt;impl serde::de::Deserializer for &amp;mut simd_json::Deserializer&gt;::deserialize_struct (214 samples, 4.93%)</title><rect width="4.931%" height="15" x="65.645%" y="1061" fill="#E84517" fg:w="214" fg:x="2849"/><text x="65.895%" y="1071.5">simd_j..</text></g><g><title>&lt;json_benchmark::copy::citm_catalog::_::&lt;impl serde::de::Deserialize for json_benchmark::copy::citm_catalog::Performance&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_map (213 samples, 4.91%)</title><rect width="4.908%" height="15" x="65.668%" y="1045" fill="#D8B436" fg:w="213" fg:x="2850"/><text x="65.918%" y="1055.5">&lt;json_..</text></g><g><title>serde::de::MapAccess::next_value (204 samples, 4.70%)</title><rect width="4.7%" height="15" x="65.876%" y="1029" fill="#D80518" fg:w="204" fg:x="2859"/><text x="66.126%" y="1039.5">serde..</text></g><g><title>&lt;simd_json::serde::de::CommaSeparated as serde::de::MapAccess&gt;::next_value_seed (204 samples, 4.70%)</title><rect width="4.7%" height="15" x="65.876%" y="1013" fill="#E15909" fg:w="204" fg:x="2859"/><text x="66.126%" y="1023.5">&lt;simd..</text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (204 samples, 4.70%)</title><rect width="4.7%" height="15" x="65.876%" y="997" fill="#F34B21" fg:w="204" fg:x="2859"/><text x="66.126%" y="1007.5">&lt;core..</text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for core::option::Option&lt;T&gt;&gt;::deserialize (2 samples, 0.05%)</title><rect width=".046%" height="15" x="70.53%" y="981" fill="#F78D2D" fg:w="2" fg:x="3061"/></g><g><title>simd_json::serde::de::&lt;impl serde::de::Deserializer for &amp;mut simd_json::Deserializer&gt;::deserialize_option (2 samples, 0.05%)</title><rect width=".046%" height="15" x="70.53%" y="965" fill="#E8B124" fg:w="2" fg:x="3061"/></g><g><title>&lt;serde::de::impls::OptionVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_some (2 samples, 0.05%)</title><rect width=".046%" height="15" x="70.53%" y="949" fill="#DB7D24" fg:w="2" fg:x="3061"/></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for alloc::string::String&gt;::deserialize (2 samples, 0.05%)</title><rect width=".046%" height="15" x="70.53%" y="933" fill="#E35E09" fg:w="2" fg:x="3061"/></g><g><title>simd_json::serde::de::&lt;impl serde::de::Deserializer for &amp;mut simd_json::Deserializer&gt;::deserialize_string (2 samples, 0.05%)</title><rect width=".046%" height="15" x="70.53%" y="917" fill="#F02234" fg:w="2" fg:x="3061"/></g><g><title>&lt;serde::de::impls::StringVisitor as serde::de::Visitor&gt;::visit_str (2 samples, 0.05%)</title><rect width=".046%" height="15" x="70.53%" y="901" fill="#D82D0C" fg:w="2" fg:x="3061"/></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (2 samples, 0.05%)</title><rect width=".046%" height="15" x="70.53%" y="885" fill="#F61513" fg:w="2" fg:x="3061"/></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (2 samples, 0.05%)</title><rect width=".046%" height="15" x="70.53%" y="869" fill="#D5622A" fg:w="2" fg:x="3061"/></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (2 samples, 0.05%)</title><rect width=".046%" height="15" x="70.53%" y="853" fill="#FA882F" fg:w="2" fg:x="3061"/></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2 samples, 0.05%)</title><rect width=".046%" height="15" x="70.53%" y="837" fill="#FB7C1B" fg:w="2" fg:x="3061"/></g><g><title>alloc::slice::hack::to_vec (2 samples, 0.05%)</title><rect width=".046%" height="15" x="70.53%" y="821" fill="#E5B40E" fg:w="2" fg:x="3061"/></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2 samples, 0.05%)</title><rect width=".046%" height="15" x="70.53%" y="805" fill="#F5D819" fg:w="2" fg:x="3061"/></g><g><title>?? (2 samples, 0.05%)</title><rect width=".046%" height="15" x="70.53%" y="789" fill="#FB2B05" fg:w="2" fg:x="3061"/></g><g><title>?? (2 samples, 0.05%)</title><rect width=".046%" height="15" x="70.53%" y="773" fill="#FA8018" fg:w="2" fg:x="3061"/></g><g><title>?? (2 samples, 0.05%)</title><rect width=".046%" height="15" x="70.53%" y="757" fill="#D9751B" fg:w="2" fg:x="3061"/></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.05%)</title><rect width=".046%" height="15" x="70.53%" y="741" fill="#F59304" fg:w="2" fg:x="3061"/></g><g><title>?? (2 samples, 0.05%)</title><rect width=".046%" height="15" x="70.53%" y="725" fill="#F2C923" fg:w="2" fg:x="3061"/></g><g><title>alloc::alloc::alloc (2 samples, 0.05%)</title><rect width=".046%" height="15" x="70.53%" y="709" fill="#DAB501" fg:w="2" fg:x="3061"/></g><g><title>__rust_alloc (2 samples, 0.05%)</title><rect width=".046%" height="15" x="70.53%" y="693" fill="#DE061D" fg:w="2" fg:x="3061"/></g><g><title>&lt;jemallocator::Jemalloc as core::alloc::global::GlobalAlloc&gt;::alloc (2 samples, 0.05%)</title><rect width=".046%" height="15" x="70.53%" y="677" fill="#D0BA03" fg:w="2" fg:x="3061"/></g><g><title>_rjem_malloc (1 samples, 0.02%)</title><rect width=".023%" height="15" x="70.553%" y="661" fill="#D8241A" fg:w="1" fg:x="3062"/></g><g><title>imalloc_fastpath (1 samples, 0.02%)</title><rect width=".023%" height="15" x="70.553%" y="645" fill="#F8C917" fg:w="1" fg:x="3062"/></g><g><title>core::core_arch::x86::avx2::_mm256_cmpeq_epi8 (8 samples, 0.18%)</title><rect width=".184%" height="15" x="70.783%" y="1173" fill="#FBAA1F" fg:w="8" fg:x="3072"/></g><g><title>core::core_arch::x86::avx2::_mm256_movemask_epi8 (4 samples, 0.09%)</title><rect width=".092%" height="15" x="70.968%" y="1173" fill="#CF6E19" fg:w="4" fg:x="3080"/></g><g><title>core::core_arch::x86::avx2::_mm256_shuffle_epi8 (8 samples, 0.18%)</title><rect width=".184%" height="15" x="71.06%" y="1173" fill="#FA360F" fg:w="8" fg:x="3084"/></g><g><title>&lt;simd_json::avx2::stage1::SimdInputAVX as simd_json::Stage1Parse&lt;core::core_arch::x86::__m256i&gt;&gt;::find_whitespace_and_structurals (35 samples, 0.81%)</title><rect width=".806%" height="15" x="70.576%" y="1189" fill="#E34421" fg:w="35" fg:x="3063"/></g><g><title>simd_json::Deserializer::from_slice (6 samples, 0.14%)</title><rect width=".138%" height="15" x="71.244%" y="1173" fill="#EE2229" fg:w="6" fg:x="3092"/></g><g><title>?? (7 samples, 0.16%)</title><rect width=".161%" height="15" x="72.419%" y="1141" fill="#DC0B0F" fg:w="7" fg:x="3143"/></g><g><title>simd_json::Deserializer::from_slice (7 samples, 0.16%)</title><rect width=".161%" height="15" x="72.419%" y="1125" fill="#F66F23" fg:w="7" fg:x="3143"/></g><g><title>?? (9 samples, 0.21%)</title><rect width=".207%" height="15" x="72.419%" y="1173" fill="#D15835" fg:w="9" fg:x="3143"/></g><g><title>?? (9 samples, 0.21%)</title><rect width=".207%" height="15" x="72.419%" y="1157" fill="#E7B92F" fg:w="9" fg:x="3143"/></g><g><title>simd_json::Deserializer::from_slice (2 samples, 0.05%)</title><rect width=".046%" height="15" x="72.581%" y="1141" fill="#E99A01" fg:w="2" fg:x="3150"/></g><g><title>core::core_arch::x86::avx2::_mm256_add_epi32 (2 samples, 0.05%)</title><rect width=".046%" height="15" x="72.627%" y="1173" fill="#E10F2E" fg:w="2" fg:x="3152"/></g><g><title>core::core_arch::x86::avx::_mm256_set_epi32 (13 samples, 0.30%)</title><rect width=".299%" height="15" x="72.673%" y="1173" fill="#D38729" fg:w="13" fg:x="3154"/></g><g><title>core::core_arch::x86::avx::_mm256_setr_epi32 (13 samples, 0.30%)</title><rect width=".299%" height="15" x="72.673%" y="1157" fill="#D03600" fg:w="13" fg:x="3154"/></g><g><title>simd_json::Deserializer::from_slice (13 samples, 0.30%)</title><rect width=".299%" height="15" x="72.673%" y="1141" fill="#F4880E" fg:w="13" fg:x="3154"/></g><g><title>core::core_arch::x86::avx::_mm256_storeu_si256 (14 samples, 0.32%)</title><rect width=".323%" height="15" x="72.972%" y="1173" fill="#F1380E" fg:w="14" fg:x="3167"/></g><g><title>&lt;simd_json::avx2::stage1::SimdInputAVX as simd_json::Stage1Parse&lt;core::core_arch::x86::__m256i&gt;&gt;::flatten_bits (123 samples, 2.83%)</title><rect width="2.834%" height="15" x="71.382%" y="1189" fill="#CD5018" fg:w="123" fg:x="3098"/><text x="71.632%" y="1199.5">&lt;s..</text></g><g><title>core::num::&lt;impl u64&gt;::trailing_zeros (40 samples, 0.92%)</title><rect width=".922%" height="15" x="73.295%" y="1173" fill="#DC3904" fg:w="40" fg:x="3181"/></g><g><title>core::core_arch::x86::avx2::_mm256_movemask_epi8 (2 samples, 0.05%)</title><rect width=".046%" height="15" x="74.217%" y="1125" fill="#E2C132" fg:w="2" fg:x="3221"/></g><g><title>?? (5 samples, 0.12%)</title><rect width=".115%" height="15" x="74.217%" y="1141" fill="#E7A816" fg:w="5" fg:x="3221"/></g><g><title>core::core_arch::x86::avx2::_mm256_or_si256 (3 samples, 0.07%)</title><rect width=".069%" height="15" x="74.263%" y="1125" fill="#FED70E" fg:w="3" fg:x="3223"/></g><g><title>&lt;simdutf8::implementation::x86::avx2::ChunkedUtf8ValidatorImp as simdutf8::basic::imp::ChunkedUtf8Validator&gt;::update_from_chunks (18 samples, 0.41%)</title><rect width=".415%" height="15" x="74.217%" y="1189" fill="#D37310" fg:w="18" fg:x="3221"/></g><g><title>?? (18 samples, 0.41%)</title><rect width=".415%" height="15" x="74.217%" y="1173" fill="#ECD210" fg:w="18" fg:x="3221"/></g><g><title>?? (18 samples, 0.41%)</title><rect width=".415%" height="15" x="74.217%" y="1157" fill="#DD5E0C" fg:w="18" fg:x="3221"/></g><g><title>core::core_arch::x86::avx::_mm256_loadu_si256 (13 samples, 0.30%)</title><rect width=".299%" height="15" x="74.332%" y="1141" fill="#EBDA31" fg:w="13" fg:x="3226"/></g><g><title>core::intrinsics::copy_nonoverlapping (13 samples, 0.30%)</title><rect width=".299%" height="15" x="74.332%" y="1125" fill="#D9720E" fg:w="13" fg:x="3226"/></g><g><title>imalloc_no_sample (1 samples, 0.02%)</title><rect width=".023%" height="15" x="74.631%" y="1045" fill="#D89116" fg:w="1" fg:x="3239"/></g><g><title>iallocztm (1 samples, 0.02%)</title><rect width=".023%" height="15" x="74.631%" y="1029" fill="#D97027" fg:w="1" fg:x="3239"/></g><g><title>arena_malloc (1 samples, 0.02%)</title><rect width=".023%" height="15" x="74.631%" y="1013" fill="#E15520" fg:w="1" fg:x="3239"/></g><g><title>_rjem_je_large_palloc (1 samples, 0.02%)</title><rect width=".023%" height="15" x="74.631%" y="997" fill="#F5D12F" fg:w="1" fg:x="3239"/></g><g><title>_rjem_je_arena_extent_alloc_large (1 samples, 0.02%)</title><rect width=".023%" height="15" x="74.631%" y="981" fill="#DADC0F" fg:w="1" fg:x="3239"/></g><g><title>_rjem_je_pa_alloc (1 samples, 0.02%)</title><rect width=".023%" height="15" x="74.631%" y="965" fill="#DECA1F" fg:w="1" fg:x="3239"/></g><g><title>pai_alloc (1 samples, 0.02%)</title><rect width=".023%" height="15" x="74.631%" y="949" fill="#F3CB04" fg:w="1" fg:x="3239"/></g><g><title>pac_alloc_impl (1 samples, 0.02%)</title><rect width=".023%" height="15" x="74.631%" y="933" fill="#ED5C11" fg:w="1" fg:x="3239"/></g><g><title>pac_alloc_real (1 samples, 0.02%)</title><rect width=".023%" height="15" x="74.631%" y="917" fill="#E77707" fg:w="1" fg:x="3239"/></g><g><title>_rjem_je_ecache_alloc (1 samples, 0.02%)</title><rect width=".023%" height="15" x="74.631%" y="901" fill="#ED5229" fg:w="1" fg:x="3239"/></g><g><title>extent_recycle (1 samples, 0.02%)</title><rect width=".023%" height="15" x="74.631%" y="885" fill="#E25130" fg:w="1" fg:x="3239"/></g><g><title>extent_recycle_extract (1 samples, 0.02%)</title><rect width=".023%" height="15" x="74.631%" y="869" fill="#EA4633" fg:w="1" fg:x="3239"/></g><g><title>extent_activate_locked (1 samples, 0.02%)</title><rect width=".023%" height="15" x="74.631%" y="853" fill="#FB5604" fg:w="1" fg:x="3239"/></g><g><title>_rjem_je_eset_remove (1 samples, 0.02%)</title><rect width=".023%" height="15" x="74.631%" y="837" fill="#F4901C" fg:w="1" fg:x="3239"/></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.05%)</title><rect width=".046%" height="15" x="74.631%" y="1173" fill="#E8A127" fg:w="2" fg:x="3239"/></g><g><title>?? (2 samples, 0.05%)</title><rect width=".046%" height="15" x="74.631%" y="1157" fill="#F72233" fg:w="2" fg:x="3239"/></g><g><title>alloc::alloc::alloc (2 samples, 0.05%)</title><rect width=".046%" height="15" x="74.631%" y="1141" fill="#E18402" fg:w="2" fg:x="3239"/></g><g><title>__rust_alloc (2 samples, 0.05%)</title><rect width=".046%" height="15" x="74.631%" y="1125" fill="#D19F2C" fg:w="2" fg:x="3239"/></g><g><title>&lt;jemallocator::Jemalloc as core::alloc::global::GlobalAlloc&gt;::alloc (2 samples, 0.05%)</title><rect width=".046%" height="15" x="74.631%" y="1109" fill="#FBD601" fg:w="2" fg:x="3239"/></g><g><title>_rjem_je_malloc_default (2 samples, 0.05%)</title><rect width=".046%" height="15" x="74.631%" y="1093" fill="#F7542F" fg:w="2" fg:x="3239"/></g><g><title>imalloc (2 samples, 0.05%)</title><rect width=".046%" height="15" x="74.631%" y="1077" fill="#F06F2B" fg:w="2" fg:x="3239"/></g><g><title>imalloc_body (2 samples, 0.05%)</title><rect width=".046%" height="15" x="74.631%" y="1061" fill="#D7D623" fg:w="2" fg:x="3239"/></g><g><title>thread_alloc_event (1 samples, 0.02%)</title><rect width=".023%" height="15" x="74.654%" y="1045" fill="#F8CF17" fg:w="1" fg:x="3240"/></g><g><title>te_event_advance (1 samples, 0.02%)</title><rect width=".023%" height="15" x="74.654%" y="1029" fill="#D6BA04" fg:w="1" fg:x="3240"/></g><g><title>_rjem_je_te_event_trigger (1 samples, 0.02%)</title><rect width=".023%" height="15" x="74.654%" y="1013" fill="#DC8516" fg:w="1" fg:x="3240"/></g><g><title>tcache_event (1 samples, 0.02%)</title><rect width=".023%" height="15" x="74.654%" y="997" fill="#EF8613" fg:w="1" fg:x="3240"/></g><g><title>tcache_gc_large (1 samples, 0.02%)</title><rect width=".023%" height="15" x="74.654%" y="981" fill="#FA8C09" fg:w="1" fg:x="3240"/></g><g><title>_rjem_je_tcache_bin_flush_large (1 samples, 0.02%)</title><rect width=".023%" height="15" x="74.654%" y="965" fill="#E13B0E" fg:w="1" fg:x="3240"/></g><g><title>tcache_bin_flush_bottom (1 samples, 0.02%)</title><rect width=".023%" height="15" x="74.654%" y="949" fill="#D69833" fg:w="1" fg:x="3240"/></g><g><title>tcache_bin_flush_impl (1 samples, 0.02%)</title><rect width=".023%" height="15" x="74.654%" y="933" fill="#FBE32B" fg:w="1" fg:x="3240"/></g><g><title>tcache_bin_flush_edatas_lookup (1 samples, 0.02%)</title><rect width=".023%" height="15" x="74.654%" y="917" fill="#F16011" fg:w="1" fg:x="3240"/></g><g><title>emap_edata_lookup_batch (1 samples, 0.02%)</title><rect width=".023%" height="15" x="74.654%" y="901" fill="#EAC62B" fg:w="1" fg:x="3240"/></g><g><title>rtree_leaf_elm_lookup (1 samples, 0.02%)</title><rect width=".023%" height="15" x="74.654%" y="885" fill="#DC6C1D" fg:w="1" fg:x="3240"/></g><g><title>rtree_cache_direct_map (1 samples, 0.02%)</title><rect width=".023%" height="15" x="74.654%" y="869" fill="#E2A321" fg:w="1" fg:x="3240"/></g><g><title>?? (1 samples, 0.02%)</title><rect width=".023%" height="15" x="74.677%" y="1173" fill="#CDC22D" fg:w="1" fg:x="3241"/></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.02%)</title><rect width=".023%" height="15" x="74.677%" y="1157" fill="#CE8F2C" fg:w="1" fg:x="3241"/></g><g><title>?? (1 samples, 0.02%)</title><rect width=".023%" height="15" x="74.677%" y="1141" fill="#EC8824" fg:w="1" fg:x="3241"/></g><g><title>alloc::alloc::alloc (1 samples, 0.02%)</title><rect width=".023%" height="15" x="74.677%" y="1125" fill="#F9AC2A" fg:w="1" fg:x="3241"/></g><g><title>_rjem_je_malloc_default (1 samples, 0.02%)</title><rect width=".023%" height="15" x="74.677%" y="1109" fill="#D88B17" fg:w="1" fg:x="3241"/></g><g><title>imalloc (1 samples, 0.02%)</title><rect width=".023%" height="15" x="74.677%" y="1093" fill="#CFA614" fg:w="1" fg:x="3241"/></g><g><title>imalloc_body (1 samples, 0.02%)</title><rect width=".023%" height="15" x="74.677%" y="1077" fill="#D2D116" fg:w="1" fg:x="3241"/></g><g><title>imalloc_no_sample (1 samples, 0.02%)</title><rect width=".023%" height="15" x="74.677%" y="1061" fill="#E87614" fg:w="1" fg:x="3241"/></g><g><title>iallocztm (1 samples, 0.02%)</title><rect width=".023%" height="15" x="74.677%" y="1045" fill="#EE712A" fg:w="1" fg:x="3241"/></g><g><title>arena_malloc (1 samples, 0.02%)</title><rect width=".023%" height="15" x="74.677%" y="1029" fill="#E72A05" fg:w="1" fg:x="3241"/></g><g><title>_rjem_je_large_palloc (1 samples, 0.02%)</title><rect width=".023%" height="15" x="74.677%" y="1013" fill="#F3A618" fg:w="1" fg:x="3241"/></g><g><title>_rjem_je_arena_extent_alloc_large (1 samples, 0.02%)</title><rect width=".023%" height="15" x="74.677%" y="997" fill="#EDE20C" fg:w="1" fg:x="3241"/></g><g><title>sz_size2index (1 samples, 0.02%)</title><rect width=".023%" height="15" x="74.677%" y="981" fill="#E58518" fg:w="1" fg:x="3241"/></g><g><title>sz_size2index_compute (1 samples, 0.02%)</title><rect width=".023%" height="15" x="74.677%" y="965" fill="#EE212B" fg:w="1" fg:x="3241"/></g><g><title>_rjem_je_arena_malloc_hard (1 samples, 0.02%)</title><rect width=".023%" height="15" x="74.701%" y="1013" fill="#E33B26" fg:w="1" fg:x="3242"/></g><g><title>?? (5 samples, 0.12%)</title><rect width=".115%" height="15" x="74.631%" y="1189" fill="#E66100" fg:w="5" fg:x="3239"/></g><g><title>simd_json::Deserializer::from_slice (2 samples, 0.05%)</title><rect width=".046%" height="15" x="74.701%" y="1173" fill="#FAAD32" fg:w="2" fg:x="3242"/></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.05%)</title><rect width=".046%" height="15" x="74.701%" y="1157" fill="#F00F32" fg:w="2" fg:x="3242"/></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.05%)</title><rect width=".046%" height="15" x="74.701%" y="1141" fill="#DD5D16" fg:w="2" fg:x="3242"/></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.05%)</title><rect width=".046%" height="15" x="74.701%" y="1125" fill="#F5B435" fg:w="2" fg:x="3242"/></g><g><title>_rjem_je_malloc_default (2 samples, 0.05%)</title><rect width=".046%" height="15" x="74.701%" y="1109" fill="#E75833" fg:w="2" fg:x="3242"/></g><g><title>imalloc (2 samples, 0.05%)</title><rect width=".046%" height="15" x="74.701%" y="1093" fill="#F03A15" fg:w="2" fg:x="3242"/></g><g><title>imalloc_body (2 samples, 0.05%)</title><rect width=".046%" height="15" x="74.701%" y="1077" fill="#ED150A" fg:w="2" fg:x="3242"/></g><g><title>imalloc_no_sample (2 samples, 0.05%)</title><rect width=".046%" height="15" x="74.701%" y="1061" fill="#DA2B0B" fg:w="2" fg:x="3242"/></g><g><title>iallocztm (2 samples, 0.05%)</title><rect width=".046%" height="15" x="74.701%" y="1045" fill="#DADD1D" fg:w="2" fg:x="3242"/></g><g><title>arena_malloc (2 samples, 0.05%)</title><rect width=".046%" height="15" x="74.701%" y="1029" fill="#D6762A" fg:w="2" fg:x="3242"/></g><g><title>_rjem_je_large_palloc (1 samples, 0.02%)</title><rect width=".023%" height="15" x="74.724%" y="1013" fill="#FBC81A" fg:w="1" fg:x="3243"/></g><g><title>_rjem_je_arena_extent_alloc_large (1 samples, 0.02%)</title><rect width=".023%" height="15" x="74.724%" y="997" fill="#ED6527" fg:w="1" fg:x="3243"/></g><g><title>_rjem_je_pa_alloc (1 samples, 0.02%)</title><rect width=".023%" height="15" x="74.724%" y="981" fill="#FB750B" fg:w="1" fg:x="3243"/></g><g><title>pai_alloc (1 samples, 0.02%)</title><rect width=".023%" height="15" x="74.724%" y="965" fill="#D8DF17" fg:w="1" fg:x="3243"/></g><g><title>pac_alloc_impl (1 samples, 0.02%)</title><rect width=".023%" height="15" x="74.724%" y="949" fill="#FB360C" fg:w="1" fg:x="3243"/></g><g><title>pac_alloc_real (1 samples, 0.02%)</title><rect width=".023%" height="15" x="74.724%" y="933" fill="#FEB036" fg:w="1" fg:x="3243"/></g><g><title>_rjem_je_ecache_alloc (1 samples, 0.02%)</title><rect width=".023%" height="15" x="74.724%" y="917" fill="#D22008" fg:w="1" fg:x="3243"/></g><g><title>extent_recycle (1 samples, 0.02%)</title><rect width=".023%" height="15" x="74.724%" y="901" fill="#EB3426" fg:w="1" fg:x="3243"/></g><g><title>extent_recycle_split (1 samples, 0.02%)</title><rect width=".023%" height="15" x="74.724%" y="885" fill="#E7042C" fg:w="1" fg:x="3243"/></g><g><title>extent_split_interior (1 samples, 0.02%)</title><rect width=".023%" height="15" x="74.724%" y="869" fill="#F90220" fg:w="1" fg:x="3243"/></g><g><title>extent_split_impl (1 samples, 0.02%)</title><rect width=".023%" height="15" x="74.724%" y="853" fill="#E0411A" fg:w="1" fg:x="3243"/></g><g><title>_rjem_je_edata_cache_get (1 samples, 0.02%)</title><rect width=".023%" height="15" x="74.724%" y="837" fill="#FA4928" fg:w="1" fg:x="3243"/></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::copy_from (1 samples, 0.02%)</title><rect width=".023%" height="15" x="74.746%" y="1189" fill="#FDB110" fg:w="1" fg:x="3244"/></g><g><title>core::intrinsics::copy (1 samples, 0.02%)</title><rect width=".023%" height="15" x="74.746%" y="1173" fill="#D92022" fg:w="1" fg:x="3244"/></g><g><title>__memset_avx2_unaligned_erms (1 samples, 0.02%)</title><rect width=".023%" height="15" x="74.746%" y="1157" fill="#D4070A" fg:w="1" fg:x="3244"/></g><g><title>simd_json::Deserializer::from_slice (13 samples, 0.30%)</title><rect width=".299%" height="15" x="74.77%" y="1189" fill="#F55908" fg:w="13" fg:x="3245"/></g><g><title>simd_json::Stage1Parse::finalize_structurals (16 samples, 0.37%)</title><rect width=".369%" height="15" x="75.069%" y="1189" fill="#ED1035" fg:w="16" fg:x="3258"/></g><g><title>&lt;simd_json::avx2::stage1::SimdInputAVX as simd_json::Stage1Parse&lt;core::core_arch::x86::__m256i&gt;&gt;::cmp_mask_against_input (4 samples, 0.09%)</title><rect width=".092%" height="15" x="75.461%" y="1173" fill="#FACC1E" fg:w="4" fg:x="3275"/></g><g><title>?? (225 samples, 5.18%)</title><rect width="5.184%" height="15" x="70.576%" y="1205" fill="#D04D1B" fg:w="225" fg:x="3063"/><text x="70.826%" y="1215.5">??</text></g><g><title>simd_json::Stage1Parse::find_odd_backslash_sequences (14 samples, 0.32%)</title><rect width=".323%" height="15" x="75.438%" y="1189" fill="#FACC1C" fg:w="14" fg:x="3274"/></g><g><title>core::num::&lt;impl u64&gt;::overflowing_add (9 samples, 0.21%)</title><rect width=".207%" height="15" x="75.553%" y="1173" fill="#F43F15" fg:w="9" fg:x="3279"/></g><g><title>?? (321 samples, 7.40%)</title><rect width="7.396%" height="15" x="70.576%" y="1221" fill="#EC552C" fg:w="321" fg:x="3063"/><text x="70.826%" y="1231.5">??</text></g><g><title>simd_json::Deserializer::from_slice (96 samples, 2.21%)</title><rect width="2.212%" height="15" x="75.76%" y="1205" fill="#D76204" fg:w="96" fg:x="3288"/><text x="76.01%" y="1215.5">s..</text></g><g><title>_rjem_je_pa_dalloc (1 samples, 0.02%)</title><rect width=".023%" height="15" x="77.995%" y="1061" fill="#EB260B" fg:w="1" fg:x="3385"/></g><g><title>pa_get_pai (1 samples, 0.02%)</title><rect width=".023%" height="15" x="77.995%" y="1045" fill="#FEBA19" fg:w="1" fg:x="3385"/></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;(simd_json::stage2::StackState,usize,usize)&gt;&gt; (3 samples, 0.07%)</title><rect width=".069%" height="15" x="77.972%" y="1221" fill="#E1371F" fg:w="3" fg:x="3384"/></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;(simd_json::stage2::StackState,usize,usize)&gt;&gt; (3 samples, 0.07%)</title><rect width=".069%" height="15" x="77.972%" y="1205" fill="#D30F15" fg:w="3" fg:x="3384"/></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.07%)</title><rect width=".069%" height="15" x="77.972%" y="1189" fill="#D7BB29" fg:w="3" fg:x="3384"/></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (3 samples, 0.07%)</title><rect width=".069%" height="15" x="77.972%" y="1173" fill="#F84520" fg:w="3" fg:x="3384"/></g><g><title>alloc::alloc::dealloc (3 samples, 0.07%)</title><rect width=".069%" height="15" x="77.972%" y="1157" fill="#FC6634" fg:w="3" fg:x="3384"/></g><g><title>__rust_dealloc (3 samples, 0.07%)</title><rect width=".069%" height="15" x="77.972%" y="1141" fill="#FD8C20" fg:w="3" fg:x="3384"/></g><g><title>&lt;jemallocator::Jemalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (3 samples, 0.07%)</title><rect width=".069%" height="15" x="77.972%" y="1125" fill="#D8382A" fg:w="3" fg:x="3384"/></g><g><title>_rjem_je_sdallocx_default (3 samples, 0.07%)</title><rect width=".069%" height="15" x="77.972%" y="1109" fill="#D8B80E" fg:w="3" fg:x="3384"/></g><g><title>_rjem_je_large_dalloc (2 samples, 0.05%)</title><rect width=".046%" height="15" x="77.995%" y="1093" fill="#EDBB1B" fg:w="2" fg:x="3385"/></g><g><title>large_dalloc_finish_impl (2 samples, 0.05%)</title><rect width=".046%" height="15" x="77.995%" y="1077" fill="#DB4103" fg:w="2" fg:x="3385"/></g><g><title>pac_dalloc_impl (1 samples, 0.02%)</title><rect width=".023%" height="15" x="78.018%" y="1061" fill="#F55319" fg:w="1" fg:x="3386"/></g><g><title>_rjem_je_extent_record (1 samples, 0.02%)</title><rect width=".023%" height="15" x="78.018%" y="1045" fill="#D6CD2D" fg:w="1" fg:x="3386"/></g><g><title>extent_try_coalesce_large (1 samples, 0.02%)</title><rect width=".023%" height="15" x="78.018%" y="1029" fill="#F11412" fg:w="1" fg:x="3386"/></g><g><title>extent_try_coalesce_impl (1 samples, 0.02%)</title><rect width=".023%" height="15" x="78.018%" y="1013" fill="#E8A317" fg:w="1" fg:x="3386"/></g><g><title>_rjem_je_emap_try_acquire_edata_neighbor (1 samples, 0.02%)</title><rect width=".023%" height="15" x="78.018%" y="997" fill="#D6052E" fg:w="1" fg:x="3386"/></g><g><title>emap_try_acquire_edata_neighbor_impl (1 samples, 0.02%)</title><rect width=".023%" height="15" x="78.018%" y="981" fill="#E54E11" fg:w="1" fg:x="3386"/></g><g><title>rtree_leaf_elm_read (1 samples, 0.02%)</title><rect width=".023%" height="15" x="78.018%" y="965" fill="#F8590A" fg:w="1" fg:x="3386"/></g><g><title>rtree_leaf_elm_bits_decode (1 samples, 0.02%)</title><rect width=".023%" height="15" x="78.018%" y="949" fill="#F8360F" fg:w="1" fg:x="3386"/></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (8 samples, 0.18%)</title><rect width=".184%" height="15" x="78.041%" y="1221" fill="#DF7406" fg:w="8" fg:x="3387"/></g><g><title>core::ptr::write (51 samples, 1.18%)</title><rect width="1.175%" height="15" x="78.226%" y="1205" fill="#CD7D26" fg:w="51" fg:x="3395"/></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (52 samples, 1.20%)</title><rect width="1.198%" height="15" x="78.226%" y="1221" fill="#FB4E26" fg:w="52" fg:x="3395"/></g><g><title>simd_json::Deserializer::from_slice (1 samples, 0.02%)</title><rect width=".023%" height="15" x="79.401%" y="1205" fill="#FD4E1C" fg:w="1" fg:x="3446"/></g><g><title>simd_json::Deserializer::from_slice (1 samples, 0.02%)</title><rect width=".023%" height="15" x="79.424%" y="1221" fill="#D17803" fg:w="1" fg:x="3447"/></g><g><title>?? (386 samples, 8.89%)</title><rect width="8.894%" height="15" x="70.576%" y="1237" fill="#EEE509" fg:w="386" fg:x="3063"/><text x="70.826%" y="1247.5">??</text></g><g><title>simd_json::stage2::is_valid_null_atom (1 samples, 0.02%)</title><rect width=".023%" height="15" x="79.447%" y="1221" fill="#FD9F12" fg:w="1" fg:x="3448"/></g><g><title>simd_json::Deserializer::from_slice (1 samples, 0.02%)</title><rect width=".023%" height="15" x="79.447%" y="1205" fill="#F42A22" fg:w="1" fg:x="3448"/></g><g><title>core::intrinsics::copy_nonoverlapping (180 samples, 4.15%)</title><rect width="4.147%" height="15" x="79.47%" y="1237" fill="#E00807" fg:w="180" fg:x="3449"/><text x="79.72%" y="1247.5">core:..</text></g><g><title>__memmove_avx_unaligned_erms (180 samples, 4.15%)</title><rect width="4.147%" height="15" x="79.47%" y="1221" fill="#D2C92D" fg:w="180" fg:x="3449"/><text x="79.72%" y="1231.5">__mem..</text></g><g><title>simd_json::Deserializer::parse_str_ (8 samples, 0.18%)</title><rect width=".184%" height="15" x="89.263%" y="1205" fill="#FCB915" fg:w="8" fg:x="3874"/></g><g><title>core::core_arch::x86::avx2::_mm256_cmpeq_epi8 (23 samples, 0.53%)</title><rect width=".53%" height="15" x="89.608%" y="1189" fill="#DF8301" fg:w="23" fg:x="3889"/></g><g><title>core::core_arch::x86::avx2::_mm256_movemask_epi8 (7 samples, 0.16%)</title><rect width=".161%" height="15" x="90.138%" y="1189" fill="#F58D10" fg:w="7" fg:x="3912"/></g><g><title>core::num::&lt;impl u32&gt;::wrapping_sub (1 samples, 0.02%)</title><rect width=".023%" height="15" x="90.299%" y="1189" fill="#E5372D" fg:w="1" fg:x="3919"/></g><g><title>simd_json::Deserializer::parse_str_ (82 samples, 1.89%)</title><rect width="1.889%" height="15" x="88.641%" y="1221" fill="#D05C0F" fg:w="82" fg:x="3847"/><text x="88.891%" y="1231.5">s..</text></g><g><title>simd_json::avx2::deser::parse_str_avx (47 samples, 1.08%)</title><rect width="1.083%" height="15" x="89.447%" y="1205" fill="#EAB92F" fg:w="47" fg:x="3882"/></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (9 samples, 0.21%)</title><rect width=".207%" height="15" x="90.323%" y="1189" fill="#FD6832" fg:w="9" fg:x="3920"/></g><g><title>core::convert::num::&lt;impl core::convert::From&lt;u8&gt; for u64&gt;::from (26 samples, 0.60%)</title><rect width=".599%" height="15" x="91.843%" y="1205" fill="#CD4607" fg:w="26" fg:x="3986"/></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (1 samples, 0.02%)</title><rect width=".023%" height="15" x="92.442%" y="1205" fill="#F0B22B" fg:w="1" fg:x="4012"/></g><g><title>core::num::&lt;impl u64&gt;::wrapping_mul (3 samples, 0.07%)</title><rect width=".069%" height="15" x="92.465%" y="1205" fill="#D67002" fg:w="3" fg:x="4013"/></g><g><title>?? (969 samples, 22.33%)</title><rect width="22.327%" height="15" x="70.576%" y="1253" fill="#CE2E11" fg:w="969" fg:x="3063"/><text x="70.826%" y="1263.5">??</text></g><g><title>simd_json::Deserializer::from_slice (403 samples, 9.29%)</title><rect width="9.286%" height="15" x="83.618%" y="1237" fill="#E1DC10" fg:w="403" fg:x="3629"/><text x="83.868%" y="1247.5">simd_json::De..</text></g><g><title>simd_json::numberparse::correct::&lt;impl simd_json::Deserializer&gt;::parse_number (103 samples, 2.37%)</title><rect width="2.373%" height="15" x="90.53%" y="1221" fill="#EE4128" fg:w="103" fg:x="3929"/><text x="90.78%" y="1231.5">si..</text></g><g><title>simd_json::numberparse::is_integer (16 samples, 0.37%)</title><rect width=".369%" height="15" x="92.535%" y="1205" fill="#E69715" fg:w="16" fg:x="4016"/></g><g><title>core::num::&lt;impl u8&gt;::is_ascii_digit (16 samples, 0.37%)</title><rect width=".369%" height="15" x="92.535%" y="1189" fill="#DA3A31" fg:w="16" fg:x="4016"/></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (1,257 samples, 28.96%)</title><rect width="28.963%" height="15" x="63.963%" y="1445" fill="#DBB30E" fg:w="1257" fg:x="2776"/><text x="64.213%" y="1455.5">&lt;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::co..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1,257 samples, 28.96%)</title><rect width="28.963%" height="15" x="63.963%" y="1429" fill="#DF4801" fg:w="1257" fg:x="2776"/><text x="64.213%" y="1439.5">&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_exten..</text></g><g><title>?? (1,257 samples, 28.96%)</title><rect width="28.963%" height="15" x="63.963%" y="1413" fill="#EE7E0A" fg:w="1257" fg:x="2776"/><text x="64.213%" y="1423.5">??</text></g><g><title>core::iter::traits::iterator::Iterator::for_each (1,257 samples, 28.96%)</title><rect width="28.963%" height="15" x="63.963%" y="1397" fill="#E0CE26" fg:w="1257" fg:x="2776"/><text x="64.213%" y="1407.5">core::iter::traits::iterator::Iterator::for_each</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1,257 samples, 28.96%)</title><rect width="28.963%" height="15" x="63.963%" y="1381" fill="#D4C936" fg:w="1257" fg:x="2776"/><text x="64.213%" y="1391.5">&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::i..</text></g><g><title>core::iter::traits::iterator::Iterator::fold (1,257 samples, 28.96%)</title><rect width="28.963%" height="15" x="63.963%" y="1365" fill="#DA9A30" fg:w="1257" fg:x="2776"/><text x="64.213%" y="1375.5">core::iter::traits::iterator::Iterator::fold</text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (1,257 samples, 28.96%)</title><rect width="28.963%" height="15" x="63.963%" y="1349" fill="#E85D18" fg:w="1257" fg:x="2776"/><text x="64.213%" y="1359.5">core::iter::adapters::map::map_fold::_{{closure..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (1,257 samples, 28.96%)</title><rect width="28.963%" height="15" x="63.963%" y="1333" fill="#F51E15" fg:w="1257" fg:x="2776"/><text x="64.213%" y="1343.5">core::ops::function::impls::&lt;impl core::ops::fu..</text></g><g><title>deserialize_struct::bench_citm_catalog_CitmCatalog::_{{closure}}::_{{closure}} (1,257 samples, 28.96%)</title><rect width="28.963%" height="15" x="63.963%" y="1317" fill="#F2941D" fg:w="1257" fg:x="2776"/><text x="64.213%" y="1327.5">deserialize_struct::bench_citm_catalog_CitmCata..</text></g><g><title>deserialize_struct::simd_json_parse_struct (1,252 samples, 28.85%)</title><rect width="28.848%" height="15" x="64.078%" y="1301" fill="#F49936" fg:w="1252" fg:x="2781"/><text x="64.328%" y="1311.5">deserialize_struct::simd_json_parse_struct</text></g><g><title>simd_json::serde::from_slice (1,252 samples, 28.85%)</title><rect width="28.848%" height="15" x="64.078%" y="1285" fill="#FC5716" fg:w="1252" fg:x="2781"/><text x="64.328%" y="1295.5">simd_json::serde::from_slice</text></g><g><title>simd_json::Deserializer::from_slice (970 samples, 22.35%)</title><rect width="22.35%" height="15" x="70.576%" y="1269" fill="#D2331D" fg:w="970" fg:x="3063"/><text x="70.826%" y="1279.5">simd_json::Deserializer::from_slice</text></g><g><title>simd_json::Deserializer::from_slice (1 samples, 0.02%)</title><rect width=".023%" height="15" x="92.903%" y="1253" fill="#F2882F" fg:w="1" fg:x="4032"/></g><g><title>?? (1 samples, 0.02%)</title><rect width=".023%" height="15" x="92.926%" y="1445" fill="#EE4404" fg:w="1" fg:x="4033"/></g><g><title>?? (1 samples, 0.02%)</title><rect width=".023%" height="15" x="92.926%" y="1429" fill="#F2A11E" fg:w="1" fg:x="4033"/></g><g><title>?? (1 samples, 0.02%)</title><rect width=".023%" height="15" x="92.926%" y="1413" fill="#DA3A2C" fg:w="1" fg:x="4033"/></g><g><title>?? (1 samples, 0.02%)</title><rect width=".023%" height="15" x="92.926%" y="1397" fill="#FC7D20" fg:w="1" fg:x="4033"/></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.02%)</title><rect width=".023%" height="15" x="92.926%" y="1381" fill="#DBB200" fg:w="1" fg:x="4033"/></g><g><title>?? (1 samples, 0.02%)</title><rect width=".023%" height="15" x="92.926%" y="1365" fill="#D59807" fg:w="1" fg:x="4033"/></g><g><title>alloc::alloc::alloc (1 samples, 0.02%)</title><rect width=".023%" height="15" x="92.926%" y="1349" fill="#F96D22" fg:w="1" fg:x="4033"/></g><g><title>__rust_alloc (1 samples, 0.02%)</title><rect width=".023%" height="15" x="92.926%" y="1333" fill="#E86015" fg:w="1" fg:x="4033"/></g><g><title>&lt;jemallocator::Jemalloc as core::alloc::global::GlobalAlloc&gt;::alloc (1 samples, 0.02%)</title><rect width=".023%" height="15" x="92.926%" y="1317" fill="#E41B27" fg:w="1" fg:x="4033"/></g><g><title>_rjem_malloc (1 samples, 0.02%)</title><rect width=".023%" height="15" x="92.926%" y="1301" fill="#D3B634" fg:w="1" fg:x="4033"/></g><g><title>imalloc_fastpath (1 samples, 0.02%)</title><rect width=".023%" height="15" x="92.926%" y="1285" fill="#EAB226" fg:w="1" fg:x="4033"/></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (2 samples, 0.05%)</title><rect width=".046%" height="15" x="92.949%" y="1285" fill="#DD6F03" fg:w="2" fg:x="4034"/></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted::_{{closure}} (2 samples, 0.05%)</title><rect width=".046%" height="15" x="92.949%" y="1269" fill="#E4AF15" fg:w="2" fg:x="4034"/></g><g><title>core::ptr::write (2 samples, 0.05%)</title><rect width=".046%" height="15" x="92.949%" y="1253" fill="#E4AE2B" fg:w="2" fg:x="4034"/></g><g><title>extent_recycle_extract (1 samples, 0.02%)</title><rect width=".023%" height="15" x="92.995%" y="837" fill="#D3BF00" fg:w="1" fg:x="4036"/></g><g><title>extent_activate_locked (1 samples, 0.02%)</title><rect width=".023%" height="15" x="92.995%" y="821" fill="#FD7503" fg:w="1" fg:x="4036"/></g><g><title>_rjem_je_eset_remove (1 samples, 0.02%)</title><rect width=".023%" height="15" x="92.995%" y="805" fill="#F17F13" fg:w="1" fg:x="4036"/></g><g><title>_rjem_je_edata_heap_remove (1 samples, 0.02%)</title><rect width=".023%" height="15" x="92.995%" y="789" fill="#DA670C" fg:w="1" fg:x="4036"/></g><g><title>ph_remove (1 samples, 0.02%)</title><rect width=".023%" height="15" x="92.995%" y="773" fill="#ECD62B" fg:w="1" fg:x="4036"/></g><g><title>_rjem_je_edata_avail_first (1 samples, 0.02%)</title><rect width=".023%" height="15" x="93.018%" y="773" fill="#F49013" fg:w="1" fg:x="4037"/></g><g><title>ph_first (1 samples, 0.02%)</title><rect width=".023%" height="15" x="93.018%" y="757" fill="#F6BC0A" fg:w="1" fg:x="4037"/></g><g><title>ph_merge_aux (1 samples, 0.02%)</title><rect width=".023%" height="15" x="93.018%" y="741" fill="#D4C121" fg:w="1" fg:x="4037"/></g><g><title>phn_merge_siblings (1 samples, 0.02%)</title><rect width=".023%" height="15" x="93.018%" y="725" fill="#F1331D" fg:w="1" fg:x="4037"/></g><g><title>phn_prev_set (1 samples, 0.02%)</title><rect width=".023%" height="15" x="93.018%" y="709" fill="#D33A13" fg:w="1" fg:x="4037"/></g><g><title>imalloc_no_sample (3 samples, 0.07%)</title><rect width=".069%" height="15" x="92.995%" y="1013" fill="#E56F1A" fg:w="3" fg:x="4036"/></g><g><title>iallocztm (3 samples, 0.07%)</title><rect width=".069%" height="15" x="92.995%" y="997" fill="#D57328" fg:w="3" fg:x="4036"/></g><g><title>arena_malloc (3 samples, 0.07%)</title><rect width=".069%" height="15" x="92.995%" y="981" fill="#D1382C" fg:w="3" fg:x="4036"/></g><g><title>_rjem_je_large_palloc (3 samples, 0.07%)</title><rect width=".069%" height="15" x="92.995%" y="965" fill="#E66C20" fg:w="3" fg:x="4036"/></g><g><title>_rjem_je_arena_extent_alloc_large (3 samples, 0.07%)</title><rect width=".069%" height="15" x="92.995%" y="949" fill="#D8A51F" fg:w="3" fg:x="4036"/></g><g><title>_rjem_je_pa_alloc (3 samples, 0.07%)</title><rect width=".069%" height="15" x="92.995%" y="933" fill="#DA7A15" fg:w="3" fg:x="4036"/></g><g><title>pai_alloc (3 samples, 0.07%)</title><rect width=".069%" height="15" x="92.995%" y="917" fill="#DFE02F" fg:w="3" fg:x="4036"/></g><g><title>pac_alloc_impl (3 samples, 0.07%)</title><rect width=".069%" height="15" x="92.995%" y="901" fill="#EE662C" fg:w="3" fg:x="4036"/></g><g><title>pac_alloc_real (3 samples, 0.07%)</title><rect width=".069%" height="15" x="92.995%" y="885" fill="#EC2E28" fg:w="3" fg:x="4036"/></g><g><title>_rjem_je_ecache_alloc (3 samples, 0.07%)</title><rect width=".069%" height="15" x="92.995%" y="869" fill="#F7CA32" fg:w="3" fg:x="4036"/></g><g><title>extent_recycle (3 samples, 0.07%)</title><rect width=".069%" height="15" x="92.995%" y="853" fill="#D16314" fg:w="3" fg:x="4036"/></g><g><title>extent_recycle_split (2 samples, 0.05%)</title><rect width=".046%" height="15" x="93.018%" y="837" fill="#FC1B22" fg:w="2" fg:x="4037"/></g><g><title>extent_split_interior (2 samples, 0.05%)</title><rect width=".046%" height="15" x="93.018%" y="821" fill="#D7CE17" fg:w="2" fg:x="4037"/></g><g><title>extent_split_impl (2 samples, 0.05%)</title><rect width=".046%" height="15" x="93.018%" y="805" fill="#D48724" fg:w="2" fg:x="4037"/></g><g><title>_rjem_je_edata_cache_get (2 samples, 0.05%)</title><rect width=".046%" height="15" x="93.018%" y="789" fill="#F0BD01" fg:w="2" fg:x="4037"/></g><g><title>_rjem_je_edata_avail_remove (1 samples, 0.02%)</title><rect width=".023%" height="15" x="93.041%" y="773" fill="#F23814" fg:w="1" fg:x="4038"/></g><g><title>ph_remove (1 samples, 0.02%)</title><rect width=".023%" height="15" x="93.041%" y="757" fill="#F78421" fg:w="1" fg:x="4038"/></g><g><title>ph_merge_children (1 samples, 0.02%)</title><rect width=".023%" height="15" x="93.041%" y="741" fill="#D0950B" fg:w="1" fg:x="4038"/></g><g><title>phn_merge_siblings (1 samples, 0.02%)</title><rect width=".023%" height="15" x="93.041%" y="725" fill="#D3210B" fg:w="1" fg:x="4038"/></g><g><title>?? (4 samples, 0.09%)</title><rect width=".092%" height="15" x="92.995%" y="1189" fill="#DD1D26" fg:w="4" fg:x="4036"/></g><g><title>?? (4 samples, 0.09%)</title><rect width=".092%" height="15" x="92.995%" y="1173" fill="#CEB631" fg:w="4" fg:x="4036"/></g><g><title>?? (4 samples, 0.09%)</title><rect width=".092%" height="15" x="92.995%" y="1157" fill="#D88C01" fg:w="4" fg:x="4036"/></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (4 samples, 0.09%)</title><rect width=".092%" height="15" x="92.995%" y="1141" fill="#E83928" fg:w="4" fg:x="4036"/></g><g><title>?? (4 samples, 0.09%)</title><rect width=".092%" height="15" x="92.995%" y="1125" fill="#E0BA12" fg:w="4" fg:x="4036"/></g><g><title>alloc::alloc::alloc (4 samples, 0.09%)</title><rect width=".092%" height="15" x="92.995%" y="1109" fill="#D7790B" fg:w="4" fg:x="4036"/></g><g><title>__rust_alloc (4 samples, 0.09%)</title><rect width=".092%" height="15" x="92.995%" y="1093" fill="#F5930A" fg:w="4" fg:x="4036"/></g><g><title>&lt;jemallocator::Jemalloc as core::alloc::global::GlobalAlloc&gt;::alloc (4 samples, 0.09%)</title><rect width=".092%" height="15" x="92.995%" y="1077" fill="#EE990D" fg:w="4" fg:x="4036"/></g><g><title>_rjem_je_malloc_default (4 samples, 0.09%)</title><rect width=".092%" height="15" x="92.995%" y="1061" fill="#E96C00" fg:w="4" fg:x="4036"/></g><g><title>imalloc (4 samples, 0.09%)</title><rect width=".092%" height="15" x="92.995%" y="1045" fill="#D49D11" fg:w="4" fg:x="4036"/></g><g><title>imalloc_body (4 samples, 0.09%)</title><rect width=".092%" height="15" x="92.995%" y="1029" fill="#E1D526" fg:w="4" fg:x="4036"/></g><g><title>thread_alloc_event (1 samples, 0.02%)</title><rect width=".023%" height="15" x="93.064%" y="1013" fill="#F8100B" fg:w="1" fg:x="4039"/></g><g><title>te_event_advance (1 samples, 0.02%)</title><rect width=".023%" height="15" x="93.064%" y="997" fill="#F12104" fg:w="1" fg:x="4039"/></g><g><title>_rjem_je_te_event_trigger (1 samples, 0.02%)</title><rect width=".023%" height="15" x="93.064%" y="981" fill="#DE1A2B" fg:w="1" fg:x="4039"/></g><g><title>tcache_event (1 samples, 0.02%)</title><rect width=".023%" height="15" x="93.064%" y="965" fill="#F31D24" fg:w="1" fg:x="4039"/></g><g><title>tcache_gc_small (1 samples, 0.02%)</title><rect width=".023%" height="15" x="93.064%" y="949" fill="#F1091B" fg:w="1" fg:x="4039"/></g><g><title>_rjem_je_tcache_bin_flush_small (1 samples, 0.02%)</title><rect width=".023%" height="15" x="93.064%" y="933" fill="#CD751A" fg:w="1" fg:x="4039"/></g><g><title>tcache_bin_flush_bottom (1 samples, 0.02%)</title><rect width=".023%" height="15" x="93.064%" y="917" fill="#D15027" fg:w="1" fg:x="4039"/></g><g><title>tcache_bin_flush_impl (1 samples, 0.02%)</title><rect width=".023%" height="15" x="93.064%" y="901" fill="#EF9B06" fg:w="1" fg:x="4039"/></g><g><title>_rjem_je_arena_slab_dalloc (1 samples, 0.02%)</title><rect width=".023%" height="15" x="93.064%" y="885" fill="#D4680C" fg:w="1" fg:x="4039"/></g><g><title>pac_dalloc_impl (1 samples, 0.02%)</title><rect width=".023%" height="15" x="93.064%" y="869" fill="#EACC03" fg:w="1" fg:x="4039"/></g><g><title>_rjem_je_extent_record (1 samples, 0.02%)</title><rect width=".023%" height="15" x="93.064%" y="853" fill="#FBDA07" fg:w="1" fg:x="4039"/></g><g><title>extent_deactivate_locked (1 samples, 0.02%)</title><rect width=".023%" height="15" x="93.064%" y="837" fill="#DD5120" fg:w="1" fg:x="4039"/></g><g><title>extent_deactivate_locked_impl (1 samples, 0.02%)</title><rect width=".023%" height="15" x="93.064%" y="821" fill="#D6981A" fg:w="1" fg:x="4039"/></g><g><title>_rjem_je_eset_insert (1 samples, 0.02%)</title><rect width=".023%" height="15" x="93.064%" y="805" fill="#DF1603" fg:w="1" fg:x="4039"/></g><g><title>eset_stats_add (1 samples, 0.02%)</title><rect width=".023%" height="15" x="93.064%" y="789" fill="#CFAE07" fg:w="1" fg:x="4039"/></g><g><title>_rjem_je_eset_insert (1 samples, 0.02%)</title><rect width=".023%" height="15" x="93.064%" y="773" fill="#E01334" fg:w="1" fg:x="4039"/></g><g><title>core::iter::traits::iterator::Iterator::collect (158 samples, 3.64%)</title><rect width="3.641%" height="15" x="92.949%" y="1445" fill="#E4180E" fg:w="158" fg:x="4034"/><text x="93.199%" y="1455.5">core..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (158 samples, 3.64%)</title><rect width="3.641%" height="15" x="92.949%" y="1429" fill="#E6992B" fg:w="158" fg:x="4034"/><text x="93.199%" y="1439.5">&lt;all..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (158 samples, 3.64%)</title><rect width="3.641%" height="15" x="92.949%" y="1413" fill="#E76A0C" fg:w="158" fg:x="4034"/><text x="93.199%" y="1423.5">&lt;all..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (158 samples, 3.64%)</title><rect width="3.641%" height="15" x="92.949%" y="1397" fill="#D75C02" fg:w="158" fg:x="4034"/><text x="93.199%" y="1407.5">&lt;all..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (158 samples, 3.64%)</title><rect width="3.641%" height="15" x="92.949%" y="1381" fill="#F98F19" fg:w="158" fg:x="4034"/><text x="93.199%" y="1391.5">&lt;all..</text></g><g><title>?? (158 samples, 3.64%)</title><rect width="3.641%" height="15" x="92.949%" y="1365" fill="#FC0723" fg:w="158" fg:x="4034"/><text x="93.199%" y="1375.5">??</text></g><g><title>core::iter::traits::iterator::Iterator::for_each (158 samples, 3.64%)</title><rect width="3.641%" height="15" x="92.949%" y="1349" fill="#D84528" fg:w="158" fg:x="4034"/><text x="93.199%" y="1359.5">core..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (158 samples, 3.64%)</title><rect width="3.641%" height="15" x="92.949%" y="1333" fill="#F02421" fg:w="158" fg:x="4034"/><text x="93.199%" y="1343.5">&lt;cor..</text></g><g><title>core::iter::traits::iterator::Iterator::fold (158 samples, 3.64%)</title><rect width="3.641%" height="15" x="92.949%" y="1317" fill="#E7800E" fg:w="158" fg:x="4034"/><text x="93.199%" y="1327.5">core..</text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (158 samples, 3.64%)</title><rect width="3.641%" height="15" x="92.949%" y="1301" fill="#F58F0E" fg:w="158" fg:x="4034"/><text x="93.199%" y="1311.5">core..</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter_batched::_{{closure}} (156 samples, 3.59%)</title><rect width="3.595%" height="15" x="92.995%" y="1285" fill="#DE821C" fg:w="156" fg:x="4036"/><text x="93.245%" y="1295.5">crit..</text></g><g><title>deserialize_struct::bench_citm_catalog_CitmCatalog::_{{closure}}::_{{closure}} (156 samples, 3.59%)</title><rect width="3.595%" height="15" x="92.995%" y="1269" fill="#D40A30" fg:w="156" fg:x="4036"/><text x="93.245%" y="1279.5">dese..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (156 samples, 3.59%)</title><rect width="3.595%" height="15" x="92.995%" y="1253" fill="#FE762D" fg:w="156" fg:x="4036"/><text x="93.245%" y="1263.5">&lt;all..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (156 samples, 3.59%)</title><rect width="3.595%" height="15" x="92.995%" y="1237" fill="#E4062D" fg:w="156" fg:x="4036"/><text x="93.245%" y="1247.5">allo..</text></g><g><title>alloc::slice::hack::to_vec (156 samples, 3.59%)</title><rect width="3.595%" height="15" x="92.995%" y="1221" fill="#F11223" fg:w="156" fg:x="4036"/><text x="93.245%" y="1231.5">allo..</text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (156 samples, 3.59%)</title><rect width="3.595%" height="15" x="92.995%" y="1205" fill="#E3D635" fg:w="156" fg:x="4036"/><text x="93.245%" y="1215.5">&lt;T a..</text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (152 samples, 3.50%)</title><rect width="3.502%" height="15" x="93.088%" y="1189" fill="#E06B33" fg:w="152" fg:x="4040"/><text x="93.338%" y="1199.5">cor..</text></g><g><title>core::intrinsics::copy_nonoverlapping (152 samples, 3.50%)</title><rect width="3.502%" height="15" x="93.088%" y="1173" fill="#F83C1C" fg:w="152" fg:x="4040"/><text x="93.338%" y="1183.5">cor..</text></g><g><title>__memmove_avx_unaligned_erms (152 samples, 3.50%)</title><rect width="3.502%" height="15" x="93.088%" y="1157" fill="#F96517" fg:w="152" fg:x="4040"/><text x="93.338%" y="1167.5">__m..</text></g><g><title>core::mem::drop (2 samples, 0.05%)</title><rect width=".046%" height="15" x="96.59%" y="1445" fill="#E43313" fg:w="2" fg:x="4192"/></g><g><title>core::ptr::drop_in_place&lt;core::result::Result&lt;json_benchmark::copy::citm_catalog::CitmCatalog,simd_json::error::Error&gt;&gt; (2 samples, 0.05%)</title><rect width=".046%" height="15" x="96.59%" y="1429" fill="#D51406" fg:w="2" fg:x="4192"/></g><g><title>core::ptr::drop_in_place&lt;json_benchmark::copy::citm_catalog::CitmCatalog&gt; (2 samples, 0.05%)</title><rect width=".046%" height="15" x="96.59%" y="1413" fill="#D47C0A" fg:w="2" fg:x="4192"/></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::BTreeMap&lt;json_benchmark::prim_str::PrimStr&lt;u32&gt;,json_benchmark::copy::citm_catalog::Event&gt;&gt; (2 samples, 0.05%)</title><rect width=".046%" height="15" x="96.59%" y="1397" fill="#F80328" fg:w="2" fg:x="4192"/></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.05%)</title><rect width=".046%" height="15" x="96.59%" y="1381" fill="#DFB217" fg:w="2" fg:x="4192"/></g><g><title>core::mem::drop (2 samples, 0.05%)</title><rect width=".046%" height="15" x="96.59%" y="1365" fill="#F0842D" fg:w="2" fg:x="4192"/></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;json_benchmark::prim_str::PrimStr&lt;u32&gt;,json_benchmark::copy::citm_catalog::Event&gt;&gt; (2 samples, 0.05%)</title><rect width=".046%" height="15" x="96.59%" y="1349" fill="#F5A424" fg:w="2" fg:x="4192"/></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.05%)</title><rect width=".046%" height="15" x="96.59%" y="1333" fill="#E7BC35" fg:w="2" fg:x="4192"/></g><g><title>?? (2 samples, 0.05%)</title><rect width=".046%" height="15" x="96.59%" y="1317" fill="#EDC627" fg:w="2" fg:x="4192"/></g><g><title>core::ptr::drop_in_place&lt;json_benchmark::copy::citm_catalog::CitmCatalog&gt; (2 samples, 0.05%)</title><rect width=".046%" height="15" x="96.59%" y="1301" fill="#DF7823" fg:w="2" fg:x="4192"/></g><g><title>core::ptr::drop_in_place&lt;json_benchmark::copy::citm_catalog::Event&gt; (2 samples, 0.05%)</title><rect width=".046%" height="15" x="96.59%" y="1285" fill="#FD6B31" fg:w="2" fg:x="4192"/></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;alloc::string::String&gt;&gt; (2 samples, 0.05%)</title><rect width=".046%" height="15" x="96.59%" y="1269" fill="#D82C1F" fg:w="2" fg:x="4192"/></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (1 samples, 0.02%)</title><rect width=".023%" height="15" x="96.613%" y="1253" fill="#FD5715" fg:w="1" fg:x="4193"/></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (1 samples, 0.02%)</title><rect width=".023%" height="15" x="96.613%" y="1237" fill="#E21202" fg:w="1" fg:x="4193"/></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (1 samples, 0.02%)</title><rect width=".023%" height="15" x="96.613%" y="1221" fill="#D8082E" fg:w="1" fg:x="4193"/></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.02%)</title><rect width=".023%" height="15" x="96.613%" y="1205" fill="#E28C27" fg:w="1" fg:x="4193"/></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.02%)</title><rect width=".023%" height="15" x="96.613%" y="1189" fill="#DDC236" fg:w="1" fg:x="4193"/></g><g><title>alloc::alloc::dealloc (1 samples, 0.02%)</title><rect width=".023%" height="15" x="96.613%" y="1173" fill="#D55C0B" fg:w="1" fg:x="4193"/></g><g><title>__rust_dealloc (1 samples, 0.02%)</title><rect width=".023%" height="15" x="96.613%" y="1157" fill="#E5A22E" fg:w="1" fg:x="4193"/></g><g><title>&lt;jemallocator::Jemalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (1 samples, 0.02%)</title><rect width=".023%" height="15" x="96.613%" y="1141" fill="#D66F24" fg:w="1" fg:x="4193"/></g><g><title>_rjem_sdallocx (1 samples, 0.02%)</title><rect width=".023%" height="15" x="96.613%" y="1125" fill="#CF0615" fg:w="1" fg:x="4193"/></g><g><title>free_fastpath (1 samples, 0.02%)</title><rect width=".023%" height="15" x="96.613%" y="1109" fill="#D57F26" fg:w="1" fg:x="4193"/></g><g><title>_rjem_je_tcache_bin_flush_stashed (1 samples, 0.02%)</title><rect width=".023%" height="15" x="96.659%" y="1077" fill="#EE7620" fg:w="1" fg:x="4195"/></g><g><title>cache_bin_nstashed_get_local (1 samples, 0.02%)</title><rect width=".023%" height="15" x="96.659%" y="1061" fill="#F08B27" fg:w="1" fg:x="4195"/></g><g><title>cache_bin_nstashed_get_internal (1 samples, 0.02%)</title><rect width=".023%" height="15" x="96.659%" y="1045" fill="#EB0A25" fg:w="1" fg:x="4195"/></g><g><title>cache_bin_diff (1 samples, 0.02%)</title><rect width=".023%" height="15" x="96.659%" y="1029" fill="#F9AB26" fg:w="1" fg:x="4195"/></g><g><title>?? (2 samples, 0.05%)</title><rect width=".046%" height="15" x="96.659%" y="1285" fill="#F29020" fg:w="2" fg:x="4195"/></g><g><title>?? (2 samples, 0.05%)</title><rect width=".046%" height="15" x="96.659%" y="1269" fill="#D97515" fg:w="2" fg:x="4195"/></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (2 samples, 0.05%)</title><rect width=".046%" height="15" x="96.659%" y="1253" fill="#F95701" fg:w="2" fg:x="4195"/></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (2 samples, 0.05%)</title><rect width=".046%" height="15" x="96.659%" y="1237" fill="#F8C430" fg:w="2" fg:x="4195"/></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (2 samples, 0.05%)</title><rect width=".046%" height="15" x="96.659%" y="1221" fill="#FBCE21" fg:w="2" fg:x="4195"/></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.05%)</title><rect width=".046%" height="15" x="96.659%" y="1205" fill="#E88D1C" fg:w="2" fg:x="4195"/></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (2 samples, 0.05%)</title><rect width=".046%" height="15" x="96.659%" y="1189" fill="#D1A70E" fg:w="2" fg:x="4195"/></g><g><title>alloc::alloc::dealloc (2 samples, 0.05%)</title><rect width=".046%" height="15" x="96.659%" y="1173" fill="#E10B32" fg:w="2" fg:x="4195"/></g><g><title>__rust_dealloc (2 samples, 0.05%)</title><rect width=".046%" height="15" x="96.659%" y="1157" fill="#D13214" fg:w="2" fg:x="4195"/></g><g><title>&lt;jemallocator::Jemalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (2 samples, 0.05%)</title><rect width=".046%" height="15" x="96.659%" y="1141" fill="#D4112E" fg:w="2" fg:x="4195"/></g><g><title>_rjem_je_sdallocx_default (2 samples, 0.05%)</title><rect width=".046%" height="15" x="96.659%" y="1125" fill="#D86527" fg:w="2" fg:x="4195"/></g><g><title>_rjem_je_tcache_bin_flush_small (2 samples, 0.05%)</title><rect width=".046%" height="15" x="96.659%" y="1109" fill="#D4E430" fg:w="2" fg:x="4195"/></g><g><title>tcache_bin_flush_bottom (2 samples, 0.05%)</title><rect width=".046%" height="15" x="96.659%" y="1093" fill="#FA0632" fg:w="2" fg:x="4195"/></g><g><title>tcache_bin_flush_impl (1 samples, 0.02%)</title><rect width=".023%" height="15" x="96.682%" y="1077" fill="#FAA030" fg:w="1" fg:x="4196"/></g><g><title>arena_dalloc_bin_locked_step (1 samples, 0.02%)</title><rect width=".023%" height="15" x="96.682%" y="1061" fill="#F4D821" fg:w="1" fg:x="4196"/></g><g><title>bitmap_unset (1 samples, 0.02%)</title><rect width=".023%" height="15" x="96.682%" y="1045" fill="#CF9D05" fg:w="1" fg:x="4196"/></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::BTreeMap&lt;json_benchmark::prim_str::PrimStr&lt;u32&gt;,alloc::string::String&gt;&gt; (4 samples, 0.09%)</title><rect width=".092%" height="15" x="96.659%" y="1365" fill="#E4C708" fg:w="4" fg:x="4195"/></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.09%)</title><rect width=".092%" height="15" x="96.659%" y="1349" fill="#E35014" fg:w="4" fg:x="4195"/></g><g><title>core::mem::drop (4 samples, 0.09%)</title><rect width=".092%" height="15" x="96.659%" y="1333" fill="#DE0921" fg:w="4" fg:x="4195"/></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;json_benchmark::prim_str::PrimStr&lt;u32&gt;,alloc::string::String&gt;&gt; (4 samples, 0.09%)</title><rect width=".092%" height="15" x="96.659%" y="1317" fill="#EF2C1C" fg:w="4" fg:x="4195"/></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.09%)</title><rect width=".092%" height="15" x="96.659%" y="1301" fill="#F9BB2B" fg:w="4" fg:x="4195"/></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.05%)</title><rect width=".046%" height="15" x="96.705%" y="1285" fill="#D88D1C" fg:w="2" fg:x="4197"/></g><g><title>?? (1 samples, 0.02%)</title><rect width=".023%" height="15" x="96.728%" y="1269" fill="#E69A35" fg:w="1" fg:x="4198"/></g><g><title>?? (1 samples, 0.02%)</title><rect width=".023%" height="15" x="96.728%" y="1253" fill="#E35204" fg:w="1" fg:x="4198"/></g><g><title>alloc::collections::btree::mem::replace (1 samples, 0.02%)</title><rect width=".023%" height="15" x="96.728%" y="1237" fill="#DC6B10" fg:w="1" fg:x="4198"/></g><g><title>alloc::collections::btree::navigate::_&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_next_unchecked::_{{closure}} (1 samples, 0.02%)</title><rect width=".023%" height="15" x="96.728%" y="1221" fill="#CFBB02" fg:w="1" fg:x="4198"/></g><g><title>?? (1 samples, 0.02%)</title><rect width=".023%" height="15" x="96.728%" y="1205" fill="#D2A234" fg:w="1" fg:x="4198"/></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.02%)</title><rect width=".023%" height="15" x="96.728%" y="1189" fill="#D9D831" fg:w="1" fg:x="4198"/></g><g><title>_rjem_je_sdallocx_default (1 samples, 0.02%)</title><rect width=".023%" height="15" x="96.751%" y="1253" fill="#DA9231" fg:w="1" fg:x="4199"/></g><g><title>_rjem_je_tcache_bin_flush_small (1 samples, 0.02%)</title><rect width=".023%" height="15" x="96.751%" y="1237" fill="#D83728" fg:w="1" fg:x="4199"/></g><g><title>tcache_bin_flush_bottom (1 samples, 0.02%)</title><rect width=".023%" height="15" x="96.751%" y="1221" fill="#D0C415" fg:w="1" fg:x="4199"/></g><g><title>tcache_bin_flush_impl (1 samples, 0.02%)</title><rect width=".023%" height="15" x="96.751%" y="1205" fill="#F2752A" fg:w="1" fg:x="4199"/></g><g><title>tcache_bin_flush_edatas_lookup (1 samples, 0.02%)</title><rect width=".023%" height="15" x="96.751%" y="1189" fill="#D20B17" fg:w="1" fg:x="4199"/></g><g><title>emap_edata_lookup_batch (1 samples, 0.02%)</title><rect width=".023%" height="15" x="96.751%" y="1173" fill="#D96E02" fg:w="1" fg:x="4199"/></g><g><title>rtree_leaf_elm_lookup (1 samples, 0.02%)</title><rect width=".023%" height="15" x="96.751%" y="1157" fill="#E54D36" fg:w="1" fg:x="4199"/></g><g><title>rtree_leafkey (1 samples, 0.02%)</title><rect width=".023%" height="15" x="96.751%" y="1141" fill="#DA3510" fg:w="1" fg:x="4199"/></g><g><title>_rjem_sdallocx (1 samples, 0.02%)</title><rect width=".023%" height="15" x="96.774%" y="1253" fill="#D7260D" fg:w="1" fg:x="4200"/></g><g><title>free_fastpath (1 samples, 0.02%)</title><rect width=".023%" height="15" x="96.774%" y="1237" fill="#EB2A12" fg:w="1" fg:x="4200"/></g><g><title>_rjem_sdallocx (1 samples, 0.02%)</title><rect width=".023%" height="15" x="96.774%" y="1221" fill="#DB4236" fg:w="1" fg:x="4200"/></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (2 samples, 0.05%)</title><rect width=".046%" height="15" x="96.797%" y="1237" fill="#DECD04" fg:w="2" fg:x="4201"/></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (2 samples, 0.05%)</title><rect width=".046%" height="15" x="96.797%" y="1221" fill="#E3D52E" fg:w="2" fg:x="4201"/></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (2 samples, 0.05%)</title><rect width=".046%" height="15" x="96.797%" y="1205" fill="#FA912A" fg:w="2" fg:x="4201"/></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.05%)</title><rect width=".046%" height="15" x="96.797%" y="1189" fill="#DB0F02" fg:w="2" fg:x="4201"/></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (2 samples, 0.05%)</title><rect width=".046%" height="15" x="96.797%" y="1173" fill="#E7B534" fg:w="2" fg:x="4201"/></g><g><title>alloc::alloc::dealloc (2 samples, 0.05%)</title><rect width=".046%" height="15" x="96.797%" y="1157" fill="#EB012A" fg:w="2" fg:x="4201"/></g><g><title>__rust_dealloc (2 samples, 0.05%)</title><rect width=".046%" height="15" x="96.797%" y="1141" fill="#F9581B" fg:w="2" fg:x="4201"/></g><g><title>&lt;jemallocator::Jemalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (2 samples, 0.05%)</title><rect width=".046%" height="15" x="96.797%" y="1125" fill="#EB9110" fg:w="2" fg:x="4201"/></g><g><title>_rjem_je_sdallocx_default (1 samples, 0.02%)</title><rect width=".023%" height="15" x="96.82%" y="1109" fill="#ED7213" fg:w="1" fg:x="4202"/></g><g><title>_rjem_je_tcache_bin_flush_small (1 samples, 0.02%)</title><rect width=".023%" height="15" x="96.82%" y="1093" fill="#EE3332" fg:w="1" fg:x="4202"/></g><g><title>tcache_bin_flush_bottom (1 samples, 0.02%)</title><rect width=".023%" height="15" x="96.82%" y="1077" fill="#CDC219" fg:w="1" fg:x="4202"/></g><g><title>tcache_bin_flush_impl (1 samples, 0.02%)</title><rect width=".023%" height="15" x="96.82%" y="1061" fill="#D7CB11" fg:w="1" fg:x="4202"/></g><g><title>tcache_bin_flush_edatas_lookup (1 samples, 0.02%)</title><rect width=".023%" height="15" x="96.82%" y="1045" fill="#E97031" fg:w="1" fg:x="4202"/></g><g><title>emap_edata_lookup_batch (1 samples, 0.02%)</title><rect width=".023%" height="15" x="96.82%" y="1029" fill="#F1821A" fg:w="1" fg:x="4202"/></g><g><title>rtree_leaf_elm_read (1 samples, 0.02%)</title><rect width=".023%" height="15" x="96.82%" y="1013" fill="#FCDF13" fg:w="1" fg:x="4202"/></g><g><title>rtree_leaf_elm_bits_decode (1 samples, 0.02%)</title><rect width=".023%" height="15" x="96.82%" y="997" fill="#D35F19" fg:w="1" fg:x="4202"/></g><g><title>?? (5 samples, 0.12%)</title><rect width=".115%" height="15" x="96.751%" y="1285" fill="#FBB61B" fg:w="5" fg:x="4199"/></g><g><title>core::ptr::drop_in_place&lt;json_benchmark::copy::citm_catalog::CitmCatalog&gt; (5 samples, 0.12%)</title><rect width=".115%" height="15" x="96.751%" y="1269" fill="#EE1804" fg:w="5" fg:x="4199"/></g><g><title>core::ptr::drop_in_place&lt;json_benchmark::copy::citm_catalog::Event&gt; (3 samples, 0.07%)</title><rect width=".069%" height="15" x="96.797%" y="1253" fill="#E0DC19" fg:w="3" fg:x="4201"/></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;alloc::string::String&gt;&gt; (1 samples, 0.02%)</title><rect width=".023%" height="15" x="96.843%" y="1237" fill="#EF851A" fg:w="1" fg:x="4203"/></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.02%)</title><rect width=".023%" height="15" x="96.866%" y="1237" fill="#D35E30" fg:w="1" fg:x="4204"/></g><g><title>?? (1 samples, 0.02%)</title><rect width=".023%" height="15" x="96.889%" y="1189" fill="#EF5706" fg:w="1" fg:x="4205"/></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.02%)</title><rect width=".023%" height="15" x="96.889%" y="1173" fill="#E33E00" fg:w="1" fg:x="4205"/></g><g><title>alloc::alloc::dealloc (1 samples, 0.02%)</title><rect width=".023%" height="15" x="96.889%" y="1157" fill="#D3E204" fg:w="1" fg:x="4205"/></g><g><title>__rust_dealloc (1 samples, 0.02%)</title><rect width=".023%" height="15" x="96.889%" y="1141" fill="#FD2634" fg:w="1" fg:x="4205"/></g><g><title>&lt;jemallocator::Jemalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (1 samples, 0.02%)</title><rect width=".023%" height="15" x="96.889%" y="1125" fill="#E57E28" fg:w="1" fg:x="4205"/></g><g><title>_rjem_je_sdallocx_default (1 samples, 0.02%)</title><rect width=".023%" height="15" x="96.889%" y="1109" fill="#E5A52C" fg:w="1" fg:x="4205"/></g><g><title>_rjem_je_tcache_bin_flush_small (1 samples, 0.02%)</title><rect width=".023%" height="15" x="96.889%" y="1093" fill="#F75F2F" fg:w="1" fg:x="4205"/></g><g><title>tcache_bin_flush_bottom (1 samples, 0.02%)</title><rect width=".023%" height="15" x="96.889%" y="1077" fill="#D88C1E" fg:w="1" fg:x="4205"/></g><g><title>tcache_bin_flush_impl (1 samples, 0.02%)</title><rect width=".023%" height="15" x="96.889%" y="1061" fill="#F6D608" fg:w="1" fg:x="4205"/></g><g><title>alloc::collections::btree::navigate::_&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_next_unchecked::_{{closure}} (2 samples, 0.05%)</title><rect width=".046%" height="15" x="96.889%" y="1221" fill="#E3E00F" fg:w="2" fg:x="4205"/></g><g><title>?? (2 samples, 0.05%)</title><rect width=".046%" height="15" x="96.889%" y="1205" fill="#E9AF04" fg:w="2" fg:x="4205"/></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.02%)</title><rect width=".023%" height="15" x="96.912%" y="1189" fill="#DD422D" fg:w="1" fg:x="4206"/></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::BTreeMap&lt;json_benchmark::prim_str::PrimStr&lt;u32&gt;,json_benchmark::copy::citm_catalog::Event&gt;&gt; (9 samples, 0.21%)</title><rect width=".207%" height="15" x="96.751%" y="1365" fill="#DDB212" fg:w="9" fg:x="4199"/></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (9 samples, 0.21%)</title><rect width=".207%" height="15" x="96.751%" y="1349" fill="#D5511D" fg:w="9" fg:x="4199"/></g><g><title>core::mem::drop (9 samples, 0.21%)</title><rect width=".207%" height="15" x="96.751%" y="1333" fill="#DC5931" fg:w="9" fg:x="4199"/></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;json_benchmark::prim_str::PrimStr&lt;u32&gt;,json_benchmark::copy::citm_catalog::Event&gt;&gt; (9 samples, 0.21%)</title><rect width=".207%" height="15" x="96.751%" y="1317" fill="#E33C21" fg:w="9" fg:x="4199"/></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (9 samples, 0.21%)</title><rect width=".207%" height="15" x="96.751%" y="1301" fill="#CD710C" fg:w="9" fg:x="4199"/></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (4 samples, 0.09%)</title><rect width=".092%" height="15" x="96.866%" y="1285" fill="#D32001" fg:w="4" fg:x="4204"/></g><g><title>?? (4 samples, 0.09%)</title><rect width=".092%" height="15" x="96.866%" y="1269" fill="#F6020C" fg:w="4" fg:x="4204"/></g><g><title>?? (4 samples, 0.09%)</title><rect width=".092%" height="15" x="96.866%" y="1253" fill="#F3251B" fg:w="4" fg:x="4204"/></g><g><title>alloc::collections::btree::mem::replace (3 samples, 0.07%)</title><rect width=".069%" height="15" x="96.889%" y="1237" fill="#F8D31F" fg:w="3" fg:x="4205"/></g><g><title>core::ptr::write (1 samples, 0.02%)</title><rect width=".023%" height="15" x="96.936%" y="1221" fill="#F2922F" fg:w="1" fg:x="4207"/></g><g><title>arena_dalloc_bin_locked_step (1 samples, 0.02%)</title><rect width=".023%" height="15" x="96.959%" y="1253" fill="#CE4614" fg:w="1" fg:x="4208"/></g><g><title>edata_nfree_get (1 samples, 0.02%)</title><rect width=".023%" height="15" x="96.959%" y="1237" fill="#D70A33" fg:w="1" fg:x="4208"/></g><g><title>_rjem_je_sdallocx_default (2 samples, 0.05%)</title><rect width=".046%" height="15" x="96.959%" y="1317" fill="#F3B235" fg:w="2" fg:x="4208"/></g><g><title>_rjem_je_tcache_bin_flush_small (2 samples, 0.05%)</title><rect width=".046%" height="15" x="96.959%" y="1301" fill="#E9DD14" fg:w="2" fg:x="4208"/></g><g><title>tcache_bin_flush_bottom (2 samples, 0.05%)</title><rect width=".046%" height="15" x="96.959%" y="1285" fill="#DA5F23" fg:w="2" fg:x="4208"/></g><g><title>tcache_bin_flush_impl (2 samples, 0.05%)</title><rect width=".046%" height="15" x="96.959%" y="1269" fill="#E50D05" fg:w="2" fg:x="4208"/></g><g><title>tcache_bin_flush_edatas_lookup (1 samples, 0.02%)</title><rect width=".023%" height="15" x="96.982%" y="1253" fill="#FCA41E" fg:w="1" fg:x="4209"/></g><g><title>emap_edata_lookup_batch (1 samples, 0.02%)</title><rect width=".023%" height="15" x="96.982%" y="1237" fill="#E84424" fg:w="1" fg:x="4209"/></g><g><title>rtree_leaf_elm_lookup (1 samples, 0.02%)</title><rect width=".023%" height="15" x="96.982%" y="1221" fill="#DB3B36" fg:w="1" fg:x="4209"/></g><g><title>rtree_cache_direct_map (1 samples, 0.02%)</title><rect width=".023%" height="15" x="96.982%" y="1205" fill="#FA5C21" fg:w="1" fg:x="4209"/></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;json_benchmark::copy::citm_catalog::Price&gt;&gt; (1 samples, 0.02%)</title><rect width=".023%" height="15" x="97.005%" y="1301" fill="#E5A236" fg:w="1" fg:x="4210"/></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;json_benchmark::copy::citm_catalog::Price&gt;&gt; (1 samples, 0.02%)</title><rect width=".023%" height="15" x="97.005%" y="1285" fill="#F47234" fg:w="1" fg:x="4210"/></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.02%)</title><rect width=".023%" height="15" x="97.005%" y="1269" fill="#D4D32B" fg:w="1" fg:x="4210"/></g><g><title>core::ptr::drop_in_place&lt;json_benchmark::copy::citm_catalog::Performance&gt; (1 samples, 0.02%)</title><rect width=".023%" height="15" x="97.005%" y="1253" fill="#E29308" fg:w="1" fg:x="4210"/></g><g><title>_rjem_je_arena_slab_dalloc (1 samples, 0.02%)</title><rect width=".023%" height="15" x="97.028%" y="1061" fill="#E2170D" fg:w="1" fg:x="4211"/></g><g><title>pac_dalloc_impl (1 samples, 0.02%)</title><rect width=".023%" height="15" x="97.028%" y="1045" fill="#F03F04" fg:w="1" fg:x="4211"/></g><g><title>_rjem_je_extent_record (1 samples, 0.02%)</title><rect width=".023%" height="15" x="97.028%" y="1029" fill="#DD0120" fg:w="1" fg:x="4211"/></g><g><title>extent_deactivate_locked (1 samples, 0.02%)</title><rect width=".023%" height="15" x="97.028%" y="1013" fill="#F2750A" fg:w="1" fg:x="4211"/></g><g><title>extent_deactivate_locked_impl (1 samples, 0.02%)</title><rect width=".023%" height="15" x="97.028%" y="997" fill="#F9AC2C" fg:w="1" fg:x="4211"/></g><g><title>_rjem_je_emap_update_edata_state (1 samples, 0.02%)</title><rect width=".023%" height="15" x="97.028%" y="981" fill="#F42E2D" fg:w="1" fg:x="4211"/></g><g><title>rtree_leaf_elm_lookup (1 samples, 0.02%)</title><rect width=".023%" height="15" x="97.028%" y="965" fill="#CE2B11" fg:w="1" fg:x="4211"/></g><g><title>_rjem_je_arena_dalloc_bin_locked_handle_newly_empty (1 samples, 0.02%)</title><rect width=".023%" height="15" x="97.051%" y="1045" fill="#EFDA27" fg:w="1" fg:x="4212"/></g><g><title>arena_dissociate_bin_slab (1 samples, 0.02%)</title><rect width=".023%" height="15" x="97.051%" y="1029" fill="#D0A936" fg:w="1" fg:x="4212"/></g><g><title>arena_bin_slabs_nonfull_remove (1 samples, 0.02%)</title><rect width=".023%" height="15" x="97.051%" y="1013" fill="#F7192A" fg:w="1" fg:x="4212"/></g><g><title>_rjem_je_edata_heap_remove (1 samples, 0.02%)</title><rect width=".023%" height="15" x="97.051%" y="997" fill="#E2171F" fg:w="1" fg:x="4212"/></g><g><title>ph_remove (1 samples, 0.02%)</title><rect width=".023%" height="15" x="97.051%" y="981" fill="#F7101C" fg:w="1" fg:x="4212"/></g><g><title>ph_merge_aux (1 samples, 0.02%)</title><rect width=".023%" height="15" x="97.051%" y="965" fill="#E79326" fg:w="1" fg:x="4212"/></g><g><title>phn_merge (1 samples, 0.02%)</title><rect width=".023%" height="15" x="97.051%" y="949" fill="#FD5130" fg:w="1" fg:x="4212"/></g><g><title>_rjem_je_edata_heap_remove (1 samples, 0.02%)</title><rect width=".023%" height="15" x="97.051%" y="933" fill="#F9DE2B" fg:w="1" fg:x="4212"/></g><g><title>_rjem_je_sdallocx_default (3 samples, 0.07%)</title><rect width=".069%" height="15" x="97.028%" y="1125" fill="#DD031B" fg:w="3" fg:x="4211"/></g><g><title>_rjem_je_tcache_bin_flush_small (3 samples, 0.07%)</title><rect width=".069%" height="15" x="97.028%" y="1109" fill="#E4B405" fg:w="3" fg:x="4211"/></g><g><title>tcache_bin_flush_bottom (3 samples, 0.07%)</title><rect width=".069%" height="15" x="97.028%" y="1093" fill="#E3832A" fg:w="3" fg:x="4211"/></g><g><title>tcache_bin_flush_impl (3 samples, 0.07%)</title><rect width=".069%" height="15" x="97.028%" y="1077" fill="#D40327" fg:w="3" fg:x="4211"/></g><g><title>arena_dalloc_bin_locked_step (2 samples, 0.05%)</title><rect width=".046%" height="15" x="97.051%" y="1061" fill="#E22D05" fg:w="2" fg:x="4212"/></g><g><title>arena_slab_regind (1 samples, 0.02%)</title><rect width=".023%" height="15" x="97.074%" y="1045" fill="#D7A72D" fg:w="1" fg:x="4213"/></g><g><title>div_compute (1 samples, 0.02%)</title><rect width=".023%" height="15" x="97.074%" y="1029" fill="#FADA35" fg:w="1" fg:x="4213"/></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (4 samples, 0.09%)</title><rect width=".092%" height="15" x="97.028%" y="1189" fill="#CF8C00" fg:w="4" fg:x="4211"/></g><g><title>alloc::alloc::dealloc (4 samples, 0.09%)</title><rect width=".092%" height="15" x="97.028%" y="1173" fill="#EE8533" fg:w="4" fg:x="4211"/></g><g><title>__rust_dealloc (4 samples, 0.09%)</title><rect width=".092%" height="15" x="97.028%" y="1157" fill="#DACB35" fg:w="4" fg:x="4211"/></g><g><title>&lt;jemallocator::Jemalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (4 samples, 0.09%)</title><rect width=".092%" height="15" x="97.028%" y="1141" fill="#E2B819" fg:w="4" fg:x="4211"/></g><g><title>_rjem_sdallocx (1 samples, 0.02%)</title><rect width=".023%" height="15" x="97.097%" y="1125" fill="#E77915" fg:w="1" fg:x="4214"/></g><g><title>free_fastpath (1 samples, 0.02%)</title><rect width=".023%" height="15" x="97.097%" y="1109" fill="#FB0E22" fg:w="1" fg:x="4214"/></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.16%)</title><rect width=".161%" height="15" x="97.028%" y="1285" fill="#F9C10B" fg:w="7" fg:x="4211"/></g><g><title>core::ptr::drop_in_place&lt;[json_benchmark::copy::citm_catalog::SeatCategory]&gt; (7 samples, 0.16%)</title><rect width=".161%" height="15" x="97.028%" y="1269" fill="#DCAC25" fg:w="7" fg:x="4211"/></g><g><title>core::ptr::drop_in_place&lt;json_benchmark::copy::citm_catalog::SeatCategory&gt; (7 samples, 0.16%)</title><rect width=".161%" height="15" x="97.028%" y="1253" fill="#E7E52B" fg:w="7" fg:x="4211"/></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;json_benchmark::copy::citm_catalog::Area&gt;&gt; (7 samples, 0.16%)</title><rect width=".161%" height="15" x="97.028%" y="1237" fill="#FAA105" fg:w="7" fg:x="4211"/></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;json_benchmark::copy::citm_catalog::Area&gt;&gt; (7 samples, 0.16%)</title><rect width=".161%" height="15" x="97.028%" y="1221" fill="#DAE112" fg:w="7" fg:x="4211"/></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.16%)</title><rect width=".161%" height="15" x="97.028%" y="1205" fill="#F52D2A" fg:w="7" fg:x="4211"/></g><g><title>core::ptr::drop_in_place&lt;json_benchmark::copy::citm_catalog::Performance&gt; (3 samples, 0.07%)</title><rect width=".069%" height="15" x="97.12%" y="1189" fill="#D37301" fg:w="3" fg:x="4215"/></g><g><title>_rjem_je_sdallocx_default (1 samples, 0.02%)</title><rect width=".023%" height="15" x="97.189%" y="1189" fill="#F88534" fg:w="1" fg:x="4218"/></g><g><title>_rjem_je_tcache_bin_flush_small (1 samples, 0.02%)</title><rect width=".023%" height="15" x="97.189%" y="1173" fill="#EE6415" fg:w="1" fg:x="4218"/></g><g><title>tcache_bin_flush_bottom (1 samples, 0.02%)</title><rect width=".023%" height="15" x="97.189%" y="1157" fill="#F7900B" fg:w="1" fg:x="4218"/></g><g><title>tcache_bin_flush_impl (1 samples, 0.02%)</title><rect width=".023%" height="15" x="97.189%" y="1141" fill="#CEA410" fg:w="1" fg:x="4218"/></g><g><title>_rjem_je_arena_slab_dalloc (1 samples, 0.02%)</title><rect width=".023%" height="15" x="97.189%" y="1125" fill="#DE2203" fg:w="1" fg:x="4218"/></g><g><title>pac_dalloc_impl (1 samples, 0.02%)</title><rect width=".023%" height="15" x="97.189%" y="1109" fill="#F85204" fg:w="1" fg:x="4218"/></g><g><title>_rjem_je_extent_record (1 samples, 0.02%)</title><rect width=".023%" height="15" x="97.189%" y="1093" fill="#E4512E" fg:w="1" fg:x="4218"/></g><g><title>extent_try_coalesce_large (1 samples, 0.02%)</title><rect width=".023%" height="15" x="97.189%" y="1077" fill="#E3432F" fg:w="1" fg:x="4218"/></g><g><title>extent_try_coalesce_impl (1 samples, 0.02%)</title><rect width=".023%" height="15" x="97.189%" y="1061" fill="#D75D35" fg:w="1" fg:x="4218"/></g><g><title>extent_coalesce (1 samples, 0.02%)</title><rect width=".023%" height="15" x="97.189%" y="1045" fill="#F8C227" fg:w="1" fg:x="4218"/></g><g><title>extent_merge_impl (1 samples, 0.02%)</title><rect width=".023%" height="15" x="97.189%" y="1029" fill="#D70513" fg:w="1" fg:x="4218"/></g><g><title>_rjem_je_emap_merge_prepare (1 samples, 0.02%)</title><rect width=".023%" height="15" x="97.189%" y="1013" fill="#E2D733" fg:w="1" fg:x="4218"/></g><g><title>emap_rtree_leaf_elms_lookup (1 samples, 0.02%)</title><rect width=".023%" height="15" x="97.189%" y="997" fill="#E1381A" fg:w="1" fg:x="4218"/></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 samples, 0.30%)</title><rect width=".299%" height="15" x="96.959%" y="1349" fill="#DE4B1D" fg:w="13" fg:x="4208"/></g><g><title>core::ptr::drop_in_place&lt;[json_benchmark::copy::citm_catalog::Performance]&gt; (13 samples, 0.30%)</title><rect width=".299%" height="15" x="96.959%" y="1333" fill="#EC8B06" fg:w="13" fg:x="4208"/></g><g><title>core::ptr::drop_in_place&lt;json_benchmark::copy::citm_catalog::Performance&gt; (11 samples, 0.25%)</title><rect width=".254%" height="15" x="97.005%" y="1317" fill="#DF8924" fg:w="11" fg:x="4210"/></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;json_benchmark::copy::citm_catalog::SeatCategory&gt;&gt; (10 samples, 0.23%)</title><rect width=".23%" height="15" x="97.028%" y="1301" fill="#E26302" fg:w="10" fg:x="4211"/></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;json_benchmark::copy::citm_catalog::SeatCategory&gt;&gt; (3 samples, 0.07%)</title><rect width=".069%" height="15" x="97.189%" y="1285" fill="#CE8517" fg:w="3" fg:x="4218"/></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.07%)</title><rect width=".069%" height="15" x="97.189%" y="1269" fill="#F3AD0F" fg:w="3" fg:x="4218"/></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (3 samples, 0.07%)</title><rect width=".069%" height="15" x="97.189%" y="1253" fill="#E4451C" fg:w="3" fg:x="4218"/></g><g><title>alloc::alloc::dealloc (3 samples, 0.07%)</title><rect width=".069%" height="15" x="97.189%" y="1237" fill="#D43316" fg:w="3" fg:x="4218"/></g><g><title>__rust_dealloc (3 samples, 0.07%)</title><rect width=".069%" height="15" x="97.189%" y="1221" fill="#E37100" fg:w="3" fg:x="4218"/></g><g><title>&lt;jemallocator::Jemalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (3 samples, 0.07%)</title><rect width=".069%" height="15" x="97.189%" y="1205" fill="#FC541B" fg:w="3" fg:x="4218"/></g><g><title>_rjem_sdallocx (2 samples, 0.05%)</title><rect width=".046%" height="15" x="97.212%" y="1189" fill="#DF9127" fg:w="2" fg:x="4219"/></g><g><title>free_fastpath (2 samples, 0.05%)</title><rect width=".046%" height="15" x="97.212%" y="1173" fill="#EFDB1E" fg:w="2" fg:x="4219"/></g><g><title>cache_bin_dalloc_easy (1 samples, 0.02%)</title><rect width=".023%" height="15" x="97.235%" y="1157" fill="#E0C427" fg:w="1" fg:x="4220"/></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;core::result::Result&lt;json_benchmark::copy::citm_catalog::CitmCatalog,simd_json::error::Error&gt;&gt;&gt; (28 samples, 0.65%)</title><rect width=".645%" height="15" x="96.636%" y="1445" fill="#CD232B" fg:w="28" fg:x="4194"/></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (27 samples, 0.62%)</title><rect width=".622%" height="15" x="96.659%" y="1429" fill="#E4C915" fg:w="27" fg:x="4195"/></g><g><title>core::ptr::drop_in_place&lt;[core::result::Result&lt;json_benchmark::copy::citm_catalog::CitmCatalog,simd_json::error::Error&gt;]&gt; (27 samples, 0.62%)</title><rect width=".622%" height="15" x="96.659%" y="1413" fill="#ED7610" fg:w="27" fg:x="4195"/></g><g><title>core::ptr::drop_in_place&lt;core::result::Result&lt;json_benchmark::copy::citm_catalog::CitmCatalog,simd_json::error::Error&gt;&gt; (27 samples, 0.62%)</title><rect width=".622%" height="15" x="96.659%" y="1397" fill="#F11113" fg:w="27" fg:x="4195"/></g><g><title>core::ptr::drop_in_place&lt;json_benchmark::copy::citm_catalog::CitmCatalog&gt; (27 samples, 0.62%)</title><rect width=".622%" height="15" x="96.659%" y="1381" fill="#D60A19" fg:w="27" fg:x="4195"/></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;json_benchmark::copy::citm_catalog::Performance&gt;&gt; (14 samples, 0.32%)</title><rect width=".323%" height="15" x="96.959%" y="1365" fill="#EE251D" fg:w="14" fg:x="4208"/></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;json_benchmark::copy::citm_catalog::Performance&gt;&gt; (1 samples, 0.02%)</title><rect width=".023%" height="15" x="97.258%" y="1349" fill="#FD5319" fg:w="1" fg:x="4221"/></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.02%)</title><rect width=".023%" height="15" x="97.258%" y="1333" fill="#EAC00C" fg:w="1" fg:x="4221"/></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.02%)</title><rect width=".023%" height="15" x="97.258%" y="1317" fill="#F1D82D" fg:w="1" fg:x="4221"/></g><g><title>alloc::alloc::dealloc (1 samples, 0.02%)</title><rect width=".023%" height="15" x="97.258%" y="1301" fill="#F21621" fg:w="1" fg:x="4221"/></g><g><title>__rust_dealloc (1 samples, 0.02%)</title><rect width=".023%" height="15" x="97.258%" y="1285" fill="#E76931" fg:w="1" fg:x="4221"/></g><g><title>&lt;jemallocator::Jemalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (1 samples, 0.02%)</title><rect width=".023%" height="15" x="97.258%" y="1269" fill="#DACC0F" fg:w="1" fg:x="4221"/></g><g><title>_rjem_je_sdallocx_default (1 samples, 0.02%)</title><rect width=".023%" height="15" x="97.258%" y="1253" fill="#EB8A29" fg:w="1" fg:x="4221"/></g><g><title>isfree (1 samples, 0.02%)</title><rect width=".023%" height="15" x="97.258%" y="1237" fill="#F60009" fg:w="1" fg:x="4221"/></g><g><title>isdalloct (1 samples, 0.02%)</title><rect width=".023%" height="15" x="97.258%" y="1221" fill="#D24A04" fg:w="1" fg:x="4221"/></g><g><title>arena_sdalloc (1 samples, 0.02%)</title><rect width=".023%" height="15" x="97.258%" y="1205" fill="#FA3C29" fg:w="1" fg:x="4221"/></g><g><title>arena_dalloc_large (1 samples, 0.02%)</title><rect width=".023%" height="15" x="97.258%" y="1189" fill="#DC730C" fg:w="1" fg:x="4221"/></g><g><title>tcache_dalloc_large (1 samples, 0.02%)</title><rect width=".023%" height="15" x="97.258%" y="1173" fill="#ED640D" fg:w="1" fg:x="4221"/></g><g><title>_rjem_je_tcache_bin_flush_large (1 samples, 0.02%)</title><rect width=".023%" height="15" x="97.258%" y="1157" fill="#D5371A" fg:w="1" fg:x="4221"/></g><g><title>tcache_bin_flush_bottom (1 samples, 0.02%)</title><rect width=".023%" height="15" x="97.258%" y="1141" fill="#D81104" fg:w="1" fg:x="4221"/></g><g><title>tcache_bin_flush_impl (1 samples, 0.02%)</title><rect width=".023%" height="15" x="97.258%" y="1125" fill="#DC992F" fg:w="1" fg:x="4221"/></g><g><title>_rjem_je_large_dalloc_finish (1 samples, 0.02%)</title><rect width=".023%" height="15" x="97.258%" y="1109" fill="#D78309" fg:w="1" fg:x="4221"/></g><g><title>large_dalloc_finish_impl (1 samples, 0.02%)</title><rect width=".023%" height="15" x="97.258%" y="1093" fill="#E92E2A" fg:w="1" fg:x="4221"/></g><g><title>pac_dalloc_impl (1 samples, 0.02%)</title><rect width=".023%" height="15" x="97.258%" y="1077" fill="#E25607" fg:w="1" fg:x="4221"/></g><g><title>_rjem_je_extent_record (1 samples, 0.02%)</title><rect width=".023%" height="15" x="97.258%" y="1061" fill="#EFE215" fg:w="1" fg:x="4221"/></g><g><title>extent_try_coalesce_large (1 samples, 0.02%)</title><rect width=".023%" height="15" x="97.258%" y="1045" fill="#F48916" fg:w="1" fg:x="4221"/></g><g><title>extent_try_coalesce_impl (1 samples, 0.02%)</title><rect width=".023%" height="15" x="97.258%" y="1029" fill="#D38B23" fg:w="1" fg:x="4221"/></g><g><title>extent_coalesce (1 samples, 0.02%)</title><rect width=".023%" height="15" x="97.258%" y="1013" fill="#D63E32" fg:w="1" fg:x="4221"/></g><g><title>_rjem_je_eset_remove (1 samples, 0.02%)</title><rect width=".023%" height="15" x="97.258%" y="997" fill="#D4712C" fg:w="1" fg:x="4221"/></g><g><title>edata_list_inactive_remove (1 samples, 0.02%)</title><rect width=".023%" height="15" x="97.258%" y="981" fill="#E2962B" fg:w="1" fg:x="4221"/></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (3 samples, 0.07%)</title><rect width=".069%" height="15" x="97.281%" y="1429" fill="#FA4725" fg:w="3" fg:x="4222"/></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (3 samples, 0.07%)</title><rect width=".069%" height="15" x="97.281%" y="1413" fill="#DB4C13" fg:w="3" fg:x="4222"/></g><g><title>alloc::slice::hack::to_vec (3 samples, 0.07%)</title><rect width=".069%" height="15" x="97.281%" y="1397" fill="#FA270B" fg:w="3" fg:x="4222"/></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (3 samples, 0.07%)</title><rect width=".069%" height="15" x="97.281%" y="1381" fill="#E6401F" fg:w="3" fg:x="4222"/></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (3 samples, 0.07%)</title><rect width=".069%" height="15" x="97.281%" y="1365" fill="#D0DE17" fg:w="3" fg:x="4222"/></g><g><title>core::intrinsics::copy_nonoverlapping (3 samples, 0.07%)</title><rect width=".069%" height="15" x="97.281%" y="1349" fill="#E37D12" fg:w="3" fg:x="4222"/></g><g><title>__memmove_avx_unaligned_erms (3 samples, 0.07%)</title><rect width=".069%" height="15" x="97.281%" y="1333" fill="#EAD209" fg:w="3" fg:x="4222"/></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.02%)</title><rect width=".023%" height="15" x="97.35%" y="1253" fill="#D97F18" fg:w="1" fg:x="4225"/></g><g><title>?? (1 samples, 0.02%)</title><rect width=".023%" height="15" x="97.35%" y="1237" fill="#EF8D30" fg:w="1" fg:x="4225"/></g><g><title>?? (1 samples, 0.02%)</title><rect width=".023%" height="15" x="97.35%" y="1221" fill="#E36D08" fg:w="1" fg:x="4225"/></g><g><title>?? (1 samples, 0.02%)</title><rect width=".023%" height="15" x="97.35%" y="1205" fill="#EBB817" fg:w="1" fg:x="4225"/></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.02%)</title><rect width=".023%" height="15" x="97.35%" y="1189" fill="#E3E230" fg:w="1" fg:x="4225"/></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for alloc::collections::btree::map::BTreeMap&lt;K,V&gt;&gt;::deserialize (2 samples, 0.05%)</title><rect width=".046%" height="15" x="97.35%" y="1301" fill="#CE960B" fg:w="2" fg:x="4225"/></g><g><title>simd_json::serde::de::&lt;impl serde::de::Deserializer for &amp;mut simd_json::Deserializer&gt;::deserialize_map (2 samples, 0.05%)</title><rect width=".046%" height="15" x="97.35%" y="1285" fill="#FE0221" fg:w="2" fg:x="4225"/></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::collections::btree::map::BTreeMap&lt;K,V&gt;&gt;::deserialize::MapVisitor&lt;K,V&gt; as serde::de::Visitor&gt;::visit_map (2 samples, 0.05%)</title><rect width=".046%" height="15" x="97.35%" y="1269" fill="#F3A014" fg:w="2" fg:x="4225"/></g><g><title>serde::de::MapAccess::next_entry (1 samples, 0.02%)</title><rect width=".023%" height="15" x="97.373%" y="1253" fill="#DAD01E" fg:w="1" fg:x="4226"/></g><g><title>serde::de::MapAccess::next_entry_seed (1 samples, 0.02%)</title><rect width=".023%" height="15" x="97.373%" y="1237" fill="#E07831" fg:w="1" fg:x="4226"/></g><g><title>&lt;simd_json::serde::de::CommaSeparated as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.02%)</title><rect width=".023%" height="15" x="97.373%" y="1221" fill="#F60C02" fg:w="1" fg:x="4226"/></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.02%)</title><rect width=".023%" height="15" x="97.373%" y="1205" fill="#EC7503" fg:w="1" fg:x="4226"/></g><g><title>json_benchmark::copy::citm_catalog::_::&lt;impl serde::de::Deserialize for json_benchmark::copy::citm_catalog::Event&gt;::deserialize (1 samples, 0.02%)</title><rect width=".023%" height="15" x="97.373%" y="1189" fill="#D88034" fg:w="1" fg:x="4226"/></g><g><title>simd_json::serde::de::&lt;impl serde::de::Deserializer for &amp;mut simd_json::Deserializer&gt;::deserialize_struct (1 samples, 0.02%)</title><rect width=".023%" height="15" x="97.373%" y="1173" fill="#F69113" fg:w="1" fg:x="4226"/></g><g><title>&lt;json_benchmark::copy::citm_catalog::_::&lt;impl serde::de::Deserialize for json_benchmark::copy::citm_catalog::Event&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.02%)</title><rect width=".023%" height="15" x="97.373%" y="1157" fill="#DE0B2E" fg:w="1" fg:x="4226"/></g><g><title>serde::de::MapAccess::next_value (1 samples, 0.02%)</title><rect width=".023%" height="15" x="97.373%" y="1141" fill="#F55224" fg:w="1" fg:x="4226"/></g><g><title>&lt;simd_json::serde::de::CommaSeparated as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.02%)</title><rect width=".023%" height="15" x="97.373%" y="1125" fill="#FA4933" fg:w="1" fg:x="4226"/></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.02%)</title><rect width=".023%" height="15" x="97.373%" y="1109" fill="#DDBD17" fg:w="1" fg:x="4226"/></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u32&gt;::deserialize (1 samples, 0.02%)</title><rect width=".023%" height="15" x="97.373%" y="1093" fill="#D22107" fg:w="1" fg:x="4226"/></g><g><title>simd_json::serde::de::&lt;impl serde::de::Deserializer for &amp;mut simd_json::Deserializer&gt;::deserialize_u32 (1 samples, 0.02%)</title><rect width=".023%" height="15" x="97.373%" y="1077" fill="#D26B16" fg:w="1" fg:x="4226"/></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.02%)</title><rect width=".023%" height="15" x="97.373%" y="1061" fill="#DE7425" fg:w="1" fg:x="4226"/></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.02%)</title><rect width=".023%" height="15" x="97.396%" y="1061" fill="#FE1130" fg:w="1" fg:x="4227"/></g><g><title>serde::de::MapAccess::next_key (2 samples, 0.05%)</title><rect width=".046%" height="15" x="97.396%" y="1157" fill="#E02420" fg:w="2" fg:x="4227"/></g><g><title>&lt;simd_json::serde::de::CommaSeparated as serde::de::MapAccess&gt;::next_key_seed (2 samples, 0.05%)</title><rect width=".046%" height="15" x="97.396%" y="1141" fill="#E85A2E" fg:w="2" fg:x="4227"/></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (2 samples, 0.05%)</title><rect width=".046%" height="15" x="97.396%" y="1125" fill="#F14228" fg:w="2" fg:x="4227"/></g><g><title>&lt;json_benchmark::copy::citm_catalog::_::&lt;impl serde::de::Deserialize for json_benchmark::copy::citm_catalog::Performance&gt;::deserialize::__Field as serde::de::Deserialize&gt;::deserialize (2 samples, 0.05%)</title><rect width=".046%" height="15" x="97.396%" y="1109" fill="#F9B81D" fg:w="2" fg:x="4227"/></g><g><title>&lt;simd_json::serde::de::MapKey as serde::de::Deserializer&gt;::deserialize_identifier (2 samples, 0.05%)</title><rect width=".046%" height="15" x="97.396%" y="1093" fill="#E7B501" fg:w="2" fg:x="4227"/></g><g><title>&lt;simd_json::serde::de::MapKey as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.05%)</title><rect width=".046%" height="15" x="97.396%" y="1077" fill="#E05E02" fg:w="2" fg:x="4227"/></g><g><title>serde::de::Visitor::visit_borrowed_str (1 samples, 0.02%)</title><rect width=".023%" height="15" x="97.419%" y="1061" fill="#E5AA0F" fg:w="1" fg:x="4228"/></g><g><title>&lt;json_benchmark::copy::citm_catalog::_::&lt;impl serde::de::Deserialize for json_benchmark::copy::citm_catalog::Performance&gt;::deserialize::__FieldVisitor as serde::de::Visitor&gt;::visit_str (1 samples, 0.02%)</title><rect width=".023%" height="15" x="97.419%" y="1045" fill="#F07F23" fg:w="1" fg:x="4228"/></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (1 samples, 0.02%)</title><rect width=".023%" height="15" x="97.419%" y="1029" fill="#F8C422" fg:w="1" fg:x="4228"/></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (1 samples, 0.02%)</title><rect width=".023%" height="15" x="97.419%" y="1013" fill="#EC8907" fg:w="1" fg:x="4228"/></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (1 samples, 0.02%)</title><rect width=".023%" height="15" x="97.419%" y="997" fill="#EB7F10" fg:w="1" fg:x="4228"/></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (1 samples, 0.02%)</title><rect width=".023%" height="15" x="97.419%" y="981" fill="#FAC036" fg:w="1" fg:x="4228"/></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize (3 samples, 0.07%)</title><rect width=".069%" height="15" x="97.442%" y="1109" fill="#DA6214" fg:w="3" fg:x="4229"/></g><g><title>simd_json::serde::de::&lt;impl serde::de::Deserializer for &amp;mut simd_json::Deserializer&gt;::deserialize_seq (3 samples, 0.07%)</title><rect width=".069%" height="15" x="97.442%" y="1093" fill="#E6B02F" fg:w="3" fg:x="4229"/></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (3 samples, 0.07%)</title><rect width=".069%" height="15" x="97.442%" y="1077" fill="#F40221" fg:w="3" fg:x="4229"/></g><g><title>serde::de::SeqAccess::next_element (3 samples, 0.07%)</title><rect width=".069%" height="15" x="97.442%" y="1061" fill="#E76411" fg:w="3" fg:x="4229"/></g><g><title>&lt;simd_json::serde::de::CommaSeparated as serde::de::SeqAccess&gt;::next_element_seed (3 samples, 0.07%)</title><rect width=".069%" height="15" x="97.442%" y="1045" fill="#F5170C" fg:w="3" fg:x="4229"/></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (3 samples, 0.07%)</title><rect width=".069%" height="15" x="97.442%" y="1029" fill="#F93716" fg:w="3" fg:x="4229"/></g><g><title>json_benchmark::copy::citm_catalog::_::&lt;impl serde::de::Deserialize for json_benchmark::copy::citm_catalog::SeatCategory&gt;::deserialize (3 samples, 0.07%)</title><rect width=".069%" height="15" x="97.442%" y="1013" fill="#CF8609" fg:w="3" fg:x="4229"/></g><g><title>simd_json::serde::de::&lt;impl serde::de::Deserializer for &amp;mut simd_json::Deserializer&gt;::deserialize_struct (3 samples, 0.07%)</title><rect width=".069%" height="15" x="97.442%" y="997" fill="#DA8600" fg:w="3" fg:x="4229"/></g><g><title>&lt;json_benchmark::copy::citm_catalog::_::&lt;impl serde::de::Deserialize for json_benchmark::copy::citm_catalog::SeatCategory&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.07%)</title><rect width=".069%" height="15" x="97.442%" y="981" fill="#D5D421" fg:w="3" fg:x="4229"/></g><g><title>serde::de::MapAccess::next_value (3 samples, 0.07%)</title><rect width=".069%" height="15" x="97.442%" y="965" fill="#FC6A12" fg:w="3" fg:x="4229"/></g><g><title>&lt;simd_json::serde::de::CommaSeparated as serde::de::MapAccess&gt;::next_value_seed (3 samples, 0.07%)</title><rect width=".069%" height="15" x="97.442%" y="949" fill="#D07E2A" fg:w="3" fg:x="4229"/></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (3 samples, 0.07%)</title><rect width=".069%" height="15" x="97.442%" y="933" fill="#F6AF1D" fg:w="3" fg:x="4229"/></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize (3 samples, 0.07%)</title><rect width=".069%" height="15" x="97.442%" y="917" fill="#D70D32" fg:w="3" fg:x="4229"/></g><g><title>simd_json::serde::de::&lt;impl serde::de::Deserializer for &amp;mut simd_json::Deserializer&gt;::deserialize_seq (3 samples, 0.07%)</title><rect width=".069%" height="15" x="97.442%" y="901" fill="#D8AC0F" fg:w="3" fg:x="4229"/></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (3 samples, 0.07%)</title><rect width=".069%" height="15" x="97.442%" y="885" fill="#D4670D" fg:w="3" fg:x="4229"/></g><g><title>serde::de::SeqAccess::next_element (3 samples, 0.07%)</title><rect width=".069%" height="15" x="97.442%" y="869" fill="#E7AB24" fg:w="3" fg:x="4229"/></g><g><title>&lt;simd_json::serde::de::CommaSeparated as serde::de::SeqAccess&gt;::next_element_seed (3 samples, 0.07%)</title><rect width=".069%" height="15" x="97.442%" y="853" fill="#FA7B14" fg:w="3" fg:x="4229"/></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (3 samples, 0.07%)</title><rect width=".069%" height="15" x="97.442%" y="837" fill="#D43532" fg:w="3" fg:x="4229"/></g><g><title>json_benchmark::copy::citm_catalog::_::&lt;impl serde::de::Deserialize for json_benchmark::copy::citm_catalog::Area&gt;::deserialize (3 samples, 0.07%)</title><rect width=".069%" height="15" x="97.442%" y="821" fill="#F3360C" fg:w="3" fg:x="4229"/></g><g><title>simd_json::serde::de::&lt;impl serde::de::Deserializer for &amp;mut simd_json::Deserializer&gt;::deserialize_struct (3 samples, 0.07%)</title><rect width=".069%" height="15" x="97.442%" y="805" fill="#EA6522" fg:w="3" fg:x="4229"/></g><g><title>&lt;json_benchmark::copy::citm_catalog::_::&lt;impl serde::de::Deserialize for json_benchmark::copy::citm_catalog::Area&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.07%)</title><rect width=".069%" height="15" x="97.442%" y="789" fill="#FE4316" fg:w="3" fg:x="4229"/></g><g><title>serde::de::MapAccess::next_value (1 samples, 0.02%)</title><rect width=".023%" height="15" x="97.489%" y="773" fill="#FA232F" fg:w="1" fg:x="4231"/></g><g><title>&lt;simd_json::serde::de::CommaSeparated as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.02%)</title><rect width=".023%" height="15" x="97.489%" y="757" fill="#E27E26" fg:w="1" fg:x="4231"/></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.02%)</title><rect width=".023%" height="15" x="97.489%" y="741" fill="#D88A35" fg:w="1" fg:x="4231"/></g><g><title>&lt;json_benchmark::empty::Array as serde::de::Deserialize&gt;::deserialize (1 samples, 0.02%)</title><rect width=".023%" height="15" x="97.489%" y="725" fill="#F6C72B" fg:w="1" fg:x="4231"/></g><g><title>simd_json::serde::de::&lt;impl serde::de::Deserializer for &amp;mut simd_json::Deserializer&gt;::deserialize_tuple (1 samples, 0.02%)</title><rect width=".023%" height="15" x="97.489%" y="709" fill="#E87D0B" fg:w="1" fg:x="4231"/></g><g><title>simd_json::serde::de::&lt;impl serde::de::Deserializer for &amp;mut simd_json::Deserializer&gt;::deserialize_seq (1 samples, 0.02%)</title><rect width=".023%" height="15" x="97.489%" y="693" fill="#DADB2D" fg:w="1" fg:x="4231"/></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.02%)</title><rect width=".023%" height="15" x="97.489%" y="677" fill="#D86636" fg:w="1" fg:x="4231"/></g><g><title>json_benchmark::copy::citm_catalog::_::&lt;impl serde::de::Deserialize for json_benchmark::copy::citm_catalog::CitmCatalog&gt;::deserialize (8 samples, 0.18%)</title><rect width=".184%" height="15" x="97.35%" y="1397" fill="#FAE407" fg:w="8" fg:x="4225"/></g><g><title>simd_json::serde::de::&lt;impl serde::de::Deserializer for &amp;mut simd_json::Deserializer&gt;::deserialize_struct (8 samples, 0.18%)</title><rect width=".184%" height="15" x="97.35%" y="1381" fill="#E27D19" fg:w="8" fg:x="4225"/></g><g><title>&lt;json_benchmark::copy::citm_catalog::_::&lt;impl serde::de::Deserialize for json_benchmark::copy::citm_catalog::CitmCatalog&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_map (8 samples, 0.18%)</title><rect width=".184%" height="15" x="97.35%" y="1365" fill="#E0A51B" fg:w="8" fg:x="4225"/></g><g><title>serde::de::MapAccess::next_value (8 samples, 0.18%)</title><rect width=".184%" height="15" x="97.35%" y="1349" fill="#E95603" fg:w="8" fg:x="4225"/></g><g><title>&lt;simd_json::serde::de::CommaSeparated as serde::de::MapAccess&gt;::next_value_seed (8 samples, 0.18%)</title><rect width=".184%" height="15" x="97.35%" y="1333" fill="#E47414" fg:w="8" fg:x="4225"/></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (8 samples, 0.18%)</title><rect width=".184%" height="15" x="97.35%" y="1317" fill="#D1C011" fg:w="8" fg:x="4225"/></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize (6 samples, 0.14%)</title><rect width=".138%" height="15" x="97.396%" y="1301" fill="#E05822" fg:w="6" fg:x="4227"/></g><g><title>simd_json::serde::de::&lt;impl serde::de::Deserializer for &amp;mut simd_json::Deserializer&gt;::deserialize_seq (6 samples, 0.14%)</title><rect width=".138%" height="15" x="97.396%" y="1285" fill="#E92606" fg:w="6" fg:x="4227"/></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (6 samples, 0.14%)</title><rect width=".138%" height="15" x="97.396%" y="1269" fill="#D43B1E" fg:w="6" fg:x="4227"/></g><g><title>serde::de::SeqAccess::next_element (6 samples, 0.14%)</title><rect width=".138%" height="15" x="97.396%" y="1253" fill="#D55003" fg:w="6" fg:x="4227"/></g><g><title>&lt;simd_json::serde::de::CommaSeparated as serde::de::SeqAccess&gt;::next_element_seed (6 samples, 0.14%)</title><rect width=".138%" height="15" x="97.396%" y="1237" fill="#FBB207" fg:w="6" fg:x="4227"/></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (6 samples, 0.14%)</title><rect width=".138%" height="15" x="97.396%" y="1221" fill="#D59A1A" fg:w="6" fg:x="4227"/></g><g><title>json_benchmark::copy::citm_catalog::_::&lt;impl serde::de::Deserialize for json_benchmark::copy::citm_catalog::Performance&gt;::deserialize (6 samples, 0.14%)</title><rect width=".138%" height="15" x="97.396%" y="1205" fill="#EEA531" fg:w="6" fg:x="4227"/></g><g><title>simd_json::serde::de::&lt;impl serde::de::Deserializer for &amp;mut simd_json::Deserializer&gt;::deserialize_struct (6 samples, 0.14%)</title><rect width=".138%" height="15" x="97.396%" y="1189" fill="#F85B2E" fg:w="6" fg:x="4227"/></g><g><title>&lt;json_benchmark::copy::citm_catalog::_::&lt;impl serde::de::Deserialize for json_benchmark::copy::citm_catalog::Performance&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_map (6 samples, 0.14%)</title><rect width=".138%" height="15" x="97.396%" y="1173" fill="#F41534" fg:w="6" fg:x="4227"/></g><g><title>serde::de::MapAccess::next_value (4 samples, 0.09%)</title><rect width=".092%" height="15" x="97.442%" y="1157" fill="#F77A14" fg:w="4" fg:x="4229"/></g><g><title>&lt;simd_json::serde::de::CommaSeparated as serde::de::MapAccess&gt;::next_value_seed (4 samples, 0.09%)</title><rect width=".092%" height="15" x="97.442%" y="1141" fill="#DA1B09" fg:w="4" fg:x="4229"/></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (4 samples, 0.09%)</title><rect width=".092%" height="15" x="97.442%" y="1125" fill="#F60706" fg:w="4" fg:x="4229"/></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u32&gt;::deserialize (1 samples, 0.02%)</title><rect width=".023%" height="15" x="97.511%" y="1109" fill="#E38736" fg:w="1" fg:x="4232"/></g><g><title>simd_json::serde::de::&lt;impl serde::de::Deserializer for &amp;mut simd_json::Deserializer&gt;::deserialize_u32 (1 samples, 0.02%)</title><rect width=".023%" height="15" x="97.511%" y="1093" fill="#F70E0B" fg:w="1" fg:x="4232"/></g><g><title>?? (1 samples, 0.02%)</title><rect width=".023%" height="15" x="97.511%" y="1077" fill="#CE9522" fg:w="1" fg:x="4232"/></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.02%)</title><rect width=".023%" height="15" x="97.511%" y="1061" fill="#E3E404" fg:w="1" fg:x="4232"/></g><g><title>&lt;simd_json::avx2::stage1::SimdInputAVX as simd_json::Stage1Parse&lt;core::core_arch::x86::__m256i&gt;&gt;::find_whitespace_and_structurals (2 samples, 0.05%)</title><rect width=".046%" height="15" x="97.535%" y="1317" fill="#EEDA1C" fg:w="2" fg:x="4233"/></g><g><title>&lt;simd_json::avx2::stage1::SimdInputAVX as simd_json::Stage1Parse&lt;core::core_arch::x86::__m256i&gt;&gt;::flatten_bits (2 samples, 0.05%)</title><rect width=".046%" height="15" x="97.581%" y="1317" fill="#FC5628" fg:w="2" fg:x="4235"/></g><g><title>core::num::&lt;impl u64&gt;::trailing_zeros (1 samples, 0.02%)</title><rect width=".023%" height="15" x="97.604%" y="1301" fill="#FBE10B" fg:w="1" fg:x="4236"/></g><g><title>?? (5 samples, 0.12%)</title><rect width=".115%" height="15" x="97.535%" y="1333" fill="#CE2E31" fg:w="5" fg:x="4233"/></g><g><title>simd_json::Stage1Parse::find_odd_backslash_sequences (1 samples, 0.02%)</title><rect width=".023%" height="15" x="97.627%" y="1317" fill="#F58018" fg:w="1" fg:x="4237"/></g><g><title>&lt;simd_json::avx2::stage1::SimdInputAVX as simd_json::Stage1Parse&lt;core::core_arch::x86::__m256i&gt;&gt;::cmp_mask_against_input (1 samples, 0.02%)</title><rect width=".023%" height="15" x="97.627%" y="1301" fill="#DBB122" fg:w="1" fg:x="4237"/></g><g><title>?? (9 samples, 0.21%)</title><rect width=".207%" height="15" x="97.535%" y="1349" fill="#DA3C30" fg:w="9" fg:x="4233"/></g><g><title>simd_json::Deserializer::from_slice (4 samples, 0.09%)</title><rect width=".092%" height="15" x="97.65%" y="1333" fill="#DD0B05" fg:w="4" fg:x="4238"/></g><g><title>?? (11 samples, 0.25%)</title><rect width=".254%" height="15" x="97.535%" y="1365" fill="#DC940D" fg:w="11" fg:x="4233"/></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (2 samples, 0.05%)</title><rect width=".046%" height="15" x="97.742%" y="1349" fill="#D21003" fg:w="2" fg:x="4242"/></g><g><title>core::ptr::write (2 samples, 0.05%)</title><rect width=".046%" height="15" x="97.742%" y="1333" fill="#EC5002" fg:w="2" fg:x="4242"/></g><g><title>core::intrinsics::copy_nonoverlapping (4 samples, 0.09%)</title><rect width=".092%" height="15" x="97.788%" y="1365" fill="#EF8113" fg:w="4" fg:x="4244"/></g><g><title>__memmove_avx_unaligned_erms (4 samples, 0.09%)</title><rect width=".092%" height="15" x="97.788%" y="1349" fill="#DC6A23" fg:w="4" fg:x="4244"/></g><g><title>simd_json::Deserializer::parse_str_ (1 samples, 0.02%)</title><rect width=".023%" height="15" x="98.041%" y="1333" fill="#FC8B2D" fg:w="1" fg:x="4255"/></g><g><title>simd_json::Deserializer::parse_str_ (3 samples, 0.07%)</title><rect width=".069%" height="15" x="98.018%" y="1349" fill="#E50824" fg:w="3" fg:x="4254"/></g><g><title>simd_json::avx2::deser::parse_str_avx (1 samples, 0.02%)</title><rect width=".023%" height="15" x="98.064%" y="1333" fill="#E67E21" fg:w="1" fg:x="4256"/></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (1 samples, 0.02%)</title><rect width=".023%" height="15" x="98.064%" y="1317" fill="#EF8C15" fg:w="1" fg:x="4256"/></g><g><title>?? (4,179 samples, 96.29%)</title><rect width="96.29%" height="15" x="1.82%" y="1541" fill="#FE6809" fg:w="4179" fg:x="79"/><text x="2.07%" y="1551.5">??</text></g><g><title>?? (4,179 samples, 96.29%)</title><rect width="96.29%" height="15" x="1.82%" y="1525" fill="#EF340E" fg:w="4179" fg:x="79"/><text x="2.07%" y="1535.5">??</text></g><g><title>criterion::routine::Routine::profile (4,179 samples, 96.29%)</title><rect width="96.29%" height="15" x="1.82%" y="1509" fill="#D0E32C" fg:w="4179" fg:x="79"/><text x="2.07%" y="1519.5">criterion::routine::Routine::profile</text></g><g><title>&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Routine&lt;M,T&gt;&gt;::warm_up (1,482 samples, 34.15%)</title><rect width="34.148%" height="15" x="63.963%" y="1493" fill="#F61213" fg:w="1482" fg:x="2776"/><text x="64.213%" y="1503.5">&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::rout..</text></g><g><title>deserialize_struct::bench_citm_catalog_CitmCatalog::_{{closure}} (1,482 samples, 34.15%)</title><rect width="34.148%" height="15" x="63.963%" y="1477" fill="#EBE419" fg:w="1482" fg:x="2776"/><text x="64.213%" y="1487.5">deserialize_struct::bench_citm_catalog_CitmCatalog::_{{..</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter_batched (1,482 samples, 34.15%)</title><rect width="34.148%" height="15" x="63.963%" y="1461" fill="#F09C14" fg:w="1482" fg:x="2776"/><text x="64.213%" y="1471.5">criterion::bencher::Bencher&lt;M&gt;::iter_batched</text></g><g><title>deserialize_struct::bench_citm_catalog_CitmCatalog::_{{closure}}::_{{closure}} (36 samples, 0.83%)</title><rect width=".83%" height="15" x="97.281%" y="1445" fill="#E00814" fg:w="36" fg:x="4222"/></g><g><title>deserialize_struct::simd_json_parse_struct (33 samples, 0.76%)</title><rect width=".76%" height="15" x="97.35%" y="1429" fill="#D60C34" fg:w="33" fg:x="4225"/></g><g><title>simd_json::serde::from_slice (33 samples, 0.76%)</title><rect width=".76%" height="15" x="97.35%" y="1413" fill="#D3DC2F" fg:w="33" fg:x="4225"/></g><g><title>simd_json::Deserializer::from_slice (25 samples, 0.58%)</title><rect width=".576%" height="15" x="97.535%" y="1397" fill="#FAAD05" fg:w="25" fg:x="4233"/></g><g><title>?? (25 samples, 0.58%)</title><rect width=".576%" height="15" x="97.535%" y="1381" fill="#FA7D34" fg:w="25" fg:x="4233"/></g><g><title>simd_json::Deserializer::from_slice (10 samples, 0.23%)</title><rect width=".23%" height="15" x="97.88%" y="1365" fill="#D18512" fg:w="10" fg:x="4248"/></g><g><title>simd_json::numberparse::correct::&lt;impl simd_json::Deserializer&gt;::parse_number (1 samples, 0.02%)</title><rect width=".023%" height="15" x="98.088%" y="1349" fill="#D8AD16" fg:w="1" fg:x="4257"/></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.02%)</title><rect width=".023%" height="15" x="98.111%" y="853" fill="#CD0316" fg:w="1" fg:x="4258"/></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::next (1 samples, 0.02%)</title><rect width=".023%" height="15" x="98.111%" y="837" fill="#F81614" fg:w="1" fg:x="4258"/></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.02%)</title><rect width=".023%" height="15" x="98.111%" y="821" fill="#E9061D" fg:w="1" fg:x="4258"/></g><g><title>?? (1 samples, 0.02%)</title><rect width=".023%" height="15" x="98.111%" y="805" fill="#F01636" fg:w="1" fg:x="4258"/></g><g><title>?? (1 samples, 0.02%)</title><rect width=".023%" height="15" x="98.111%" y="789" fill="#E78520" fg:w="1" fg:x="4258"/></g><g><title>alloc::collections::btree::mem::replace (1 samples, 0.02%)</title><rect width=".023%" height="15" x="98.111%" y="773" fill="#F8C104" fg:w="1" fg:x="4258"/></g><g><title>alloc::collections::btree::navigate::_&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::next_unchecked::_{{closure}} (1 samples, 0.02%)</title><rect width=".023%" height="15" x="98.111%" y="757" fill="#D3B22E" fg:w="1" fg:x="4258"/></g><g><title>?? (1 samples, 0.02%)</title><rect width=".023%" height="15" x="98.111%" y="741" fill="#E0052A" fg:w="1" fg:x="4258"/></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.02%)</title><rect width=".023%" height="15" x="98.111%" y="725" fill="#EFB019" fg:w="1" fg:x="4258"/></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.02%)</title><rect width=".023%" height="15" x="98.157%" y="565" fill="#F5BB32" fg:w="1" fg:x="4260"/></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::next (1 samples, 0.02%)</title><rect width=".023%" height="15" x="98.157%" y="549" fill="#F8180F" fg:w="1" fg:x="4260"/></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.02%)</title><rect width=".023%" height="15" x="98.157%" y="533" fill="#CDA60D" fg:w="1" fg:x="4260"/></g><g><title>?? (1 samples, 0.02%)</title><rect width=".023%" height="15" x="98.157%" y="517" fill="#D07217" fg:w="1" fg:x="4260"/></g><g><title>?? (1 samples, 0.02%)</title><rect width=".023%" height="15" x="98.157%" y="501" fill="#EF7F12" fg:w="1" fg:x="4260"/></g><g><title>alloc::collections::btree::mem::replace (1 samples, 0.02%)</title><rect width=".023%" height="15" x="98.157%" y="485" fill="#DB9A1C" fg:w="1" fg:x="4260"/></g><g><title>alloc::collections::btree::navigate::_&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::next_unchecked::_{{closure}} (1 samples, 0.02%)</title><rect width=".023%" height="15" x="98.157%" y="469" fill="#E19D17" fg:w="1" fg:x="4260"/></g><g><title>?? (1 samples, 0.02%)</title><rect width=".023%" height="15" x="98.157%" y="453" fill="#DB0806" fg:w="1" fg:x="4260"/></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.02%)</title><rect width=".023%" height="15" x="98.157%" y="437" fill="#D42F06" fg:w="1" fg:x="4260"/></g><g><title>core::cmp::PartialEq::ne (4 samples, 0.09%)</title><rect width=".092%" height="15" x="98.111%" y="1525" fill="#E0BE04" fg:w="4" fg:x="4258"/></g><g><title>&lt;serde_json::value::Value as core::cmp::PartialEq&gt;::eq (4 samples, 0.09%)</title><rect width=".092%" height="15" x="98.111%" y="1509" fill="#EFB71D" fg:w="4" fg:x="4258"/></g><g><title>&lt;serde_json::map::Map&lt;alloc::string::String,serde_json::value::Value&gt; as core::cmp::PartialEq&gt;::eq (4 samples, 0.09%)</title><rect width=".092%" height="15" x="98.111%" y="1493" fill="#D53907" fg:w="4" fg:x="4258"/></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (4 samples, 0.09%)</title><rect width=".092%" height="15" x="98.111%" y="1477" fill="#D89401" fg:w="4" fg:x="4258"/></g><g><title>core::iter::traits::iterator::Iterator::all (4 samples, 0.09%)</title><rect width=".092%" height="15" x="98.111%" y="1461" fill="#ECB61D" fg:w="4" fg:x="4258"/></g><g><title>core::iter::traits::iterator::Iterator::try_fold (4 samples, 0.09%)</title><rect width=".092%" height="15" x="98.111%" y="1445" fill="#F47830" fg:w="4" fg:x="4258"/></g><g><title>core::iter::traits::iterator::Iterator::all::check::_{{closure}} (4 samples, 0.09%)</title><rect width=".092%" height="15" x="98.111%" y="1429" fill="#CE4722" fg:w="4" fg:x="4258"/></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq::_{{closure}} (4 samples, 0.09%)</title><rect width=".092%" height="15" x="98.111%" y="1413" fill="#F22006" fg:w="4" fg:x="4258"/></g><g><title>core::tuple::&lt;impl core::cmp::PartialEq for (U,T)&gt;::eq (4 samples, 0.09%)</title><rect width=".092%" height="15" x="98.111%" y="1397" fill="#F12303" fg:w="4" fg:x="4258"/></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (4 samples, 0.09%)</title><rect width=".092%" height="15" x="98.111%" y="1381" fill="#DE3E13" fg:w="4" fg:x="4258"/></g><g><title>&lt;serde_json::value::Value as core::cmp::PartialEq&gt;::eq (4 samples, 0.09%)</title><rect width=".092%" height="15" x="98.111%" y="1365" fill="#DF6E29" fg:w="4" fg:x="4258"/></g><g><title>alloc::vec::partial_eq::&lt;impl core::cmp::PartialEq&lt;alloc::vec::Vec&lt;U,A2&gt;&gt; for alloc::vec::Vec&lt;T,A1&gt;&gt;::eq (4 samples, 0.09%)</title><rect width=".092%" height="15" x="98.111%" y="1349" fill="#D0E004" fg:w="4" fg:x="4258"/></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (4 samples, 0.09%)</title><rect width=".092%" height="15" x="98.111%" y="1333" fill="#F18913" fg:w="4" fg:x="4258"/></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (4 samples, 0.09%)</title><rect width=".092%" height="15" x="98.111%" y="1317" fill="#F41811" fg:w="4" fg:x="4258"/></g><g><title>core::iter::traits::iterator::Iterator::all (4 samples, 0.09%)</title><rect width=".092%" height="15" x="98.111%" y="1301" fill="#F5B231" fg:w="4" fg:x="4258"/></g><g><title>core::iter::traits::iterator::Iterator::try_fold (4 samples, 0.09%)</title><rect width=".092%" height="15" x="98.111%" y="1285" fill="#DBA026" fg:w="4" fg:x="4258"/></g><g><title>core::iter::traits::iterator::Iterator::all::check::_{{closure}} (4 samples, 0.09%)</title><rect width=".092%" height="15" x="98.111%" y="1269" fill="#E4890E" fg:w="4" fg:x="4258"/></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal::_{{closure}} (4 samples, 0.09%)</title><rect width=".092%" height="15" x="98.111%" y="1253" fill="#ED860B" fg:w="4" fg:x="4258"/></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (4 samples, 0.09%)</title><rect width=".092%" height="15" x="98.111%" y="1237" fill="#D37E2C" fg:w="4" fg:x="4258"/></g><g><title>&lt;serde_json::value::Value as core::cmp::PartialEq&gt;::eq (4 samples, 0.09%)</title><rect width=".092%" height="15" x="98.111%" y="1221" fill="#E2AB21" fg:w="4" fg:x="4258"/></g><g><title>&lt;serde_json::map::Map&lt;alloc::string::String,serde_json::value::Value&gt; as core::cmp::PartialEq&gt;::eq (4 samples, 0.09%)</title><rect width=".092%" height="15" x="98.111%" y="1205" fill="#FD630D" fg:w="4" fg:x="4258"/></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (4 samples, 0.09%)</title><rect width=".092%" height="15" x="98.111%" y="1189" fill="#F43007" fg:w="4" fg:x="4258"/></g><g><title>core::iter::traits::iterator::Iterator::all (4 samples, 0.09%)</title><rect width=".092%" height="15" x="98.111%" y="1173" fill="#F4D936" fg:w="4" fg:x="4258"/></g><g><title>core::iter::traits::iterator::Iterator::try_fold (4 samples, 0.09%)</title><rect width=".092%" height="15" x="98.111%" y="1157" fill="#E00F12" fg:w="4" fg:x="4258"/></g><g><title>core::iter::traits::iterator::Iterator::all::check::_{{closure}} (4 samples, 0.09%)</title><rect width=".092%" height="15" x="98.111%" y="1141" fill="#F4630C" fg:w="4" fg:x="4258"/></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq::_{{closure}} (4 samples, 0.09%)</title><rect width=".092%" height="15" x="98.111%" y="1125" fill="#E9E208" fg:w="4" fg:x="4258"/></g><g><title>core::tuple::&lt;impl core::cmp::PartialEq for (U,T)&gt;::eq (4 samples, 0.09%)</title><rect width=".092%" height="15" x="98.111%" y="1109" fill="#E5D303" fg:w="4" fg:x="4258"/></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (4 samples, 0.09%)</title><rect width=".092%" height="15" x="98.111%" y="1093" fill="#D88C15" fg:w="4" fg:x="4258"/></g><g><title>&lt;serde_json::value::Value as core::cmp::PartialEq&gt;::eq (4 samples, 0.09%)</title><rect width=".092%" height="15" x="98.111%" y="1077" fill="#EA7A1E" fg:w="4" fg:x="4258"/></g><g><title>alloc::vec::partial_eq::&lt;impl core::cmp::PartialEq&lt;alloc::vec::Vec&lt;U,A2&gt;&gt; for alloc::vec::Vec&lt;T,A1&gt;&gt;::eq (4 samples, 0.09%)</title><rect width=".092%" height="15" x="98.111%" y="1061" fill="#EC192E" fg:w="4" fg:x="4258"/></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (4 samples, 0.09%)</title><rect width=".092%" height="15" x="98.111%" y="1045" fill="#D93436" fg:w="4" fg:x="4258"/></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (4 samples, 0.09%)</title><rect width=".092%" height="15" x="98.111%" y="1029" fill="#DE1D1A" fg:w="4" fg:x="4258"/></g><g><title>core::iter::traits::iterator::Iterator::all (4 samples, 0.09%)</title><rect width=".092%" height="15" x="98.111%" y="1013" fill="#D8B11D" fg:w="4" fg:x="4258"/></g><g><title>core::iter::traits::iterator::Iterator::try_fold (4 samples, 0.09%)</title><rect width=".092%" height="15" x="98.111%" y="997" fill="#F78833" fg:w="4" fg:x="4258"/></g><g><title>core::iter::traits::iterator::Iterator::all::check::_{{closure}} (4 samples, 0.09%)</title><rect width=".092%" height="15" x="98.111%" y="981" fill="#E72F2F" fg:w="4" fg:x="4258"/></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal::_{{closure}} (4 samples, 0.09%)</title><rect width=".092%" height="15" x="98.111%" y="965" fill="#D3C024" fg:w="4" fg:x="4258"/></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (4 samples, 0.09%)</title><rect width=".092%" height="15" x="98.111%" y="949" fill="#E59C20" fg:w="4" fg:x="4258"/></g><g><title>&lt;serde_json::value::Value as core::cmp::PartialEq&gt;::eq (4 samples, 0.09%)</title><rect width=".092%" height="15" x="98.111%" y="933" fill="#F8D514" fg:w="4" fg:x="4258"/></g><g><title>&lt;serde_json::map::Map&lt;alloc::string::String,serde_json::value::Value&gt; as core::cmp::PartialEq&gt;::eq (4 samples, 0.09%)</title><rect width=".092%" height="15" x="98.111%" y="917" fill="#D94007" fg:w="4" fg:x="4258"/></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (4 samples, 0.09%)</title><rect width=".092%" height="15" x="98.111%" y="901" fill="#E88E08" fg:w="4" fg:x="4258"/></g><g><title>core::iter::traits::iterator::Iterator::all (4 samples, 0.09%)</title><rect width=".092%" height="15" x="98.111%" y="885" fill="#E05C2C" fg:w="4" fg:x="4258"/></g><g><title>core::iter::traits::iterator::Iterator::try_fold (4 samples, 0.09%)</title><rect width=".092%" height="15" x="98.111%" y="869" fill="#D6A911" fg:w="4" fg:x="4258"/></g><g><title>core::iter::traits::iterator::Iterator::all::check::_{{closure}} (3 samples, 0.07%)</title><rect width=".069%" height="15" x="98.134%" y="853" fill="#D23B25" fg:w="3" fg:x="4259"/></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq::_{{closure}} (3 samples, 0.07%)</title><rect width=".069%" height="15" x="98.134%" y="837" fill="#D67430" fg:w="3" fg:x="4259"/></g><g><title>core::tuple::&lt;impl core::cmp::PartialEq for (U,T)&gt;::eq (3 samples, 0.07%)</title><rect width=".069%" height="15" x="98.134%" y="821" fill="#F4BF06" fg:w="3" fg:x="4259"/></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (3 samples, 0.07%)</title><rect width=".069%" height="15" x="98.134%" y="805" fill="#F13234" fg:w="3" fg:x="4259"/></g><g><title>&lt;serde_json::value::Value as core::cmp::PartialEq&gt;::eq (3 samples, 0.07%)</title><rect width=".069%" height="15" x="98.134%" y="789" fill="#EC4B27" fg:w="3" fg:x="4259"/></g><g><title>alloc::vec::partial_eq::&lt;impl core::cmp::PartialEq&lt;alloc::vec::Vec&lt;U,A2&gt;&gt; for alloc::vec::Vec&lt;T,A1&gt;&gt;::eq (3 samples, 0.07%)</title><rect width=".069%" height="15" x="98.134%" y="773" fill="#EC6300" fg:w="3" fg:x="4259"/></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (3 samples, 0.07%)</title><rect width=".069%" height="15" x="98.134%" y="757" fill="#CFCA0F" fg:w="3" fg:x="4259"/></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (3 samples, 0.07%)</title><rect width=".069%" height="15" x="98.134%" y="741" fill="#E9CF0E" fg:w="3" fg:x="4259"/></g><g><title>core::iter::traits::iterator::Iterator::all (3 samples, 0.07%)</title><rect width=".069%" height="15" x="98.134%" y="725" fill="#E21B33" fg:w="3" fg:x="4259"/></g><g><title>core::iter::traits::iterator::Iterator::try_fold (3 samples, 0.07%)</title><rect width=".069%" height="15" x="98.134%" y="709" fill="#CE682A" fg:w="3" fg:x="4259"/></g><g><title>core::iter::traits::iterator::Iterator::all::check::_{{closure}} (3 samples, 0.07%)</title><rect width=".069%" height="15" x="98.134%" y="693" fill="#D4E104" fg:w="3" fg:x="4259"/></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal::_{{closure}} (3 samples, 0.07%)</title><rect width=".069%" height="15" x="98.134%" y="677" fill="#E9602A" fg:w="3" fg:x="4259"/></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (3 samples, 0.07%)</title><rect width=".069%" height="15" x="98.134%" y="661" fill="#E51520" fg:w="3" fg:x="4259"/></g><g><title>&lt;serde_json::value::Value as core::cmp::PartialEq&gt;::eq (3 samples, 0.07%)</title><rect width=".069%" height="15" x="98.134%" y="645" fill="#E2D818" fg:w="3" fg:x="4259"/></g><g><title>&lt;serde_json::map::Map&lt;alloc::string::String,serde_json::value::Value&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.05%)</title><rect width=".046%" height="15" x="98.157%" y="629" fill="#DDA311" fg:w="2" fg:x="4260"/></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.05%)</title><rect width=".046%" height="15" x="98.157%" y="613" fill="#D8D82A" fg:w="2" fg:x="4260"/></g><g><title>core::iter::traits::iterator::Iterator::all (2 samples, 0.05%)</title><rect width=".046%" height="15" x="98.157%" y="597" fill="#F07607" fg:w="2" fg:x="4260"/></g><g><title>core::iter::traits::iterator::Iterator::try_fold (2 samples, 0.05%)</title><rect width=".046%" height="15" x="98.157%" y="581" fill="#DD4325" fg:w="2" fg:x="4260"/></g><g><title>core::iter::traits::iterator::Iterator::all::check::_{{closure}} (1 samples, 0.02%)</title><rect width=".023%" height="15" x="98.18%" y="565" fill="#F1202C" fg:w="1" fg:x="4261"/></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq::_{{closure}} (1 samples, 0.02%)</title><rect width=".023%" height="15" x="98.18%" y="549" fill="#EBCC2B" fg:w="1" fg:x="4261"/></g><g><title>core::tuple::&lt;impl core::cmp::PartialEq for (U,T)&gt;::eq (1 samples, 0.02%)</title><rect width=".023%" height="15" x="98.18%" y="533" fill="#D5740A" fg:w="1" fg:x="4261"/></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (1 samples, 0.02%)</title><rect width=".023%" height="15" x="98.18%" y="517" fill="#EF0F30" fg:w="1" fg:x="4261"/></g><g><title>&lt;alloc::string::String as core::cmp::PartialEq&gt;::eq (1 samples, 0.02%)</title><rect width=".023%" height="15" x="98.18%" y="501" fill="#CF7B24" fg:w="1" fg:x="4261"/></g><g><title>alloc::vec::partial_eq::&lt;impl core::cmp::PartialEq&lt;alloc::vec::Vec&lt;U,A2&gt;&gt; for alloc::vec::Vec&lt;T,A1&gt;&gt;::eq (1 samples, 0.02%)</title><rect width=".023%" height="15" x="98.18%" y="485" fill="#D1671E" fg:w="1" fg:x="4261"/></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (1 samples, 0.02%)</title><rect width=".023%" height="15" x="98.18%" y="469" fill="#EE6413" fg:w="1" fg:x="4261"/></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (1 samples, 0.02%)</title><rect width=".023%" height="15" x="98.18%" y="453" fill="#F41E0E" fg:w="1" fg:x="4261"/></g><g><title>?? (1 samples, 0.02%)</title><rect width=".023%" height="15" x="98.203%" y="1189" fill="#F9AE06" fg:w="1" fg:x="4262"/></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (1 samples, 0.02%)</title><rect width=".023%" height="15" x="98.203%" y="1173" fill="#EBD529" fg:w="1" fg:x="4262"/></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (1 samples, 0.02%)</title><rect width=".023%" height="15" x="98.203%" y="1157" fill="#D57606" fg:w="1" fg:x="4262"/></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (1 samples, 0.02%)</title><rect width=".023%" height="15" x="98.203%" y="1141" fill="#EB2C33" fg:w="1" fg:x="4262"/></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.02%)</title><rect width=".023%" height="15" x="98.203%" y="1125" fill="#D90935" fg:w="1" fg:x="4262"/></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.02%)</title><rect width=".023%" height="15" x="98.203%" y="1109" fill="#EDAC22" fg:w="1" fg:x="4262"/></g><g><title>alloc::alloc::dealloc (1 samples, 0.02%)</title><rect width=".023%" height="15" x="98.203%" y="1093" fill="#CECE0B" fg:w="1" fg:x="4262"/></g><g><title>__rust_dealloc (1 samples, 0.02%)</title><rect width=".023%" height="15" x="98.203%" y="1077" fill="#D6951D" fg:w="1" fg:x="4262"/></g><g><title>&lt;jemallocator::Jemalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (1 samples, 0.02%)</title><rect width=".023%" height="15" x="98.203%" y="1061" fill="#D07B03" fg:w="1" fg:x="4262"/></g><g><title>_rjem_je_sdallocx_default (1 samples, 0.02%)</title><rect width=".023%" height="15" x="98.203%" y="1045" fill="#E57E04" fg:w="1" fg:x="4262"/></g><g><title>_rjem_je_tcache_bin_flush_small (1 samples, 0.02%)</title><rect width=".023%" height="15" x="98.203%" y="1029" fill="#DE5C24" fg:w="1" fg:x="4262"/></g><g><title>tcache_bin_flush_bottom (1 samples, 0.02%)</title><rect width=".023%" height="15" x="98.203%" y="1013" fill="#D82729" fg:w="1" fg:x="4262"/></g><g><title>tcache_bin_flush_impl (1 samples, 0.02%)</title><rect width=".023%" height="15" x="98.203%" y="997" fill="#FD7F1C" fg:w="1" fg:x="4262"/></g><g><title>_rjem_je_arena_slab_dalloc (1 samples, 0.02%)</title><rect width=".023%" height="15" x="98.203%" y="981" fill="#F99833" fg:w="1" fg:x="4262"/></g><g><title>pac_dalloc_impl (1 samples, 0.02%)</title><rect width=".023%" height="15" x="98.203%" y="965" fill="#D17B2A" fg:w="1" fg:x="4262"/></g><g><title>_rjem_je_extent_record (1 samples, 0.02%)</title><rect width=".023%" height="15" x="98.203%" y="949" fill="#F17616" fg:w="1" fg:x="4262"/></g><g><title>extent_deactivate_locked (1 samples, 0.02%)</title><rect width=".023%" height="15" x="98.203%" y="933" fill="#D01907" fg:w="1" fg:x="4262"/></g><g><title>extent_deactivate_locked_impl (1 samples, 0.02%)</title><rect width=".023%" height="15" x="98.203%" y="917" fill="#F39027" fg:w="1" fg:x="4262"/></g><g><title>_rjem_je_eset_insert (1 samples, 0.02%)</title><rect width=".023%" height="15" x="98.203%" y="901" fill="#FA3205" fg:w="1" fg:x="4262"/></g><g><title>eset_stats_add (1 samples, 0.02%)</title><rect width=".023%" height="15" x="98.203%" y="885" fill="#CF430B" fg:w="1" fg:x="4262"/></g><g><title>_rjem_je_eset_insert (1 samples, 0.02%)</title><rect width=".023%" height="15" x="98.203%" y="869" fill="#F5CC28" fg:w="1" fg:x="4262"/></g><g><title>_rjem_je_sdallocx_default (1 samples, 0.02%)</title><rect width=".023%" height="15" x="98.226%" y="629" fill="#EEE418" fg:w="1" fg:x="4263"/></g><g><title>_rjem_je_tcache_bin_flush_small (1 samples, 0.02%)</title><rect width=".023%" height="15" x="98.226%" y="613" fill="#D97416" fg:w="1" fg:x="4263"/></g><g><title>tcache_bin_flush_bottom (1 samples, 0.02%)</title><rect width=".023%" height="15" x="98.226%" y="597" fill="#EA620C" fg:w="1" fg:x="4263"/></g><g><title>tcache_bin_flush_impl (1 samples, 0.02%)</title><rect width=".023%" height="15" x="98.226%" y="581" fill="#F2AA32" fg:w="1" fg:x="4263"/></g><g><title>arena_dalloc_bin_locked_step (1 samples, 0.02%)</title><rect width=".023%" height="15" x="98.226%" y="565" fill="#EB0705" fg:w="1" fg:x="4263"/></g><g><title>edata_nfree_inc (1 samples, 0.02%)</title><rect width=".023%" height="15" x="98.226%" y="549" fill="#F1721C" fg:w="1" fg:x="4263"/></g><g><title>?? (2 samples, 0.05%)</title><rect width=".046%" height="15" x="98.226%" y="773" fill="#F6702A" fg:w="2" fg:x="4263"/></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (2 samples, 0.05%)</title><rect width=".046%" height="15" x="98.226%" y="757" fill="#F8E40E" fg:w="2" fg:x="4263"/></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (2 samples, 0.05%)</title><rect width=".046%" height="15" x="98.226%" y="741" fill="#D08512" fg:w="2" fg:x="4263"/></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (2 samples, 0.05%)</title><rect width=".046%" height="15" x="98.226%" y="725" fill="#CF2331" fg:w="2" fg:x="4263"/></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.05%)</title><rect width=".046%" height="15" x="98.226%" y="709" fill="#CD4424" fg:w="2" fg:x="4263"/></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (2 samples, 0.05%)</title><rect width=".046%" height="15" x="98.226%" y="693" fill="#F53E28" fg:w="2" fg:x="4263"/></g><g><title>alloc::alloc::dealloc (2 samples, 0.05%)</title><rect width=".046%" height="15" x="98.226%" y="677" fill="#E41B18" fg:w="2" fg:x="4263"/></g><g><title>__rust_dealloc (2 samples, 0.05%)</title><rect width=".046%" height="15" x="98.226%" y="661" fill="#FD130C" fg:w="2" fg:x="4263"/></g><g><title>&lt;jemallocator::Jemalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (2 samples, 0.05%)</title><rect width=".046%" height="15" x="98.226%" y="645" fill="#E81C14" fg:w="2" fg:x="4263"/></g><g><title>_rjem_sdallocx (1 samples, 0.02%)</title><rect width=".023%" height="15" x="98.249%" y="629" fill="#DA2333" fg:w="1" fg:x="4264"/></g><g><title>free_fastpath (1 samples, 0.02%)</title><rect width=".023%" height="15" x="98.249%" y="613" fill="#D45A28" fg:w="1" fg:x="4264"/></g><g><title>cache_bin_dalloc_easy (1 samples, 0.02%)</title><rect width=".023%" height="15" x="98.249%" y="597" fill="#DCAC0C" fg:w="1" fg:x="4264"/></g><g><title>?? (3 samples, 0.07%)</title><rect width=".069%" height="15" x="98.226%" y="789" fill="#E29F14" fg:w="3" fg:x="4263"/></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.02%)</title><rect width=".023%" height="15" x="98.272%" y="773" fill="#EACD10" fg:w="1" fg:x="4265"/></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.02%)</title><rect width=".023%" height="15" x="98.272%" y="757" fill="#CF0927" fg:w="1" fg:x="4265"/></g><g><title>?? (1 samples, 0.02%)</title><rect width=".023%" height="15" x="98.295%" y="741" fill="#F98F0F" fg:w="1" fg:x="4266"/></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.02%)</title><rect width=".023%" height="15" x="98.295%" y="725" fill="#FD851D" fg:w="1" fg:x="4266"/></g><g><title>alloc::alloc::dealloc (1 samples, 0.02%)</title><rect width=".023%" height="15" x="98.295%" y="709" fill="#DB0" fg:w="1" fg:x="4266"/></g><g><title>__rust_dealloc (1 samples, 0.02%)</title><rect width=".023%" height="15" x="98.295%" y="693" fill="#CDCC1A" fg:w="1" fg:x="4266"/></g><g><title>&lt;jemallocator::Jemalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (1 samples, 0.02%)</title><rect width=".023%" height="15" x="98.295%" y="677" fill="#E04436" fg:w="1" fg:x="4266"/></g><g><title>_rjem_je_sdallocx_default (1 samples, 0.02%)</title><rect width=".023%" height="15" x="98.295%" y="661" fill="#D14304" fg:w="1" fg:x="4266"/></g><g><title>_rjem_je_te_event_trigger (1 samples, 0.02%)</title><rect width=".023%" height="15" x="98.295%" y="645" fill="#E4E512" fg:w="1" fg:x="4266"/></g><g><title>tcache_event (1 samples, 0.02%)</title><rect width=".023%" height="15" x="98.295%" y="629" fill="#E7590D" fg:w="1" fg:x="4266"/></g><g><title>tcache_gc_small (1 samples, 0.02%)</title><rect width=".023%" height="15" x="98.295%" y="613" fill="#D2B612" fg:w="1" fg:x="4266"/></g><g><title>_rjem_je_tcache_bin_flush_small (1 samples, 0.02%)</title><rect width=".023%" height="15" x="98.295%" y="597" fill="#F06902" fg:w="1" fg:x="4266"/></g><g><title>tcache_bin_flush_bottom (1 samples, 0.02%)</title><rect width=".023%" height="15" x="98.295%" y="581" fill="#CFAA32" fg:w="1" fg:x="4266"/></g><g><title>cache_bin_finish_flush (1 samples, 0.02%)</title><rect width=".023%" height="15" x="98.295%" y="565" fill="#E88518" fg:w="1" fg:x="4266"/></g><g><title>__memmove_avx_unaligned_erms (1 samples, 0.02%)</title><rect width=".023%" height="15" x="98.295%" y="549" fill="#EBA61B" fg:w="1" fg:x="4266"/></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (8 samples, 0.18%)</title><rect width=".184%" height="15" x="98.203%" y="1525" fill="#D1130D" fg:w="8" fg:x="4262"/></g><g><title>core::ptr::drop_in_place&lt;serde_json::map::Map&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (8 samples, 0.18%)</title><rect width=".184%" height="15" x="98.203%" y="1509" fill="#E24F27" fg:w="8" fg:x="4262"/></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::BTreeMap&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (8 samples, 0.18%)</title><rect width=".184%" height="15" x="98.203%" y="1493" fill="#DEA30A" fg:w="8" fg:x="4262"/></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (8 samples, 0.18%)</title><rect width=".184%" height="15" x="98.203%" y="1477" fill="#D62C13" fg:w="8" fg:x="4262"/></g><g><title>core::mem::drop (8 samples, 0.18%)</title><rect width=".184%" height="15" x="98.203%" y="1461" fill="#D2D90D" fg:w="8" fg:x="4262"/></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (8 samples, 0.18%)</title><rect width=".184%" height="15" x="98.203%" y="1445" fill="#ED3D36" fg:w="8" fg:x="4262"/></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (8 samples, 0.18%)</title><rect width=".184%" height="15" x="98.203%" y="1429" fill="#E2B818" fg:w="8" fg:x="4262"/></g><g><title>?? (8 samples, 0.18%)</title><rect width=".184%" height="15" x="98.203%" y="1413" fill="#DFE204" fg:w="8" fg:x="4262"/></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (8 samples, 0.18%)</title><rect width=".184%" height="15" x="98.203%" y="1397" fill="#D21A29" fg:w="8" fg:x="4262"/></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (8 samples, 0.18%)</title><rect width=".184%" height="15" x="98.203%" y="1381" fill="#DCDD06" fg:w="8" fg:x="4262"/></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;serde_json::value::Value&gt;&gt; (8 samples, 0.18%)</title><rect width=".184%" height="15" x="98.203%" y="1365" fill="#E15931" fg:w="8" fg:x="4262"/></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (8 samples, 0.18%)</title><rect width=".184%" height="15" x="98.203%" y="1349" fill="#DA462D" fg:w="8" fg:x="4262"/></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (8 samples, 0.18%)</title><rect width=".184%" height="15" x="98.203%" y="1333" fill="#EEA615" fg:w="8" fg:x="4262"/></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (8 samples, 0.18%)</title><rect width=".184%" height="15" x="98.203%" y="1317" fill="#E08D2C" fg:w="8" fg:x="4262"/></g><g><title>core::ptr::drop_in_place&lt;serde_json::map::Map&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (8 samples, 0.18%)</title><rect width=".184%" height="15" x="98.203%" y="1301" fill="#E60C31" fg:w="8" fg:x="4262"/></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::BTreeMap&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (8 samples, 0.18%)</title><rect width=".184%" height="15" x="98.203%" y="1285" fill="#D4AE0C" fg:w="8" fg:x="4262"/></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (8 samples, 0.18%)</title><rect width=".184%" height="15" x="98.203%" y="1269" fill="#F64309" fg:w="8" fg:x="4262"/></g><g><title>core::mem::drop (8 samples, 0.18%)</title><rect width=".184%" height="15" x="98.203%" y="1253" fill="#EF2317" fg:w="8" fg:x="4262"/></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (8 samples, 0.18%)</title><rect width=".184%" height="15" x="98.203%" y="1237" fill="#D3A700" fg:w="8" fg:x="4262"/></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (8 samples, 0.18%)</title><rect width=".184%" height="15" x="98.203%" y="1221" fill="#E1772D" fg:w="8" fg:x="4262"/></g><g><title>?? (8 samples, 0.18%)</title><rect width=".184%" height="15" x="98.203%" y="1205" fill="#D2A206" fg:w="8" fg:x="4262"/></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (7 samples, 0.16%)</title><rect width=".161%" height="15" x="98.226%" y="1189" fill="#D07623" fg:w="7" fg:x="4263"/></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (7 samples, 0.16%)</title><rect width=".161%" height="15" x="98.226%" y="1173" fill="#EF0435" fg:w="7" fg:x="4263"/></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;serde_json::value::Value&gt;&gt; (7 samples, 0.16%)</title><rect width=".161%" height="15" x="98.226%" y="1157" fill="#D58215" fg:w="7" fg:x="4263"/></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.16%)</title><rect width=".161%" height="15" x="98.226%" y="1141" fill="#EB9400" fg:w="7" fg:x="4263"/></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (7 samples, 0.16%)</title><rect width=".161%" height="15" x="98.226%" y="1125" fill="#F4E012" fg:w="7" fg:x="4263"/></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (7 samples, 0.16%)</title><rect width=".161%" height="15" x="98.226%" y="1109" fill="#D3D604" fg:w="7" fg:x="4263"/></g><g><title>core::ptr::drop_in_place&lt;serde_json::map::Map&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (7 samples, 0.16%)</title><rect width=".161%" height="15" x="98.226%" y="1093" fill="#CE7719" fg:w="7" fg:x="4263"/></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::BTreeMap&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (7 samples, 0.16%)</title><rect width=".161%" height="15" x="98.226%" y="1077" fill="#F35D2F" fg:w="7" fg:x="4263"/></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.16%)</title><rect width=".161%" height="15" x="98.226%" y="1061" fill="#E0C206" fg:w="7" fg:x="4263"/></g><g><title>core::mem::drop (7 samples, 0.16%)</title><rect width=".161%" height="15" x="98.226%" y="1045" fill="#F3E506" fg:w="7" fg:x="4263"/></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (7 samples, 0.16%)</title><rect width=".161%" height="15" x="98.226%" y="1029" fill="#CF1732" fg:w="7" fg:x="4263"/></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.16%)</title><rect width=".161%" height="15" x="98.226%" y="1013" fill="#FDC020" fg:w="7" fg:x="4263"/></g><g><title>?? (7 samples, 0.16%)</title><rect width=".161%" height="15" x="98.226%" y="997" fill="#D51506" fg:w="7" fg:x="4263"/></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (7 samples, 0.16%)</title><rect width=".161%" height="15" x="98.226%" y="981" fill="#F3970D" fg:w="7" fg:x="4263"/></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (7 samples, 0.16%)</title><rect width=".161%" height="15" x="98.226%" y="965" fill="#E9A529" fg:w="7" fg:x="4263"/></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;serde_json::value::Value&gt;&gt; (7 samples, 0.16%)</title><rect width=".161%" height="15" x="98.226%" y="949" fill="#F6B02D" fg:w="7" fg:x="4263"/></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.16%)</title><rect width=".161%" height="15" x="98.226%" y="933" fill="#D9AA34" fg:w="7" fg:x="4263"/></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (7 samples, 0.16%)</title><rect width=".161%" height="15" x="98.226%" y="917" fill="#D6CB36" fg:w="7" fg:x="4263"/></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (7 samples, 0.16%)</title><rect width=".161%" height="15" x="98.226%" y="901" fill="#F8D731" fg:w="7" fg:x="4263"/></g><g><title>core::ptr::drop_in_place&lt;serde_json::map::Map&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (7 samples, 0.16%)</title><rect width=".161%" height="15" x="98.226%" y="885" fill="#D02E0A" fg:w="7" fg:x="4263"/></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::BTreeMap&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (7 samples, 0.16%)</title><rect width=".161%" height="15" x="98.226%" y="869" fill="#FE051F" fg:w="7" fg:x="4263"/></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.16%)</title><rect width=".161%" height="15" x="98.226%" y="853" fill="#DE6821" fg:w="7" fg:x="4263"/></g><g><title>core::mem::drop (7 samples, 0.16%)</title><rect width=".161%" height="15" x="98.226%" y="837" fill="#F83110" fg:w="7" fg:x="4263"/></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (7 samples, 0.16%)</title><rect width=".161%" height="15" x="98.226%" y="821" fill="#E8C629" fg:w="7" fg:x="4263"/></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.16%)</title><rect width=".161%" height="15" x="98.226%" y="805" fill="#D67D03" fg:w="7" fg:x="4263"/></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (4 samples, 0.09%)</title><rect width=".092%" height="15" x="98.295%" y="789" fill="#E5DC1C" fg:w="4" fg:x="4266"/></g><g><title>?? (4 samples, 0.09%)</title><rect width=".092%" height="15" x="98.295%" y="773" fill="#DE4025" fg:w="4" fg:x="4266"/></g><g><title>?? (4 samples, 0.09%)</title><rect width=".092%" height="15" x="98.295%" y="757" fill="#F9B80D" fg:w="4" fg:x="4266"/></g><g><title>alloc::collections::btree::mem::replace (3 samples, 0.07%)</title><rect width=".069%" height="15" x="98.318%" y="741" fill="#FCB006" fg:w="3" fg:x="4267"/></g><g><title>alloc::collections::btree::navigate::_&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_next_unchecked::_{{closure}} (3 samples, 0.07%)</title><rect width=".069%" height="15" x="98.318%" y="725" fill="#E49907" fg:w="3" fg:x="4267"/></g><g><title>?? (3 samples, 0.07%)</title><rect width=".069%" height="15" x="98.318%" y="709" fill="#F2C105" fg:w="3" fg:x="4267"/></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (3 samples, 0.07%)</title><rect width=".069%" height="15" x="98.318%" y="693" fill="#E88C09" fg:w="3" fg:x="4267"/></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.02%)</title><rect width=".023%" height="15" x="98.387%" y="1349" fill="#D5DE10" fg:w="1" fg:x="4270"/></g><g><title>serde::de::MapAccess::next_entry (1 samples, 0.02%)</title><rect width=".023%" height="15" x="98.387%" y="1333" fill="#DE4B32" fg:w="1" fg:x="4270"/></g><g><title>serde::de::MapAccess::next_entry_seed (1 samples, 0.02%)</title><rect width=".023%" height="15" x="98.387%" y="1317" fill="#CDB402" fg:w="1" fg:x="4270"/></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.02%)</title><rect width=".023%" height="15" x="98.387%" y="1301" fill="#D82207" fg:w="1" fg:x="4270"/></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.02%)</title><rect width=".023%" height="15" x="98.387%" y="1285" fill="#FD1020" fg:w="1" fg:x="4270"/></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.02%)</title><rect width=".023%" height="15" x="98.387%" y="1269" fill="#D0611C" fg:w="1" fg:x="4270"/></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.02%)</title><rect width=".023%" height="15" x="98.387%" y="1253" fill="#E15C0B" fg:w="1" fg:x="4270"/></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.02%)</title><rect width=".023%" height="15" x="98.387%" y="1237" fill="#F3260C" fg:w="1" fg:x="4270"/></g><g><title>serde::de::MapAccess::next_entry (1 samples, 0.02%)</title><rect width=".023%" height="15" x="98.387%" y="1221" fill="#D08B10" fg:w="1" fg:x="4270"/></g><g><title>serde::de::MapAccess::next_entry_seed (1 samples, 0.02%)</title><rect width=".023%" height="15" x="98.387%" y="1205" fill="#E31809" fg:w="1" fg:x="4270"/></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.02%)</title><rect width=".023%" height="15" x="98.41%" y="1205" fill="#CE3E0B" fg:w="1" fg:x="4271"/></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.02%)</title><rect width=".023%" height="15" x="98.41%" y="1189" fill="#E4861B" fg:w="1" fg:x="4271"/></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for alloc::string::String&gt;::deserialize (1 samples, 0.02%)</title><rect width=".023%" height="15" x="98.41%" y="1173" fill="#CD3721" fg:w="1" fg:x="4271"/></g><g><title>&lt;serde_json::de::MapKey&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_string (1 samples, 0.02%)</title><rect width=".023%" height="15" x="98.41%" y="1157" fill="#F34B2B" fg:w="1" fg:x="4271"/></g><g><title>&lt;serde_json::de::MapKey&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.02%)</title><rect width=".023%" height="15" x="98.41%" y="1141" fill="#DF1B2A" fg:w="1" fg:x="4271"/></g><g><title>_rjem_malloc (1 samples, 0.02%)</title><rect width=".023%" height="15" x="98.41%" y="1125" fill="#E8BD21" fg:w="1" fg:x="4271"/></g><g><title>imalloc_fastpath (1 samples, 0.02%)</title><rect width=".023%" height="15" x="98.41%" y="1109" fill="#D20927" fg:w="1" fg:x="4271"/></g><g><title>cache_bin_alloc_easy (1 samples, 0.02%)</title><rect width=".023%" height="15" x="98.41%" y="1093" fill="#F2551A" fg:w="1" fg:x="4271"/></g><g><title>cache_bin_alloc_impl (1 samples, 0.02%)</title><rect width=".023%" height="15" x="98.41%" y="1077" fill="#F82C04" fg:w="1" fg:x="4271"/></g><g><title>serde::de::MapAccess::next_entry (1 samples, 0.02%)</title><rect width=".023%" height="15" x="98.456%" y="1029" fill="#FA602E" fg:w="1" fg:x="4273"/></g><g><title>serde::de::MapAccess::next_entry_seed (1 samples, 0.02%)</title><rect width=".023%" height="15" x="98.456%" y="1013" fill="#E5741A" fg:w="1" fg:x="4273"/></g><g><title>?? (1 samples, 0.02%)</title><rect width=".023%" height="15" x="98.479%" y="965" fill="#F65E22" fg:w="1" fg:x="4274"/></g><g><title>core::ptr::write (1 samples, 0.02%)</title><rect width=".023%" height="15" x="98.479%" y="949" fill="#FB4915" fg:w="1" fg:x="4274"/></g><g><title>&lt;serde_json::value::de::KeyClassifier as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.02%)</title><rect width=".023%" height="15" x="98.525%" y="853" fill="#FE7919" fg:w="1" fg:x="4276"/></g><g><title>&lt;serde_json::de::MapKey&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_str (1 samples, 0.02%)</title><rect width=".023%" height="15" x="98.525%" y="837" fill="#D7A131" fg:w="1" fg:x="4276"/></g><g><title>&lt;serde_json::de::MapKey&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.02%)</title><rect width=".023%" height="15" x="98.525%" y="821" fill="#DD2B0D" fg:w="1" fg:x="4276"/></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.02%)</title><rect width=".023%" height="15" x="98.525%" y="805" fill="#F90525" fg:w="1" fg:x="4276"/></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.02%)</title><rect width=".023%" height="15" x="98.525%" y="789" fill="#E2192C" fg:w="1" fg:x="4276"/></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (2 samples, 0.05%)</title><rect width=".046%" height="15" x="98.525%" y="869" fill="#EEBD10" fg:w="2" fg:x="4276"/></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.02%)</title><rect width=".023%" height="15" x="98.548%" y="853" fill="#FBBA08" fg:w="1" fg:x="4277"/></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.02%)</title><rect width=".023%" height="15" x="98.571%" y="821" fill="#FE221F" fg:w="1" fg:x="4278"/></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for alloc::string::String&gt;::deserialize (1 samples, 0.02%)</title><rect width=".023%" height="15" x="98.571%" y="805" fill="#E1D71B" fg:w="1" fg:x="4278"/></g><g><title>&lt;serde_json::de::MapKey&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_string (1 samples, 0.02%)</title><rect width=".023%" height="15" x="98.571%" y="789" fill="#DDC030" fg:w="1" fg:x="4278"/></g><g><title>&lt;serde_json::de::MapKey&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.02%)</title><rect width=".023%" height="15" x="98.571%" y="773" fill="#DB8914" fg:w="1" fg:x="4278"/></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.02%)</title><rect width=".023%" height="15" x="98.571%" y="757" fill="#DB540B" fg:w="1" fg:x="4278"/></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.02%)</title><rect width=".023%" height="15" x="98.571%" y="741" fill="#E00A17" fg:w="1" fg:x="4278"/></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.02%)</title><rect width=".023%" height="15" x="98.594%" y="821" fill="#F81627" fg:w="1" fg:x="4279"/></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::discard (1 samples, 0.02%)</title><rect width=".023%" height="15" x="98.618%" y="789" fill="#D49A14" fg:w="1" fg:x="4280"/></g><g><title>&lt;serde_json::read::SliceRead as serde_json::read::Read&gt;::discard (1 samples, 0.02%)</title><rect width=".023%" height="15" x="98.618%" y="773" fill="#ECC732" fg:w="1" fg:x="4280"/></g><g><title>serde::de::MapAccess::next_entry (4 samples, 0.09%)</title><rect width=".092%" height="15" x="98.571%" y="869" fill="#D30911" fg:w="4" fg:x="4278"/></g><g><title>serde::de::MapAccess::next_entry_seed (4 samples, 0.09%)</title><rect width=".092%" height="15" x="98.571%" y="853" fill="#F3D824" fg:w="4" fg:x="4278"/></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (4 samples, 0.09%)</title><rect width=".092%" height="15" x="98.571%" y="837" fill="#FA020A" fg:w="4" fg:x="4278"/></g><g><title>?? (2 samples, 0.05%)</title><rect width=".046%" height="15" x="98.618%" y="821" fill="#E23230" fg:w="2" fg:x="4280"/></g><g><title>?? (2 samples, 0.05%)</title><rect width=".046%" height="15" x="98.618%" y="805" fill="#F35110" fg:w="2" fg:x="4280"/></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::peek (1 samples, 0.02%)</title><rect width=".023%" height="15" x="98.641%" y="789" fill="#FA0E02" fg:w="1" fg:x="4281"/></g><g><title>&lt;serde_json::read::SliceRead as serde_json::read::Read&gt;::peek (1 samples, 0.02%)</title><rect width=".023%" height="15" x="98.641%" y="773" fill="#E9871D" fg:w="1" fg:x="4281"/></g><g><title>serde::de::MapAccess::next_value (1 samples, 0.02%)</title><rect width=".023%" height="15" x="98.664%" y="869" fill="#E0402B" fg:w="1" fg:x="4282"/></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.02%)</title><rect width=".023%" height="15" x="98.664%" y="853" fill="#EE540D" fg:w="1" fg:x="4282"/></g><g><title>serde::de::MapAccess::next_entry (13 samples, 0.30%)</title><rect width=".299%" height="15" x="98.41%" y="1237" fill="#FD301A" fg:w="13" fg:x="4271"/></g><g><title>serde::de::MapAccess::next_entry_seed (13 samples, 0.30%)</title><rect width=".299%" height="15" x="98.41%" y="1221" fill="#CDDF1F" fg:w="13" fg:x="4271"/></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_value_seed (12 samples, 0.28%)</title><rect width=".277%" height="15" x="98.433%" y="1205" fill="#DD2920" fg:w="12" fg:x="4272"/></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (12 samples, 0.28%)</title><rect width=".277%" height="15" x="98.433%" y="1189" fill="#D59E1F" fg:w="12" fg:x="4272"/></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (12 samples, 0.28%)</title><rect width=".277%" height="15" x="98.433%" y="1173" fill="#F57E2B" fg:w="12" fg:x="4272"/></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (12 samples, 0.28%)</title><rect width=".277%" height="15" x="98.433%" y="1157" fill="#E30716" fg:w="12" fg:x="4272"/></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_seq (12 samples, 0.28%)</title><rect width=".277%" height="15" x="98.433%" y="1141" fill="#FC5A2C" fg:w="12" fg:x="4272"/></g><g><title>serde::de::SeqAccess::next_element (12 samples, 0.28%)</title><rect width=".277%" height="15" x="98.433%" y="1125" fill="#FD5B00" fg:w="12" fg:x="4272"/></g><g><title>&lt;serde_json::de::SeqAccess&lt;R&gt; as serde::de::SeqAccess&gt;::next_element_seed (12 samples, 0.28%)</title><rect width=".277%" height="15" x="98.433%" y="1109" fill="#FCAF31" fg:w="12" fg:x="4272"/></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (11 samples, 0.25%)</title><rect width=".254%" height="15" x="98.456%" y="1093" fill="#F69601" fg:w="11" fg:x="4273"/></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (11 samples, 0.25%)</title><rect width=".254%" height="15" x="98.456%" y="1077" fill="#F1C019" fg:w="11" fg:x="4273"/></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (11 samples, 0.25%)</title><rect width=".254%" height="15" x="98.456%" y="1061" fill="#EFBB0B" fg:w="11" fg:x="4273"/></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (11 samples, 0.25%)</title><rect width=".254%" height="15" x="98.456%" y="1045" fill="#DACA33" fg:w="11" fg:x="4273"/></g><g><title>serde::de::MapAccess::next_value (10 samples, 0.23%)</title><rect width=".23%" height="15" x="98.479%" y="1029" fill="#E1B008" fg:w="10" fg:x="4274"/></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (10 samples, 0.23%)</title><rect width=".23%" height="15" x="98.479%" y="1013" fill="#DB7A29" fg:w="10" fg:x="4274"/></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (10 samples, 0.23%)</title><rect width=".23%" height="15" x="98.479%" y="997" fill="#F88C14" fg:w="10" fg:x="4274"/></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_seq (10 samples, 0.23%)</title><rect width=".23%" height="15" x="98.479%" y="981" fill="#F52925" fg:w="10" fg:x="4274"/></g><g><title>serde::de::SeqAccess::next_element (9 samples, 0.21%)</title><rect width=".207%" height="15" x="98.502%" y="965" fill="#EB5227" fg:w="9" fg:x="4275"/></g><g><title>&lt;serde_json::de::SeqAccess&lt;R&gt; as serde::de::SeqAccess&gt;::next_element_seed (9 samples, 0.21%)</title><rect width=".207%" height="15" x="98.502%" y="949" fill="#E66C2A" fg:w="9" fg:x="4275"/></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (9 samples, 0.21%)</title><rect width=".207%" height="15" x="98.502%" y="933" fill="#D79632" fg:w="9" fg:x="4275"/></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (9 samples, 0.21%)</title><rect width=".207%" height="15" x="98.502%" y="917" fill="#E9D405" fg:w="9" fg:x="4275"/></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (8 samples, 0.18%)</title><rect width=".184%" height="15" x="98.525%" y="901" fill="#F55016" fg:w="8" fg:x="4276"/></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (8 samples, 0.18%)</title><rect width=".184%" height="15" x="98.525%" y="885" fill="#EE8110" fg:w="8" fg:x="4276"/></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.02%)</title><rect width=".023%" height="15" x="98.687%" y="869" fill="#F01300" fg:w="1" fg:x="4283"/></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.02%)</title><rect width=".023%" height="15" x="98.687%" y="853" fill="#E82A23" fg:w="1" fg:x="4283"/></g><g><title>?? (1 samples, 0.02%)</title><rect width=".023%" height="15" x="98.687%" y="837" fill="#DF8218" fg:w="1" fg:x="4283"/></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.02%)</title><rect width=".023%" height="15" x="98.687%" y="821" fill="#ED1016" fg:w="1" fg:x="4283"/></g><g><title>&lt;alloc::string::String as core::cmp::Ord&gt;::cmp (2 samples, 0.05%)</title><rect width=".046%" height="15" x="98.71%" y="1141" fill="#F8C014" fg:w="2" fg:x="4284"/></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::cmp::Ord&gt;::cmp (2 samples, 0.05%)</title><rect width=".046%" height="15" x="98.71%" y="1125" fill="#E9A702" fg:w="2" fg:x="4284"/></g><g><title>core::slice::cmp::&lt;impl core::cmp::Ord for [T]&gt;::cmp (2 samples, 0.05%)</title><rect width=".046%" height="15" x="98.71%" y="1109" fill="#FC472C" fg:w="2" fg:x="4284"/></g><g><title>&lt;u8 as core::slice::cmp::SliceOrd&gt;::compare (2 samples, 0.05%)</title><rect width=".046%" height="15" x="98.71%" y="1093" fill="#EE252F" fg:w="2" fg:x="4284"/></g><g><title>__memcmp_avx2_movbe (2 samples, 0.05%)</title><rect width=".046%" height="15" x="98.71%" y="1077" fill="#D6CA36" fg:w="2" fg:x="4284"/></g><g><title>deserialize_struct::diff_json (29 samples, 0.67%)</title><rect width=".668%" height="15" x="98.111%" y="1541" fill="#FEA528" fg:w="29" fg:x="4258"/></g><g><title>serde_json::de::from_str (17 samples, 0.39%)</title><rect width=".392%" height="15" x="98.387%" y="1525" fill="#F6AD26" fg:w="17" fg:x="4270"/></g><g><title>serde_json::de::from_trait (17 samples, 0.39%)</title><rect width=".392%" height="15" x="98.387%" y="1509" fill="#D7031B" fg:w="17" fg:x="4270"/></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (17 samples, 0.39%)</title><rect width=".392%" height="15" x="98.387%" y="1493" fill="#EFA933" fg:w="17" fg:x="4270"/></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (17 samples, 0.39%)</title><rect width=".392%" height="15" x="98.387%" y="1477" fill="#D40519" fg:w="17" fg:x="4270"/></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (17 samples, 0.39%)</title><rect width=".392%" height="15" x="98.387%" y="1461" fill="#F32D11" fg:w="17" fg:x="4270"/></g><g><title>serde::de::MapAccess::next_entry (17 samples, 0.39%)</title><rect width=".392%" height="15" x="98.387%" y="1445" fill="#F26109" fg:w="17" fg:x="4270"/></g><g><title>serde::de::MapAccess::next_entry_seed (17 samples, 0.39%)</title><rect width=".392%" height="15" x="98.387%" y="1429" fill="#E4471F" fg:w="17" fg:x="4270"/></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_value_seed (17 samples, 0.39%)</title><rect width=".392%" height="15" x="98.387%" y="1413" fill="#FCB810" fg:w="17" fg:x="4270"/></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (17 samples, 0.39%)</title><rect width=".392%" height="15" x="98.387%" y="1397" fill="#ECA92E" fg:w="17" fg:x="4270"/></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (17 samples, 0.39%)</title><rect width=".392%" height="15" x="98.387%" y="1381" fill="#CF112F" fg:w="17" fg:x="4270"/></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (17 samples, 0.39%)</title><rect width=".392%" height="15" x="98.387%" y="1365" fill="#CEC91C" fg:w="17" fg:x="4270"/></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_seq (16 samples, 0.37%)</title><rect width=".369%" height="15" x="98.41%" y="1349" fill="#E0B817" fg:w="16" fg:x="4271"/></g><g><title>serde::de::SeqAccess::next_element (16 samples, 0.37%)</title><rect width=".369%" height="15" x="98.41%" y="1333" fill="#D08B30" fg:w="16" fg:x="4271"/></g><g><title>&lt;serde_json::de::SeqAccess&lt;R&gt; as serde::de::SeqAccess&gt;::next_element_seed (16 samples, 0.37%)</title><rect width=".369%" height="15" x="98.41%" y="1317" fill="#D0820A" fg:w="16" fg:x="4271"/></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (16 samples, 0.37%)</title><rect width=".369%" height="15" x="98.41%" y="1301" fill="#D3D52D" fg:w="16" fg:x="4271"/></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (16 samples, 0.37%)</title><rect width=".369%" height="15" x="98.41%" y="1285" fill="#EB641E" fg:w="16" fg:x="4271"/></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (16 samples, 0.37%)</title><rect width=".369%" height="15" x="98.41%" y="1269" fill="#CE901F" fg:w="16" fg:x="4271"/></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (16 samples, 0.37%)</title><rect width=".369%" height="15" x="98.41%" y="1253" fill="#E0C81A" fg:w="16" fg:x="4271"/></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (3 samples, 0.07%)</title><rect width=".069%" height="15" x="98.71%" y="1237" fill="#F76835" fg:w="3" fg:x="4284"/></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (3 samples, 0.07%)</title><rect width=".069%" height="15" x="98.71%" y="1221" fill="#DC0E11" fg:w="3" fg:x="4284"/></g><g><title>?? (3 samples, 0.07%)</title><rect width=".069%" height="15" x="98.71%" y="1205" fill="#E68C28" fg:w="3" fg:x="4284"/></g><g><title>?? (3 samples, 0.07%)</title><rect width=".069%" height="15" x="98.71%" y="1189" fill="#E50229" fg:w="3" fg:x="4284"/></g><g><title>?? (3 samples, 0.07%)</title><rect width=".069%" height="15" x="98.71%" y="1173" fill="#E85910" fg:w="3" fg:x="4284"/></g><g><title>?? (3 samples, 0.07%)</title><rect width=".069%" height="15" x="98.71%" y="1157" fill="#F73B34" fg:w="3" fg:x="4284"/></g><g><title>alloc::collections::btree::node::slice_insert (1 samples, 0.02%)</title><rect width=".023%" height="15" x="98.756%" y="1141" fill="#E26E15" fg:w="1" fg:x="4286"/></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.02%)</title><rect width=".023%" height="15" x="98.756%" y="1125" fill="#E0B02B" fg:w="1" fg:x="4286"/></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for alloc::collections::btree::map::BTreeMap&lt;K,V&gt;&gt;::deserialize (1 samples, 0.02%)</title><rect width=".023%" height="15" x="98.779%" y="1413" fill="#DD4906" fg:w="1" fg:x="4287"/></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_map (1 samples, 0.02%)</title><rect width=".023%" height="15" x="98.779%" y="1397" fill="#E84E13" fg:w="1" fg:x="4287"/></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::collections::btree::map::BTreeMap&lt;K,V&gt;&gt;::deserialize::MapVisitor&lt;K,V&gt; as serde::de::Visitor&gt;::visit_map (1 samples, 0.02%)</title><rect width=".023%" height="15" x="98.779%" y="1381" fill="#E97030" fg:w="1" fg:x="4287"/></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.02%)</title><rect width=".023%" height="15" x="98.779%" y="1365" fill="#F3832F" fg:w="1" fg:x="4287"/></g><g><title>?? (1 samples, 0.02%)</title><rect width=".023%" height="15" x="98.779%" y="1349" fill="#E23301" fg:w="1" fg:x="4287"/></g><g><title>?? (1 samples, 0.02%)</title><rect width=".023%" height="15" x="98.779%" y="1333" fill="#F73A07" fg:w="1" fg:x="4287"/></g><g><title>?? (1 samples, 0.02%)</title><rect width=".023%" height="15" x="98.779%" y="1317" fill="#D10720" fg:w="1" fg:x="4287"/></g><g><title>alloc::collections::btree::node::splitpoint (1 samples, 0.02%)</title><rect width=".023%" height="15" x="98.779%" y="1301" fill="#D12729" fg:w="1" fg:x="4287"/></g><g><title>json_benchmark::copy::citm_catalog::_::&lt;impl serde::de::Deserialize for json_benchmark::copy::citm_catalog::Price&gt;::deserialize (1 samples, 0.02%)</title><rect width=".023%" height="15" x="98.802%" y="1125" fill="#E2B62E" fg:w="1" fg:x="4288"/></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_struct (1 samples, 0.02%)</title><rect width=".023%" height="15" x="98.802%" y="1109" fill="#E6DB0A" fg:w="1" fg:x="4288"/></g><g><title>&lt;json_benchmark::copy::citm_catalog::_::&lt;impl serde::de::Deserialize for json_benchmark::copy::citm_catalog::Price&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.02%)</title><rect width=".023%" height="15" x="98.802%" y="1093" fill="#E3AF1E" fg:w="1" fg:x="4288"/></g><g><title>serde::de::MapAccess::next_key (1 samples, 0.02%)</title><rect width=".023%" height="15" x="98.802%" y="1077" fill="#D90232" fg:w="1" fg:x="4288"/></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.02%)</title><rect width=".023%" height="15" x="98.802%" y="1061" fill="#E5A000" fg:w="1" fg:x="4288"/></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.02%)</title><rect width=".023%" height="15" x="98.802%" y="1045" fill="#CF4E25" fg:w="1" fg:x="4288"/></g><g><title>&lt;json_benchmark::copy::citm_catalog::_::&lt;impl serde::de::Deserialize for json_benchmark::copy::citm_catalog::Price&gt;::deserialize::__Field as serde::de::Deserialize&gt;::deserialize (1 samples, 0.02%)</title><rect width=".023%" height="15" x="98.802%" y="1029" fill="#E13900" fg:w="1" fg:x="4288"/></g><g><title>&lt;serde_json::de::MapKey&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_identifier (1 samples, 0.02%)</title><rect width=".023%" height="15" x="98.802%" y="1013" fill="#E89A02" fg:w="1" fg:x="4288"/></g><g><title>&lt;serde_json::de::MapKey&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.02%)</title><rect width=".023%" height="15" x="98.802%" y="997" fill="#F1D419" fg:w="1" fg:x="4288"/></g><g><title>&lt;serde_json::read::SliceRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.02%)</title><rect width=".023%" height="15" x="98.802%" y="981" fill="#E24514" fg:w="1" fg:x="4288"/></g><g><title>?? (1 samples, 0.02%)</title><rect width=".023%" height="15" x="98.802%" y="965" fill="#F7B836" fg:w="1" fg:x="4288"/></g><g><title>core::ops::function::FnOnce::call_once (1 samples, 0.02%)</title><rect width=".023%" height="15" x="98.802%" y="949" fill="#D29100" fg:w="1" fg:x="4288"/></g><g><title>serde_json::read::as_str (1 samples, 0.02%)</title><rect width=".023%" height="15" x="98.802%" y="933" fill="#FD520C" fg:w="1" fg:x="4288"/></g><g><title>&lt;serde_json::read::SliceRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.02%)</title><rect width=".023%" height="15" x="98.802%" y="917" fill="#F52A0B" fg:w="1" fg:x="4288"/></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.02%)</title><rect width=".023%" height="15" x="98.825%" y="981" fill="#DB9320" fg:w="1" fg:x="4289"/></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.02%)</title><rect width=".023%" height="15" x="98.825%" y="965" fill="#F60C07" fg:w="1" fg:x="4289"/></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.02%)</title><rect width=".023%" height="15" x="98.825%" y="949" fill="#F33209" fg:w="1" fg:x="4289"/></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.02%)</title><rect width=".023%" height="15" x="98.825%" y="933" fill="#DB9506" fg:w="1" fg:x="4289"/></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.02%)</title><rect width=".023%" height="15" x="98.825%" y="917" fill="#F1332A" fg:w="1" fg:x="4289"/></g><g><title>?? (1 samples, 0.02%)</title><rect width=".023%" height="15" x="98.825%" y="901" fill="#E2801B" fg:w="1" fg:x="4289"/></g><g><title>alloc::alloc::realloc (1 samples, 0.02%)</title><rect width=".023%" height="15" x="98.825%" y="885" fill="#F49004" fg:w="1" fg:x="4289"/></g><g><title>__rust_realloc (1 samples, 0.02%)</title><rect width=".023%" height="15" x="98.825%" y="869" fill="#DD040D" fg:w="1" fg:x="4289"/></g><g><title>&lt;jemallocator::Jemalloc as core::alloc::global::GlobalAlloc&gt;::realloc (1 samples, 0.02%)</title><rect width=".023%" height="15" x="98.825%" y="853" fill="#D0AA1C" fg:w="1" fg:x="4289"/></g><g><title>do_rallocx (1 samples, 0.02%)</title><rect width=".023%" height="15" x="98.825%" y="837" fill="#E2830D" fg:w="1" fg:x="4289"/></g><g><title>iralloct (1 samples, 0.02%)</title><rect width=".023%" height="15" x="98.825%" y="821" fill="#D74829" fg:w="1" fg:x="4289"/></g><g><title>_rjem_je_arena_ralloc (1 samples, 0.02%)</title><rect width=".023%" height="15" x="98.825%" y="805" fill="#F36C14" fg:w="1" fg:x="4289"/></g><g><title>arena_ralloc_move_helper (1 samples, 0.02%)</title><rect width=".023%" height="15" x="98.825%" y="789" fill="#E6BD11" fg:w="1" fg:x="4289"/></g><g><title>arena_malloc (1 samples, 0.02%)</title><rect width=".023%" height="15" x="98.825%" y="773" fill="#DC3211" fg:w="1" fg:x="4289"/></g><g><title>tcache_alloc_small (1 samples, 0.02%)</title><rect width=".023%" height="15" x="98.825%" y="757" fill="#F89830" fg:w="1" fg:x="4289"/></g><g><title>_rjem_je_tcache_alloc_small_hard (1 samples, 0.02%)</title><rect width=".023%" height="15" x="98.825%" y="741" fill="#F45B0B" fg:w="1" fg:x="4289"/></g><g><title>_rjem_je_arena_cache_bin_fill_small (1 samples, 0.02%)</title><rect width=".023%" height="15" x="98.825%" y="725" fill="#DC9D05" fg:w="1" fg:x="4289"/></g><g><title>arena_slab_alloc (1 samples, 0.02%)</title><rect width=".023%" height="15" x="98.825%" y="709" fill="#FD8908" fg:w="1" fg:x="4289"/></g><g><title>_rjem_je_pa_alloc (1 samples, 0.02%)</title><rect width=".023%" height="15" x="98.825%" y="693" fill="#D98933" fg:w="1" fg:x="4289"/></g><g><title>pai_alloc (1 samples, 0.02%)</title><rect width=".023%" height="15" x="98.825%" y="677" fill="#DAD135" fg:w="1" fg:x="4289"/></g><g><title>pac_alloc_impl (1 samples, 0.02%)</title><rect width=".023%" height="15" x="98.825%" y="661" fill="#F98919" fg:w="1" fg:x="4289"/></g><g><title>pac_alloc_real (1 samples, 0.02%)</title><rect width=".023%" height="15" x="98.825%" y="645" fill="#EF9B1A" fg:w="1" fg:x="4289"/></g><g><title>_rjem_je_ecache_alloc (1 samples, 0.02%)</title><rect width=".023%" height="15" x="98.825%" y="629" fill="#E3552E" fg:w="1" fg:x="4289"/></g><g><title>extent_recycle (1 samples, 0.02%)</title><rect width=".023%" height="15" x="98.825%" y="613" fill="#FB6B2B" fg:w="1" fg:x="4289"/></g><g><title>extent_recycle_extract (1 samples, 0.02%)</title><rect width=".023%" height="15" x="98.825%" y="597" fill="#EAAA21" fg:w="1" fg:x="4289"/></g><g><title>extent_activate_locked (1 samples, 0.02%)</title><rect width=".023%" height="15" x="98.825%" y="581" fill="#CE1D23" fg:w="1" fg:x="4289"/></g><g><title>_rjem_je_eset_remove (1 samples, 0.02%)</title><rect width=".023%" height="15" x="98.825%" y="565" fill="#E38A19" fg:w="1" fg:x="4289"/></g><g><title>_rjem_je_edata_heap_remove (1 samples, 0.02%)</title><rect width=".023%" height="15" x="98.825%" y="549" fill="#F98323" fg:w="1" fg:x="4289"/></g><g><title>ph_remove (1 samples, 0.02%)</title><rect width=".023%" height="15" x="98.825%" y="533" fill="#EF0628" fg:w="1" fg:x="4289"/></g><g><title>ph_merge_children (1 samples, 0.02%)</title><rect width=".023%" height="15" x="98.825%" y="517" fill="#F6882F" fg:w="1" fg:x="4289"/></g><g><title>phn_merge_siblings (1 samples, 0.02%)</title><rect width=".023%" height="15" x="98.825%" y="501" fill="#FD3A1A" fg:w="1" fg:x="4289"/></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.02%)</title><rect width=".023%" height="15" x="98.871%" y="853" fill="#ED8D0A" fg:w="1" fg:x="4291"/></g><g><title>&lt;json_benchmark::copy::citm_catalog::_::&lt;impl serde::de::Deserialize for json_benchmark::copy::citm_catalog::Area&gt;::deserialize::__Field as serde::de::Deserialize&gt;::deserialize (1 samples, 0.02%)</title><rect width=".023%" height="15" x="98.871%" y="837" fill="#EA9C0C" fg:w="1" fg:x="4291"/></g><g><title>&lt;serde_json::de::MapKey&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_identifier (1 samples, 0.02%)</title><rect width=".023%" height="15" x="98.871%" y="821" fill="#F3E024" fg:w="1" fg:x="4291"/></g><g><title>&lt;serde_json::de::MapKey&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.02%)</title><rect width=".023%" height="15" x="98.871%" y="805" fill="#CDE533" fg:w="1" fg:x="4291"/></g><g><title>&lt;serde_json::read::SliceRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.02%)</title><rect width=".023%" height="15" x="98.871%" y="789" fill="#DFBD04" fg:w="1" fg:x="4291"/></g><g><title>?? (1 samples, 0.02%)</title><rect width=".023%" height="15" x="98.871%" y="773" fill="#F9A736" fg:w="1" fg:x="4291"/></g><g><title>core::ops::function::FnOnce::call_once (1 samples, 0.02%)</title><rect width=".023%" height="15" x="98.871%" y="757" fill="#DA221C" fg:w="1" fg:x="4291"/></g><g><title>serde_json::read::as_str (1 samples, 0.02%)</title><rect width=".023%" height="15" x="98.871%" y="741" fill="#E86D2A" fg:w="1" fg:x="4291"/></g><g><title>core::str::converts::from_utf8 (1 samples, 0.02%)</title><rect width=".023%" height="15" x="98.871%" y="725" fill="#F8D62E" fg:w="1" fg:x="4291"/></g><g><title>serde_json::de::from_slice (6 samples, 0.14%)</title><rect width=".138%" height="15" x="98.779%" y="1541" fill="#F4D828" fg:w="6" fg:x="4287"/></g><g><title>serde_json::de::from_trait (6 samples, 0.14%)</title><rect width=".138%" height="15" x="98.779%" y="1525" fill="#E7E21F" fg:w="6" fg:x="4287"/></g><g><title>json_benchmark::copy::citm_catalog::_::&lt;impl serde::de::Deserialize for json_benchmark::copy::citm_catalog::CitmCatalog&gt;::deserialize (6 samples, 0.14%)</title><rect width=".138%" height="15" x="98.779%" y="1509" fill="#EE262B" fg:w="6" fg:x="4287"/></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_struct (6 samples, 0.14%)</title><rect width=".138%" height="15" x="98.779%" y="1493" fill="#D0582B" fg:w="6" fg:x="4287"/></g><g><title>&lt;json_benchmark::copy::citm_catalog::_::&lt;impl serde::de::Deserialize for json_benchmark::copy::citm_catalog::CitmCatalog&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_map (6 samples, 0.14%)</title><rect width=".138%" height="15" x="98.779%" y="1477" fill="#CD8825" fg:w="6" fg:x="4287"/></g><g><title>serde::de::MapAccess::next_value (6 samples, 0.14%)</title><rect width=".138%" height="15" x="98.779%" y="1461" fill="#ED220E" fg:w="6" fg:x="4287"/></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_value_seed (6 samples, 0.14%)</title><rect width=".138%" height="15" x="98.779%" y="1445" fill="#ECC12C" fg:w="6" fg:x="4287"/></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (6 samples, 0.14%)</title><rect width=".138%" height="15" x="98.779%" y="1429" fill="#E7300A" fg:w="6" fg:x="4287"/></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize (5 samples, 0.12%)</title><rect width=".115%" height="15" x="98.802%" y="1413" fill="#D58D22" fg:w="5" fg:x="4288"/></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_seq (5 samples, 0.12%)</title><rect width=".115%" height="15" x="98.802%" y="1397" fill="#F98222" fg:w="5" fg:x="4288"/></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (5 samples, 0.12%)</title><rect width=".115%" height="15" x="98.802%" y="1381" fill="#DB2A29" fg:w="5" fg:x="4288"/></g><g><title>serde::de::SeqAccess::next_element (5 samples, 0.12%)</title><rect width=".115%" height="15" x="98.802%" y="1365" fill="#E06436" fg:w="5" fg:x="4288"/></g><g><title>&lt;serde_json::de::SeqAccess&lt;R&gt; as serde::de::SeqAccess&gt;::next_element_seed (5 samples, 0.12%)</title><rect width=".115%" height="15" x="98.802%" y="1349" fill="#E5C81B" fg:w="5" fg:x="4288"/></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (5 samples, 0.12%)</title><rect width=".115%" height="15" x="98.802%" y="1333" fill="#D9760A" fg:w="5" fg:x="4288"/></g><g><title>json_benchmark::copy::citm_catalog::_::&lt;impl serde::de::Deserialize for json_benchmark::copy::citm_catalog::Performance&gt;::deserialize (5 samples, 0.12%)</title><rect width=".115%" height="15" x="98.802%" y="1317" fill="#CE1603" fg:w="5" fg:x="4288"/></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_struct (5 samples, 0.12%)</title><rect width=".115%" height="15" x="98.802%" y="1301" fill="#E8A32E" fg:w="5" fg:x="4288"/></g><g><title>&lt;json_benchmark::copy::citm_catalog::_::&lt;impl serde::de::Deserialize for json_benchmark::copy::citm_catalog::Performance&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_map (5 samples, 0.12%)</title><rect width=".115%" height="15" x="98.802%" y="1285" fill="#CE5F0D" fg:w="5" fg:x="4288"/></g><g><title>serde::de::MapAccess::next_value (5 samples, 0.12%)</title><rect width=".115%" height="15" x="98.802%" y="1269" fill="#FD9A12" fg:w="5" fg:x="4288"/></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_value_seed (5 samples, 0.12%)</title><rect width=".115%" height="15" x="98.802%" y="1253" fill="#DB2017" fg:w="5" fg:x="4288"/></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (5 samples, 0.12%)</title><rect width=".115%" height="15" x="98.802%" y="1237" fill="#E6BF2D" fg:w="5" fg:x="4288"/></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize (5 samples, 0.12%)</title><rect width=".115%" height="15" x="98.802%" y="1221" fill="#E54024" fg:w="5" fg:x="4288"/></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_seq (5 samples, 0.12%)</title><rect width=".115%" height="15" x="98.802%" y="1205" fill="#CD8119" fg:w="5" fg:x="4288"/></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (5 samples, 0.12%)</title><rect width=".115%" height="15" x="98.802%" y="1189" fill="#FE7007" fg:w="5" fg:x="4288"/></g><g><title>serde::de::SeqAccess::next_element (5 samples, 0.12%)</title><rect width=".115%" height="15" x="98.802%" y="1173" fill="#E23530" fg:w="5" fg:x="4288"/></g><g><title>&lt;serde_json::de::SeqAccess&lt;R&gt; as serde::de::SeqAccess&gt;::next_element_seed (5 samples, 0.12%)</title><rect width=".115%" height="15" x="98.802%" y="1157" fill="#D69926" fg:w="5" fg:x="4288"/></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (5 samples, 0.12%)</title><rect width=".115%" height="15" x="98.802%" y="1141" fill="#F36507" fg:w="5" fg:x="4288"/></g><g><title>json_benchmark::copy::citm_catalog::_::&lt;impl serde::de::Deserialize for json_benchmark::copy::citm_catalog::SeatCategory&gt;::deserialize (4 samples, 0.09%)</title><rect width=".092%" height="15" x="98.825%" y="1125" fill="#F08C16" fg:w="4" fg:x="4289"/></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_struct (4 samples, 0.09%)</title><rect width=".092%" height="15" x="98.825%" y="1109" fill="#EB7202" fg:w="4" fg:x="4289"/></g><g><title>&lt;json_benchmark::copy::citm_catalog::_::&lt;impl serde::de::Deserialize for json_benchmark::copy::citm_catalog::SeatCategory&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.09%)</title><rect width=".092%" height="15" x="98.825%" y="1093" fill="#F23B0C" fg:w="4" fg:x="4289"/></g><g><title>serde::de::MapAccess::next_value (4 samples, 0.09%)</title><rect width=".092%" height="15" x="98.825%" y="1077" fill="#FC8609" fg:w="4" fg:x="4289"/></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_value_seed (4 samples, 0.09%)</title><rect width=".092%" height="15" x="98.825%" y="1061" fill="#EC042C" fg:w="4" fg:x="4289"/></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (4 samples, 0.09%)</title><rect width=".092%" height="15" x="98.825%" y="1045" fill="#FEAC29" fg:w="4" fg:x="4289"/></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize (4 samples, 0.09%)</title><rect width=".092%" height="15" x="98.825%" y="1029" fill="#F43F14" fg:w="4" fg:x="4289"/></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_seq (4 samples, 0.09%)</title><rect width=".092%" height="15" x="98.825%" y="1013" fill="#FA491F" fg:w="4" fg:x="4289"/></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (4 samples, 0.09%)</title><rect width=".092%" height="15" x="98.825%" y="997" fill="#F12624" fg:w="4" fg:x="4289"/></g><g><title>serde::de::SeqAccess::next_element (3 samples, 0.07%)</title><rect width=".069%" height="15" x="98.848%" y="981" fill="#F5D302" fg:w="3" fg:x="4290"/></g><g><title>&lt;serde_json::de::SeqAccess&lt;R&gt; as serde::de::SeqAccess&gt;::next_element_seed (3 samples, 0.07%)</title><rect width=".069%" height="15" x="98.848%" y="965" fill="#CE781C" fg:w="3" fg:x="4290"/></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (3 samples, 0.07%)</title><rect width=".069%" height="15" x="98.848%" y="949" fill="#D33B22" fg:w="3" fg:x="4290"/></g><g><title>json_benchmark::copy::citm_catalog::_::&lt;impl serde::de::Deserialize for json_benchmark::copy::citm_catalog::Area&gt;::deserialize (2 samples, 0.05%)</title><rect width=".046%" height="15" x="98.871%" y="933" fill="#E9A805" fg:w="2" fg:x="4291"/></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_struct (2 samples, 0.05%)</title><rect width=".046%" height="15" x="98.871%" y="917" fill="#EA210D" fg:w="2" fg:x="4291"/></g><g><title>&lt;json_benchmark::copy::citm_catalog::_::&lt;impl serde::de::Deserialize for json_benchmark::copy::citm_catalog::Area&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.05%)</title><rect width=".046%" height="15" x="98.871%" y="901" fill="#E7961A" fg:w="2" fg:x="4291"/></g><g><title>serde::de::MapAccess::next_key (2 samples, 0.05%)</title><rect width=".046%" height="15" x="98.871%" y="885" fill="#D9BF04" fg:w="2" fg:x="4291"/></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (2 samples, 0.05%)</title><rect width=".046%" height="15" x="98.871%" y="869" fill="#F6C626" fg:w="2" fg:x="4291"/></g><g><title>?? (1 samples, 0.02%)</title><rect width=".023%" height="15" x="98.894%" y="853" fill="#F54025" fg:w="1" fg:x="4292"/></g><g><title>?? (1 samples, 0.02%)</title><rect width=".023%" height="15" x="98.894%" y="837" fill="#FA1E24" fg:w="1" fg:x="4292"/></g><g><title>&lt;serde_json::read::SliceRead as serde_json::read::Read&gt;::peek (1 samples, 0.02%)</title><rect width=".023%" height="15" x="98.894%" y="821" fill="#D95635" fg:w="1" fg:x="4292"/></g><g><title>&lt;serde_json::ser::Compound&lt;W,F&gt; as serde::ser::SerializeMap&gt;::serialize_key (1 samples, 0.02%)</title><rect width=".023%" height="15" x="98.917%" y="1253" fill="#E49D10" fg:w="1" fg:x="4293"/></g><g><title>&lt;serde_json::ser::PrettyFormatter as serde_json::ser::Formatter&gt;::begin_object_key (1 samples, 0.02%)</title><rect width=".023%" height="15" x="98.917%" y="1237" fill="#D93B1F" fg:w="1" fg:x="4293"/></g><g><title>serde_json::ser::indent (1 samples, 0.02%)</title><rect width=".023%" height="15" x="98.917%" y="1221" fill="#ED8A29" fg:w="1" fg:x="4293"/></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all (1 samples, 0.02%)</title><rect width=".023%" height="15" x="98.917%" y="1205" fill="#E35B31" fg:w="1" fg:x="4293"/></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (1 samples, 0.02%)</title><rect width=".023%" height="15" x="98.917%" y="1189" fill="#F7152C" fg:w="1" fg:x="4293"/></g><g><title>?? (1 samples, 0.02%)</title><rect width=".023%" height="15" x="98.917%" y="1173" fill="#DBD233" fg:w="1" fg:x="4293"/></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.02%)</title><rect width=".023%" height="15" x="98.917%" y="1157" fill="#D18C06" fg:w="1" fg:x="4293"/></g><g><title>?? (1 samples, 0.02%)</title><rect width=".023%" height="15" x="98.917%" y="1141" fill="#DDBC18" fg:w="1" fg:x="4293"/></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.02%)</title><rect width=".023%" height="15" x="98.917%" y="1125" fill="#E89A14" fg:w="1" fg:x="4293"/></g><g><title>__memmove_avx_unaligned_erms (1 samples, 0.02%)</title><rect width=".023%" height="15" x="98.917%" y="1109" fill="#F48932" fg:w="1" fg:x="4293"/></g><g><title>&lt;serde_json::ser::Compound&lt;W,F&gt; as serde::ser::SerializeStruct&gt;::end (1 samples, 0.02%)</title><rect width=".023%" height="15" x="98.94%" y="901" fill="#E1B92B" fg:w="1" fg:x="4294"/></g><g><title>&lt;serde_json::ser::Compound&lt;W,F&gt; as serde::ser::SerializeMap&gt;::end (1 samples, 0.02%)</title><rect width=".023%" height="15" x="98.94%" y="885" fill="#D5CD26" fg:w="1" fg:x="4294"/></g><g><title>&lt;serde_json::ser::PrettyFormatter as serde_json::ser::Formatter&gt;::end_object (1 samples, 0.02%)</title><rect width=".023%" height="15" x="98.94%" y="869" fill="#EC490C" fg:w="1" fg:x="4294"/></g><g><title>serde_json::ser::indent (1 samples, 0.02%)</title><rect width=".023%" height="15" x="98.94%" y="853" fill="#EBDB0D" fg:w="1" fg:x="4294"/></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all (1 samples, 0.02%)</title><rect width=".023%" height="15" x="98.94%" y="837" fill="#DA3B24" fg:w="1" fg:x="4294"/></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (1 samples, 0.02%)</title><rect width=".023%" height="15" x="98.94%" y="821" fill="#CD6E27" fg:w="1" fg:x="4294"/></g><g><title>?? (1 samples, 0.02%)</title><rect width=".023%" height="15" x="98.94%" y="805" fill="#DACE2A" fg:w="1" fg:x="4294"/></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.02%)</title><rect width=".023%" height="15" x="98.94%" y="789" fill="#F87D18" fg:w="1" fg:x="4294"/></g><g><title>?? (1 samples, 0.02%)</title><rect width=".023%" height="15" x="98.94%" y="773" fill="#F21C1B" fg:w="1" fg:x="4294"/></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.02%)</title><rect width=".023%" height="15" x="98.94%" y="757" fill="#D8E40F" fg:w="1" fg:x="4294"/></g><g><title>__memmove_avx_unaligned_erms (1 samples, 0.02%)</title><rect width=".023%" height="15" x="98.94%" y="741" fill="#EB742E" fg:w="1" fg:x="4294"/></g><g><title>serde_json::ser::to_string_pretty (3 samples, 0.07%)</title><rect width=".069%" height="15" x="98.917%" y="1541" fill="#E01220" fg:w="3" fg:x="4293"/></g><g><title>serde_json::ser::to_vec_pretty (3 samples, 0.07%)</title><rect width=".069%" height="15" x="98.917%" y="1525" fill="#FC050C" fg:w="3" fg:x="4293"/></g><g><title>serde_json::ser::to_writer_pretty (3 samples, 0.07%)</title><rect width=".069%" height="15" x="98.917%" y="1509" fill="#FB2405" fg:w="3" fg:x="4293"/></g><g><title>json_benchmark::copy::citm_catalog::_::&lt;impl serde::ser::Serialize for json_benchmark::copy::citm_catalog::CitmCatalog&gt;::serialize (3 samples, 0.07%)</title><rect width=".069%" height="15" x="98.917%" y="1493" fill="#D9350E" fg:w="3" fg:x="4293"/></g><g><title>&lt;serde_json::ser::Compound&lt;W,F&gt; as serde::ser::SerializeStruct&gt;::serialize_field (3 samples, 0.07%)</title><rect width=".069%" height="15" x="98.917%" y="1477" fill="#D7562D" fg:w="3" fg:x="4293"/></g><g><title>serde::ser::SerializeMap::serialize_entry (3 samples, 0.07%)</title><rect width=".069%" height="15" x="98.917%" y="1461" fill="#F2A90B" fg:w="3" fg:x="4293"/></g><g><title>&lt;serde_json::ser::Compound&lt;W,F&gt; as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.07%)</title><rect width=".069%" height="15" x="98.917%" y="1445" fill="#D3D52D" fg:w="3" fg:x="4293"/></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for alloc::vec::Vec&lt;T&gt;&gt;::serialize (3 samples, 0.07%)</title><rect width=".069%" height="15" x="98.917%" y="1429" fill="#CD580B" fg:w="3" fg:x="4293"/></g><g><title>serde::ser::Serializer::collect_seq (3 samples, 0.07%)</title><rect width=".069%" height="15" x="98.917%" y="1413" fill="#FC451A" fg:w="3" fg:x="4293"/></g><g><title>core::iter::traits::iterator::Iterator::try_for_each (3 samples, 0.07%)</title><rect width=".069%" height="15" x="98.917%" y="1397" fill="#F67B25" fg:w="3" fg:x="4293"/></g><g><title>core::iter::traits::iterator::Iterator::try_fold (3 samples, 0.07%)</title><rect width=".069%" height="15" x="98.917%" y="1381" fill="#D4CD05" fg:w="3" fg:x="4293"/></g><g><title>core::iter::traits::iterator::Iterator::try_for_each::call::_{{closure}} (3 samples, 0.07%)</title><rect width=".069%" height="15" x="98.917%" y="1365" fill="#FD9400" fg:w="3" fg:x="4293"/></g><g><title>serde::ser::Serializer::collect_seq::_{{closure}} (3 samples, 0.07%)</title><rect width=".069%" height="15" x="98.917%" y="1349" fill="#EF1604" fg:w="3" fg:x="4293"/></g><g><title>&lt;serde_json::ser::Compound&lt;W,F&gt; as serde::ser::SerializeSeq&gt;::serialize_element (3 samples, 0.07%)</title><rect width=".069%" height="15" x="98.917%" y="1333" fill="#E21A35" fg:w="3" fg:x="4293"/></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.07%)</title><rect width=".069%" height="15" x="98.917%" y="1317" fill="#E1E52D" fg:w="3" fg:x="4293"/></g><g><title>json_benchmark::copy::citm_catalog::_::&lt;impl serde::ser::Serialize for json_benchmark::copy::citm_catalog::Performance&gt;::serialize (3 samples, 0.07%)</title><rect width=".069%" height="15" x="98.917%" y="1301" fill="#DC3C25" fg:w="3" fg:x="4293"/></g><g><title>&lt;serde_json::ser::Compound&lt;W,F&gt; as serde::ser::SerializeStruct&gt;::serialize_field (3 samples, 0.07%)</title><rect width=".069%" height="15" x="98.917%" y="1285" fill="#D9B423" fg:w="3" fg:x="4293"/></g><g><title>serde::ser::SerializeMap::serialize_entry (3 samples, 0.07%)</title><rect width=".069%" height="15" x="98.917%" y="1269" fill="#E50735" fg:w="3" fg:x="4293"/></g><g><title>&lt;serde_json::ser::Compound&lt;W,F&gt; as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.05%)</title><rect width=".046%" height="15" x="98.94%" y="1253" fill="#FE8903" fg:w="2" fg:x="4294"/></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for alloc::vec::Vec&lt;T&gt;&gt;::serialize (2 samples, 0.05%)</title><rect width=".046%" height="15" x="98.94%" y="1237" fill="#D78C29" fg:w="2" fg:x="4294"/></g><g><title>serde::ser::Serializer::collect_seq (2 samples, 0.05%)</title><rect width=".046%" height="15" x="98.94%" y="1221" fill="#FA500F" fg:w="2" fg:x="4294"/></g><g><title>core::iter::traits::iterator::Iterator::try_for_each (2 samples, 0.05%)</title><rect width=".046%" height="15" x="98.94%" y="1205" fill="#FCBF06" fg:w="2" fg:x="4294"/></g><g><title>core::iter::traits::iterator::Iterator::try_fold (2 samples, 0.05%)</title><rect width=".046%" height="15" x="98.94%" y="1189" fill="#F6D912" fg:w="2" fg:x="4294"/></g><g><title>core::iter::traits::iterator::Iterator::try_for_each::call::_{{closure}} (2 samples, 0.05%)</title><rect width=".046%" height="15" x="98.94%" y="1173" fill="#DF5D07" fg:w="2" fg:x="4294"/></g><g><title>serde::ser::Serializer::collect_seq::_{{closure}} (2 samples, 0.05%)</title><rect width=".046%" height="15" x="98.94%" y="1157" fill="#E13734" fg:w="2" fg:x="4294"/></g><g><title>&lt;serde_json::ser::Compound&lt;W,F&gt; as serde::ser::SerializeSeq&gt;::serialize_element (2 samples, 0.05%)</title><rect width=".046%" height="15" x="98.94%" y="1141" fill="#F01F18" fg:w="2" fg:x="4294"/></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.05%)</title><rect width=".046%" height="15" x="98.94%" y="1125" fill="#CD3834" fg:w="2" fg:x="4294"/></g><g><title>json_benchmark::copy::citm_catalog::_::&lt;impl serde::ser::Serialize for json_benchmark::copy::citm_catalog::SeatCategory&gt;::serialize (2 samples, 0.05%)</title><rect width=".046%" height="15" x="98.94%" y="1109" fill="#F6920C" fg:w="2" fg:x="4294"/></g><g><title>&lt;serde_json::ser::Compound&lt;W,F&gt; as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.05%)</title><rect width=".046%" height="15" x="98.94%" y="1093" fill="#EF5424" fg:w="2" fg:x="4294"/></g><g><title>serde::ser::SerializeMap::serialize_entry (2 samples, 0.05%)</title><rect width=".046%" height="15" x="98.94%" y="1077" fill="#CF2928" fg:w="2" fg:x="4294"/></g><g><title>&lt;serde_json::ser::Compound&lt;W,F&gt; as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.05%)</title><rect width=".046%" height="15" x="98.94%" y="1061" fill="#F1B319" fg:w="2" fg:x="4294"/></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for alloc::vec::Vec&lt;T&gt;&gt;::serialize (2 samples, 0.05%)</title><rect width=".046%" height="15" x="98.94%" y="1045" fill="#D20022" fg:w="2" fg:x="4294"/></g><g><title>serde::ser::Serializer::collect_seq (2 samples, 0.05%)</title><rect width=".046%" height="15" x="98.94%" y="1029" fill="#E1D91D" fg:w="2" fg:x="4294"/></g><g><title>core::iter::traits::iterator::Iterator::try_for_each (2 samples, 0.05%)</title><rect width=".046%" height="15" x="98.94%" y="1013" fill="#D8BF26" fg:w="2" fg:x="4294"/></g><g><title>core::iter::traits::iterator::Iterator::try_fold (2 samples, 0.05%)</title><rect width=".046%" height="15" x="98.94%" y="997" fill="#E88C34" fg:w="2" fg:x="4294"/></g><g><title>core::iter::traits::iterator::Iterator::try_for_each::call::_{{closure}} (2 samples, 0.05%)</title><rect width=".046%" height="15" x="98.94%" y="981" fill="#DF9E33" fg:w="2" fg:x="4294"/></g><g><title>serde::ser::Serializer::collect_seq::_{{closure}} (2 samples, 0.05%)</title><rect width=".046%" height="15" x="98.94%" y="965" fill="#EB1D33" fg:w="2" fg:x="4294"/></g><g><title>&lt;serde_json::ser::Compound&lt;W,F&gt; as serde::ser::SerializeSeq&gt;::serialize_element (2 samples, 0.05%)</title><rect width=".046%" height="15" x="98.94%" y="949" fill="#D7B512" fg:w="2" fg:x="4294"/></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.05%)</title><rect width=".046%" height="15" x="98.94%" y="933" fill="#E37D22" fg:w="2" fg:x="4294"/></g><g><title>json_benchmark::copy::citm_catalog::_::&lt;impl serde::ser::Serialize for json_benchmark::copy::citm_catalog::Area&gt;::serialize (2 samples, 0.05%)</title><rect width=".046%" height="15" x="98.94%" y="917" fill="#E6C531" fg:w="2" fg:x="4294"/></g><g><title>&lt;serde_json::ser::Compound&lt;W,F&gt; as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.02%)</title><rect width=".023%" height="15" x="98.963%" y="901" fill="#EF8D10" fg:w="1" fg:x="4295"/></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.02%)</title><rect width=".023%" height="15" x="98.963%" y="885" fill="#E1692B" fg:w="1" fg:x="4295"/></g><g><title>&lt;serde_json::ser::Compound&lt;W,F&gt; as serde::ser::SerializeMap&gt;::serialize_key (1 samples, 0.02%)</title><rect width=".023%" height="15" x="98.963%" y="869" fill="#D6830E" fg:w="1" fg:x="4295"/></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for str&gt;::serialize (1 samples, 0.02%)</title><rect width=".023%" height="15" x="98.963%" y="853" fill="#E5B10B" fg:w="1" fg:x="4295"/></g><g><title>&lt;serde_json::ser::MapKeySerializer&lt;W,F&gt; as serde::ser::Serializer&gt;::serialize_str (1 samples, 0.02%)</title><rect width=".023%" height="15" x="98.963%" y="837" fill="#E7B40E" fg:w="1" fg:x="4295"/></g><g><title>&lt;&amp;mut serde_json::ser::Serializer&lt;W,F&gt; as serde::ser::Serializer&gt;::serialize_str (1 samples, 0.02%)</title><rect width=".023%" height="15" x="98.963%" y="821" fill="#E85802" fg:w="1" fg:x="4295"/></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.02%)</title><rect width=".023%" height="15" x="98.963%" y="805" fill="#CDDC08" fg:w="1" fg:x="4295"/></g><g><title>serde_json::ser::Formatter::end_string (1 samples, 0.02%)</title><rect width=".023%" height="15" x="98.963%" y="789" fill="#E11735" fg:w="1" fg:x="4295"/></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all (1 samples, 0.02%)</title><rect width=".023%" height="15" x="98.963%" y="773" fill="#D53E1D" fg:w="1" fg:x="4295"/></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (1 samples, 0.02%)</title><rect width=".023%" height="15" x="98.963%" y="757" fill="#E34B07" fg:w="1" fg:x="4295"/></g><g><title>?? (1 samples, 0.02%)</title><rect width=".023%" height="15" x="98.963%" y="741" fill="#CF690E" fg:w="1" fg:x="4295"/></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.02%)</title><rect width=".023%" height="15" x="98.963%" y="725" fill="#F53E1D" fg:w="1" fg:x="4295"/></g><g><title>&lt;serde_json::ser::Compound&lt;W,F&gt; as serde::ser::SerializeMap&gt;::serialize_key (1 samples, 0.02%)</title><rect width=".023%" height="15" x="98.963%" y="709" fill="#ECCA04" fg:w="1" fg:x="4295"/></g><g><title>&lt;sonic_rs::serde::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_value (1 samples, 0.02%)</title><rect width=".023%" height="15" x="98.986%" y="1269" fill="#FA4301" fg:w="1" fg:x="4296"/></g><g><title>&lt;sonic_rs::serde::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.02%)</title><rect width=".023%" height="15" x="98.986%" y="1253" fill="#FD732C" fg:w="1" fg:x="4296"/></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.02%)</title><rect width=".023%" height="15" x="98.986%" y="1237" fill="#FB8B12" fg:w="1" fg:x="4296"/></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize (1 samples, 0.02%)</title><rect width=".023%" height="15" x="98.986%" y="1221" fill="#DA1620" fg:w="1" fg:x="4296"/></g><g><title>&lt;&amp;mut sonic_rs::serde::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_seq (1 samples, 0.02%)</title><rect width=".023%" height="15" x="98.986%" y="1205" fill="#F33505" fg:w="1" fg:x="4296"/></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.02%)</title><rect width=".023%" height="15" x="98.986%" y="1189" fill="#E33810" fg:w="1" fg:x="4296"/></g><g><title>serde::de::SeqAccess::next_element (1 samples, 0.02%)</title><rect width=".023%" height="15" x="98.986%" y="1173" fill="#F53500" fg:w="1" fg:x="4296"/></g><g><title>&lt;sonic_rs::serde::de::SeqAccess&lt;R&gt; as serde::de::SeqAccess&gt;::next_element_seed (1 samples, 0.02%)</title><rect width=".023%" height="15" x="98.986%" y="1157" fill="#D8AA23" fg:w="1" fg:x="4296"/></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.02%)</title><rect width=".023%" height="15" x="98.986%" y="1141" fill="#D3C808" fg:w="1" fg:x="4296"/></g><g><title>json_benchmark::copy::citm_catalog::_::&lt;impl serde::de::Deserialize for json_benchmark::copy::citm_catalog::SeatCategory&gt;::deserialize (1 samples, 0.02%)</title><rect width=".023%" height="15" x="98.986%" y="1125" fill="#E4CC2C" fg:w="1" fg:x="4296"/></g><g><title>&lt;&amp;mut sonic_rs::serde::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_struct (1 samples, 0.02%)</title><rect width=".023%" height="15" x="98.986%" y="1109" fill="#D67911" fg:w="1" fg:x="4296"/></g><g><title>&lt;json_benchmark::copy::citm_catalog::_::&lt;impl serde::de::Deserialize for json_benchmark::copy::citm_catalog::SeatCategory&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.02%)</title><rect width=".023%" height="15" x="98.986%" y="1093" fill="#E94026" fg:w="1" fg:x="4296"/></g><g><title>&lt;sonic_rs::serde::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_value (1 samples, 0.02%)</title><rect width=".023%" height="15" x="98.986%" y="1077" fill="#FD3613" fg:w="1" fg:x="4296"/></g><g><title>&lt;sonic_rs::serde::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.02%)</title><rect width=".023%" height="15" x="98.986%" y="1061" fill="#FD5E12" fg:w="1" fg:x="4296"/></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.02%)</title><rect width=".023%" height="15" x="98.986%" y="1045" fill="#E33934" fg:w="1" fg:x="4296"/></g><g><title>sonic_rs::serde::de::from_slice (2 samples, 0.05%)</title><rect width=".046%" height="15" x="98.986%" y="1541" fill="#E6E432" fg:w="2" fg:x="4296"/></g><g><title>sonic_rs::serde::de::from_trait (2 samples, 0.05%)</title><rect width=".046%" height="15" x="98.986%" y="1525" fill="#D9CD1B" fg:w="2" fg:x="4296"/></g><g><title>json_benchmark::copy::citm_catalog::_::&lt;impl serde::de::Deserialize for json_benchmark::copy::citm_catalog::CitmCatalog&gt;::deserialize (2 samples, 0.05%)</title><rect width=".046%" height="15" x="98.986%" y="1509" fill="#FC4732" fg:w="2" fg:x="4296"/></g><g><title>&lt;&amp;mut sonic_rs::serde::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_struct (2 samples, 0.05%)</title><rect width=".046%" height="15" x="98.986%" y="1493" fill="#D15604" fg:w="2" fg:x="4296"/></g><g><title>&lt;json_benchmark::copy::citm_catalog::_::&lt;impl serde::de::Deserialize for json_benchmark::copy::citm_catalog::CitmCatalog&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.05%)</title><rect width=".046%" height="15" x="98.986%" y="1477" fill="#E55E00" fg:w="2" fg:x="4296"/></g><g><title>&lt;sonic_rs::serde::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_value (2 samples, 0.05%)</title><rect width=".046%" height="15" x="98.986%" y="1461" fill="#FCDF15" fg:w="2" fg:x="4296"/></g><g><title>&lt;sonic_rs::serde::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_value_seed (2 samples, 0.05%)</title><rect width=".046%" height="15" x="98.986%" y="1445" fill="#E6D204" fg:w="2" fg:x="4296"/></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (2 samples, 0.05%)</title><rect width=".046%" height="15" x="98.986%" y="1429" fill="#F09526" fg:w="2" fg:x="4296"/></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize (2 samples, 0.05%)</title><rect width=".046%" height="15" x="98.986%" y="1413" fill="#FE6914" fg:w="2" fg:x="4296"/></g><g><title>&lt;&amp;mut sonic_rs::serde::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_seq (2 samples, 0.05%)</title><rect width=".046%" height="15" x="98.986%" y="1397" fill="#FD572E" fg:w="2" fg:x="4296"/></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (2 samples, 0.05%)</title><rect width=".046%" height="15" x="98.986%" y="1381" fill="#FD7421" fg:w="2" fg:x="4296"/></g><g><title>serde::de::SeqAccess::next_element (2 samples, 0.05%)</title><rect width=".046%" height="15" x="98.986%" y="1365" fill="#E5C605" fg:w="2" fg:x="4296"/></g><g><title>&lt;sonic_rs::serde::de::SeqAccess&lt;R&gt; as serde::de::SeqAccess&gt;::next_element_seed (2 samples, 0.05%)</title><rect width=".046%" height="15" x="98.986%" y="1349" fill="#F22625" fg:w="2" fg:x="4296"/></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (2 samples, 0.05%)</title><rect width=".046%" height="15" x="98.986%" y="1333" fill="#F24535" fg:w="2" fg:x="4296"/></g><g><title>json_benchmark::copy::citm_catalog::_::&lt;impl serde::de::Deserialize for json_benchmark::copy::citm_catalog::Performance&gt;::deserialize (2 samples, 0.05%)</title><rect width=".046%" height="15" x="98.986%" y="1317" fill="#F95010" fg:w="2" fg:x="4296"/></g><g><title>&lt;&amp;mut sonic_rs::serde::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_struct (2 samples, 0.05%)</title><rect width=".046%" height="15" x="98.986%" y="1301" fill="#CE800B" fg:w="2" fg:x="4296"/></g><g><title>&lt;json_benchmark::copy::citm_catalog::_::&lt;impl serde::de::Deserialize for json_benchmark::copy::citm_catalog::Performance&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.05%)</title><rect width=".046%" height="15" x="98.986%" y="1285" fill="#D42314" fg:w="2" fg:x="4296"/></g><g><title>serde::de::MapAccess::next_key (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.009%" y="1269" fill="#EC4F0D" fg:w="1" fg:x="4297"/></g><g><title>&lt;sonic_rs::serde::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.009%" y="1253" fill="#E97B03" fg:w="1" fg:x="4297"/></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.009%" y="1237" fill="#D65D34" fg:w="1" fg:x="4297"/></g><g><title>&lt;json_benchmark::copy::citm_catalog::_::&lt;impl serde::de::Deserialize for json_benchmark::copy::citm_catalog::Performance&gt;::deserialize::__Field as serde::de::Deserialize&gt;::deserialize (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.009%" y="1221" fill="#FB2528" fg:w="1" fg:x="4297"/></g><g><title>&lt;sonic_rs::serde::de::MapKey&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_identifier (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.009%" y="1205" fill="#E35036" fg:w="1" fg:x="4297"/></g><g><title>&lt;sonic_rs::serde::de::MapKey&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.009%" y="1189" fill="#FE300B" fg:w="1" fg:x="4297"/></g><g><title>&lt;json_benchmark::copy::citm_catalog::_::&lt;impl serde::de::Deserialize for json_benchmark::copy::citm_catalog::Performance&gt;::deserialize::__FieldVisitor as serde::de::Visitor&gt;::visit_str (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.009%" y="1173" fill="#EBC11A" fg:w="1" fg:x="4297"/></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for alloc::collections::btree::map::BTreeMap&lt;K,V&gt;&gt;::serialize (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.032%" y="1429" fill="#E56315" fg:w="1" fg:x="4298"/></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.032%" y="1413" fill="#D38C29" fg:w="1" fg:x="4298"/></g><g><title>core::iter::traits::iterator::Iterator::try_for_each (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.032%" y="1397" fill="#F0E31E" fg:w="1" fg:x="4298"/></g><g><title>core::iter::traits::iterator::Iterator::try_fold (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.032%" y="1381" fill="#D7E02D" fg:w="1" fg:x="4298"/></g><g><title>core::iter::traits::iterator::Iterator::try_for_each::call::_{{closure}} (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.032%" y="1365" fill="#CE7B1F" fg:w="1" fg:x="4298"/></g><g><title>serde::ser::Serializer::collect_map::_{{closure}} (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.032%" y="1349" fill="#D28A10" fg:w="1" fg:x="4298"/></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.032%" y="1333" fill="#E4391C" fg:w="1" fg:x="4298"/></g><g><title>&lt;sonic_rs::serde::ser::Compound&lt;W,F&gt; as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.032%" y="1317" fill="#F2AA0A" fg:w="1" fg:x="4298"/></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.032%" y="1301" fill="#E4D627" fg:w="1" fg:x="4298"/></g><g><title>json_benchmark::copy::citm_catalog::_::&lt;impl serde::ser::Serialize for json_benchmark::copy::citm_catalog::Event&gt;::serialize (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.032%" y="1285" fill="#DAB321" fg:w="1" fg:x="4298"/></g><g><title>&lt;sonic_rs::serde::ser::Compound&lt;W,F&gt; as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.032%" y="1269" fill="#EBC127" fg:w="1" fg:x="4298"/></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.032%" y="1253" fill="#DBDD24" fg:w="1" fg:x="4298"/></g><g><title>&lt;sonic_rs::serde::ser::Compound&lt;W,F&gt; as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.032%" y="1237" fill="#F8DA13" fg:w="1" fg:x="4298"/></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for alloc::string::String&gt;::serialize (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.032%" y="1221" fill="#CD3209" fg:w="1" fg:x="4298"/></g><g><title>&lt;&amp;mut sonic_rs::serde::ser::Serializer&lt;W,F&gt; as serde::ser::Serializer&gt;::serialize_str (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.032%" y="1205" fill="#EE511C" fg:w="1" fg:x="4298"/></g><g><title>sonic_rs::format::Formatter::write_string_fast (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.032%" y="1189" fill="#EB6E13" fg:w="1" fg:x="4298"/></g><g><title>&lt;&amp;mut alloc::vec::Vec&lt;u8&gt; as sonic_rs::writer::WriterExt&gt;::reserve_with (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.032%" y="1173" fill="#D6070E" fg:w="1" fg:x="4298"/></g><g><title>?? (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.032%" y="1157" fill="#D34D03" fg:w="1" fg:x="4298"/></g><g><title>&lt;sonic_rs::serde::ser::Compound&lt;W,F&gt; as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.032%" y="1141" fill="#E50509" fg:w="1" fg:x="4298"/></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.032%" y="1125" fill="#E15A0B" fg:w="1" fg:x="4298"/></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.032%" y="1109" fill="#F23808" fg:w="1" fg:x="4298"/></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.032%" y="1093" fill="#F9D427" fg:w="1" fg:x="4298"/></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.032%" y="1077" fill="#EC5A09" fg:w="1" fg:x="4298"/></g><g><title>?? (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.032%" y="1061" fill="#CE5823" fg:w="1" fg:x="4298"/></g><g><title>alloc::alloc::realloc (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.032%" y="1045" fill="#CD7E1E" fg:w="1" fg:x="4298"/></g><g><title>__rust_realloc (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.032%" y="1029" fill="#E6B00C" fg:w="1" fg:x="4298"/></g><g><title>&lt;jemallocator::Jemalloc as core::alloc::global::GlobalAlloc&gt;::realloc (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.032%" y="1013" fill="#F31309" fg:w="1" fg:x="4298"/></g><g><title>do_rallocx (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.032%" y="997" fill="#F5AB11" fg:w="1" fg:x="4298"/></g><g><title>iralloct (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.032%" y="981" fill="#E33415" fg:w="1" fg:x="4298"/></g><g><title>_rjem_je_arena_ralloc (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.032%" y="965" fill="#EE450E" fg:w="1" fg:x="4298"/></g><g><title>__memmove_avx_unaligned_erms (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.032%" y="949" fill="#F19C27" fg:w="1" fg:x="4298"/></g><g><title>&lt;sonic_rs::serde::ser::Compound&lt;W,F&gt; as serde::ser::SerializeMap&gt;::serialize_key (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.078%" y="1061" fill="#D4E31C" fg:w="1" fg:x="4300"/></g><g><title>&lt;sonic_rs::format::PrettyFormatter as sonic_rs::format::Formatter&gt;::begin_object_key (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.078%" y="1045" fill="#D1761B" fg:w="1" fg:x="4300"/></g><g><title>sonic_rs::format::indent (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.078%" y="1029" fill="#E26605" fg:w="1" fg:x="4300"/></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.078%" y="1013" fill="#DF2203" fg:w="1" fg:x="4300"/></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.078%" y="997" fill="#DD5126" fg:w="1" fg:x="4300"/></g><g><title>?? (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.078%" y="981" fill="#ECDB1C" fg:w="1" fg:x="4300"/></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.078%" y="965" fill="#D5C80E" fg:w="1" fg:x="4300"/></g><g><title>?? (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.078%" y="949" fill="#F02113" fg:w="1" fg:x="4300"/></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.078%" y="933" fill="#E9711B" fg:w="1" fg:x="4300"/></g><g><title>__memmove_avx_unaligned_erms (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.078%" y="917" fill="#DCDD12" fg:w="1" fg:x="4300"/></g><g><title>deserialize_struct::bench_citm_catalog_CitmCatalog (4,223 samples, 97.30%)</title><rect width="97.304%" height="15" x="1.82%" y="1557" fill="#EE5C08" fg:w="4223" fg:x="79"/><text x="2.07%" y="1567.5">deserialize_struct::bench_citm_catalog_CitmCatalog</text></g><g><title>sonic_rs::serde::ser::to_string_pretty (4 samples, 0.09%)</title><rect width=".092%" height="15" x="99.032%" y="1541" fill="#DEA410" fg:w="4" fg:x="4298"/></g><g><title>sonic_rs::serde::ser::to_vec_pretty (4 samples, 0.09%)</title><rect width=".092%" height="15" x="99.032%" y="1525" fill="#F17703" fg:w="4" fg:x="4298"/></g><g><title>sonic_rs::serde::ser::to_writer_pretty (4 samples, 0.09%)</title><rect width=".092%" height="15" x="99.032%" y="1509" fill="#F12C08" fg:w="4" fg:x="4298"/></g><g><title>json_benchmark::copy::citm_catalog::_::&lt;impl serde::ser::Serialize for json_benchmark::copy::citm_catalog::CitmCatalog&gt;::serialize (4 samples, 0.09%)</title><rect width=".092%" height="15" x="99.032%" y="1493" fill="#E62428" fg:w="4" fg:x="4298"/></g><g><title>&lt;sonic_rs::serde::ser::Compound&lt;W,F&gt; as serde::ser::SerializeStruct&gt;::serialize_field (4 samples, 0.09%)</title><rect width=".092%" height="15" x="99.032%" y="1477" fill="#F31024" fg:w="4" fg:x="4298"/></g><g><title>serde::ser::SerializeMap::serialize_entry (4 samples, 0.09%)</title><rect width=".092%" height="15" x="99.032%" y="1461" fill="#E7041A" fg:w="4" fg:x="4298"/></g><g><title>&lt;sonic_rs::serde::ser::Compound&lt;W,F&gt; as serde::ser::SerializeMap&gt;::serialize_value (4 samples, 0.09%)</title><rect width=".092%" height="15" x="99.032%" y="1445" fill="#F0091F" fg:w="4" fg:x="4298"/></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for alloc::vec::Vec&lt;T&gt;&gt;::serialize (3 samples, 0.07%)</title><rect width=".069%" height="15" x="99.055%" y="1429" fill="#CFAD0F" fg:w="3" fg:x="4299"/></g><g><title>serde::ser::Serializer::collect_seq (3 samples, 0.07%)</title><rect width=".069%" height="15" x="99.055%" y="1413" fill="#E0C035" fg:w="3" fg:x="4299"/></g><g><title>core::iter::traits::iterator::Iterator::try_for_each (3 samples, 0.07%)</title><rect width=".069%" height="15" x="99.055%" y="1397" fill="#DF431C" fg:w="3" fg:x="4299"/></g><g><title>core::iter::traits::iterator::Iterator::try_fold (3 samples, 0.07%)</title><rect width=".069%" height="15" x="99.055%" y="1381" fill="#D3142F" fg:w="3" fg:x="4299"/></g><g><title>core::iter::traits::iterator::Iterator::try_for_each::call::_{{closure}} (3 samples, 0.07%)</title><rect width=".069%" height="15" x="99.055%" y="1365" fill="#F0E402" fg:w="3" fg:x="4299"/></g><g><title>serde::ser::Serializer::collect_seq::_{{closure}} (3 samples, 0.07%)</title><rect width=".069%" height="15" x="99.055%" y="1349" fill="#F8970C" fg:w="3" fg:x="4299"/></g><g><title>&lt;sonic_rs::serde::ser::Compound&lt;W,F&gt; as serde::ser::SerializeSeq&gt;::serialize_element (3 samples, 0.07%)</title><rect width=".069%" height="15" x="99.055%" y="1333" fill="#F40827" fg:w="3" fg:x="4299"/></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.07%)</title><rect width=".069%" height="15" x="99.055%" y="1317" fill="#DE1A08" fg:w="3" fg:x="4299"/></g><g><title>json_benchmark::copy::citm_catalog::_::&lt;impl serde::ser::Serialize for json_benchmark::copy::citm_catalog::Performance&gt;::serialize (3 samples, 0.07%)</title><rect width=".069%" height="15" x="99.055%" y="1301" fill="#D56A2C" fg:w="3" fg:x="4299"/></g><g><title>&lt;sonic_rs::serde::ser::Compound&lt;W,F&gt; as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.05%)</title><rect width=".046%" height="15" x="99.078%" y="1285" fill="#D68114" fg:w="2" fg:x="4300"/></g><g><title>serde::ser::SerializeMap::serialize_entry (2 samples, 0.05%)</title><rect width=".046%" height="15" x="99.078%" y="1269" fill="#D4200D" fg:w="2" fg:x="4300"/></g><g><title>&lt;sonic_rs::serde::ser::Compound&lt;W,F&gt; as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.05%)</title><rect width=".046%" height="15" x="99.078%" y="1253" fill="#D0A821" fg:w="2" fg:x="4300"/></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for alloc::vec::Vec&lt;T&gt;&gt;::serialize (2 samples, 0.05%)</title><rect width=".046%" height="15" x="99.078%" y="1237" fill="#E7CF08" fg:w="2" fg:x="4300"/></g><g><title>serde::ser::Serializer::collect_seq (2 samples, 0.05%)</title><rect width=".046%" height="15" x="99.078%" y="1221" fill="#EBDB17" fg:w="2" fg:x="4300"/></g><g><title>core::iter::traits::iterator::Iterator::try_for_each (2 samples, 0.05%)</title><rect width=".046%" height="15" x="99.078%" y="1205" fill="#E2D81A" fg:w="2" fg:x="4300"/></g><g><title>core::iter::traits::iterator::Iterator::try_fold (2 samples, 0.05%)</title><rect width=".046%" height="15" x="99.078%" y="1189" fill="#EF8910" fg:w="2" fg:x="4300"/></g><g><title>core::iter::traits::iterator::Iterator::try_for_each::call::_{{closure}} (2 samples, 0.05%)</title><rect width=".046%" height="15" x="99.078%" y="1173" fill="#CF0C24" fg:w="2" fg:x="4300"/></g><g><title>serde::ser::Serializer::collect_seq::_{{closure}} (2 samples, 0.05%)</title><rect width=".046%" height="15" x="99.078%" y="1157" fill="#D2D618" fg:w="2" fg:x="4300"/></g><g><title>&lt;sonic_rs::serde::ser::Compound&lt;W,F&gt; as serde::ser::SerializeSeq&gt;::serialize_element (2 samples, 0.05%)</title><rect width=".046%" height="15" x="99.078%" y="1141" fill="#CE381E" fg:w="2" fg:x="4300"/></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.05%)</title><rect width=".046%" height="15" x="99.078%" y="1125" fill="#E48F1A" fg:w="2" fg:x="4300"/></g><g><title>json_benchmark::copy::citm_catalog::_::&lt;impl serde::ser::Serialize for json_benchmark::copy::citm_catalog::Price&gt;::serialize (2 samples, 0.05%)</title><rect width=".046%" height="15" x="99.078%" y="1109" fill="#D8DA2E" fg:w="2" fg:x="4300"/></g><g><title>&lt;sonic_rs::serde::ser::Compound&lt;W,F&gt; as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.05%)</title><rect width=".046%" height="15" x="99.078%" y="1093" fill="#CE0613" fg:w="2" fg:x="4300"/></g><g><title>serde::ser::SerializeMap::serialize_entry (2 samples, 0.05%)</title><rect width=".046%" height="15" x="99.078%" y="1077" fill="#EFB133" fg:w="2" fg:x="4300"/></g><g><title>&lt;sonic_rs::serde::ser::Compound&lt;W,F&gt; as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.101%" y="1061" fill="#D83719" fg:w="1" fg:x="4301"/></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for u32&gt;::serialize (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.101%" y="1045" fill="#E7A31D" fg:w="1" fg:x="4301"/></g><g><title>&lt;&amp;mut sonic_rs::serde::ser::Serializer&lt;W,F&gt; as serde::ser::Serializer&gt;::serialize_u32 (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.101%" y="1029" fill="#E89532" fg:w="1" fg:x="4301"/></g><g><title>sonic_rs::format::Formatter::write_u32 (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.101%" y="1013" fill="#DF8E30" fg:w="1" fg:x="4301"/></g><g><title>?? (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.101%" y="997" fill="#F55317" fg:w="1" fg:x="4301"/></g><g><title>itoa::&lt;impl itoa::private::Sealed for u32&gt;::write (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.101%" y="981" fill="#E03F02" fg:w="1" fg:x="4301"/></g><g><title>&lt;alloc::string::String as core::cmp::PartialEq&gt;::eq (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.124%" y="933" fill="#DA4135" fg:w="1" fg:x="4302"/></g><g><title>alloc::vec::partial_eq::&lt;impl core::cmp::PartialEq&lt;alloc::vec::Vec&lt;U,A2&gt;&gt; for alloc::vec::Vec&lt;T,A1&gt;&gt;::eq (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.124%" y="917" fill="#DD541D" fg:w="1" fg:x="4302"/></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.124%" y="901" fill="#EA0020" fg:w="1" fg:x="4302"/></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.124%" y="885" fill="#CE1410" fg:w="1" fg:x="4302"/></g><g><title>__memcmp_avx2_movbe (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.124%" y="869" fill="#F4AC12" fg:w="1" fg:x="4302"/></g><g><title>core::cmp::PartialEq::ne (2 samples, 0.05%)</title><rect width=".046%" height="15" x="99.124%" y="1525" fill="#FE8501" fg:w="2" fg:x="4302"/></g><g><title>&lt;serde_json::value::Value as core::cmp::PartialEq&gt;::eq (2 samples, 0.05%)</title><rect width=".046%" height="15" x="99.124%" y="1509" fill="#DECE29" fg:w="2" fg:x="4302"/></g><g><title>&lt;serde_json::map::Map&lt;alloc::string::String,serde_json::value::Value&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.05%)</title><rect width=".046%" height="15" x="99.124%" y="1493" fill="#D4032A" fg:w="2" fg:x="4302"/></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.05%)</title><rect width=".046%" height="15" x="99.124%" y="1477" fill="#F10B04" fg:w="2" fg:x="4302"/></g><g><title>core::iter::traits::iterator::Iterator::all (2 samples, 0.05%)</title><rect width=".046%" height="15" x="99.124%" y="1461" fill="#CD131A" fg:w="2" fg:x="4302"/></g><g><title>core::iter::traits::iterator::Iterator::try_fold (2 samples, 0.05%)</title><rect width=".046%" height="15" x="99.124%" y="1445" fill="#D2B320" fg:w="2" fg:x="4302"/></g><g><title>core::iter::traits::iterator::Iterator::all::check::_{{closure}} (2 samples, 0.05%)</title><rect width=".046%" height="15" x="99.124%" y="1429" fill="#E37431" fg:w="2" fg:x="4302"/></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq::_{{closure}} (2 samples, 0.05%)</title><rect width=".046%" height="15" x="99.124%" y="1413" fill="#D39206" fg:w="2" fg:x="4302"/></g><g><title>core::tuple::&lt;impl core::cmp::PartialEq for (U,T)&gt;::eq (2 samples, 0.05%)</title><rect width=".046%" height="15" x="99.124%" y="1397" fill="#DB2C27" fg:w="2" fg:x="4302"/></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (2 samples, 0.05%)</title><rect width=".046%" height="15" x="99.124%" y="1381" fill="#EA800B" fg:w="2" fg:x="4302"/></g><g><title>&lt;serde_json::value::Value as core::cmp::PartialEq&gt;::eq (2 samples, 0.05%)</title><rect width=".046%" height="15" x="99.124%" y="1365" fill="#DCB735" fg:w="2" fg:x="4302"/></g><g><title>alloc::vec::partial_eq::&lt;impl core::cmp::PartialEq&lt;alloc::vec::Vec&lt;U,A2&gt;&gt; for alloc::vec::Vec&lt;T,A1&gt;&gt;::eq (2 samples, 0.05%)</title><rect width=".046%" height="15" x="99.124%" y="1349" fill="#D5DB20" fg:w="2" fg:x="4302"/></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (2 samples, 0.05%)</title><rect width=".046%" height="15" x="99.124%" y="1333" fill="#E89C10" fg:w="2" fg:x="4302"/></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (2 samples, 0.05%)</title><rect width=".046%" height="15" x="99.124%" y="1317" fill="#F68722" fg:w="2" fg:x="4302"/></g><g><title>core::iter::traits::iterator::Iterator::all (2 samples, 0.05%)</title><rect width=".046%" height="15" x="99.124%" y="1301" fill="#F16300" fg:w="2" fg:x="4302"/></g><g><title>core::iter::traits::iterator::Iterator::try_fold (2 samples, 0.05%)</title><rect width=".046%" height="15" x="99.124%" y="1285" fill="#DE672D" fg:w="2" fg:x="4302"/></g><g><title>core::iter::traits::iterator::Iterator::all::check::_{{closure}} (2 samples, 0.05%)</title><rect width=".046%" height="15" x="99.124%" y="1269" fill="#D43904" fg:w="2" fg:x="4302"/></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal::_{{closure}} (2 samples, 0.05%)</title><rect width=".046%" height="15" x="99.124%" y="1253" fill="#D7442F" fg:w="2" fg:x="4302"/></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (2 samples, 0.05%)</title><rect width=".046%" height="15" x="99.124%" y="1237" fill="#E65402" fg:w="2" fg:x="4302"/></g><g><title>&lt;serde_json::value::Value as core::cmp::PartialEq&gt;::eq (2 samples, 0.05%)</title><rect width=".046%" height="15" x="99.124%" y="1221" fill="#DC660E" fg:w="2" fg:x="4302"/></g><g><title>&lt;serde_json::map::Map&lt;alloc::string::String,serde_json::value::Value&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.05%)</title><rect width=".046%" height="15" x="99.124%" y="1205" fill="#F00A20" fg:w="2" fg:x="4302"/></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.05%)</title><rect width=".046%" height="15" x="99.124%" y="1189" fill="#D72F1B" fg:w="2" fg:x="4302"/></g><g><title>core::iter::traits::iterator::Iterator::all (2 samples, 0.05%)</title><rect width=".046%" height="15" x="99.124%" y="1173" fill="#E9BC2B" fg:w="2" fg:x="4302"/></g><g><title>core::iter::traits::iterator::Iterator::try_fold (2 samples, 0.05%)</title><rect width=".046%" height="15" x="99.124%" y="1157" fill="#FDBE01" fg:w="2" fg:x="4302"/></g><g><title>core::iter::traits::iterator::Iterator::all::check::_{{closure}} (2 samples, 0.05%)</title><rect width=".046%" height="15" x="99.124%" y="1141" fill="#CE7234" fg:w="2" fg:x="4302"/></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq::_{{closure}} (2 samples, 0.05%)</title><rect width=".046%" height="15" x="99.124%" y="1125" fill="#E97825" fg:w="2" fg:x="4302"/></g><g><title>core::tuple::&lt;impl core::cmp::PartialEq for (U,T)&gt;::eq (2 samples, 0.05%)</title><rect width=".046%" height="15" x="99.124%" y="1109" fill="#D63427" fg:w="2" fg:x="4302"/></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (2 samples, 0.05%)</title><rect width=".046%" height="15" x="99.124%" y="1093" fill="#DF501D" fg:w="2" fg:x="4302"/></g><g><title>&lt;serde_json::value::Value as core::cmp::PartialEq&gt;::eq (2 samples, 0.05%)</title><rect width=".046%" height="15" x="99.124%" y="1077" fill="#E66528" fg:w="2" fg:x="4302"/></g><g><title>&lt;serde_json::map::Map&lt;alloc::string::String,serde_json::value::Value&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.05%)</title><rect width=".046%" height="15" x="99.124%" y="1061" fill="#DBD308" fg:w="2" fg:x="4302"/></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.05%)</title><rect width=".046%" height="15" x="99.124%" y="1045" fill="#FC7E1C" fg:w="2" fg:x="4302"/></g><g><title>core::iter::traits::iterator::Iterator::all (2 samples, 0.05%)</title><rect width=".046%" height="15" x="99.124%" y="1029" fill="#D73826" fg:w="2" fg:x="4302"/></g><g><title>core::iter::traits::iterator::Iterator::try_fold (2 samples, 0.05%)</title><rect width=".046%" height="15" x="99.124%" y="1013" fill="#F9372C" fg:w="2" fg:x="4302"/></g><g><title>core::iter::traits::iterator::Iterator::all::check::_{{closure}} (2 samples, 0.05%)</title><rect width=".046%" height="15" x="99.124%" y="997" fill="#DCDD20" fg:w="2" fg:x="4302"/></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq::_{{closure}} (2 samples, 0.05%)</title><rect width=".046%" height="15" x="99.124%" y="981" fill="#D4D829" fg:w="2" fg:x="4302"/></g><g><title>core::tuple::&lt;impl core::cmp::PartialEq for (U,T)&gt;::eq (2 samples, 0.05%)</title><rect width=".046%" height="15" x="99.124%" y="965" fill="#E4D52B" fg:w="2" fg:x="4302"/></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (2 samples, 0.05%)</title><rect width=".046%" height="15" x="99.124%" y="949" fill="#D31F1A" fg:w="2" fg:x="4302"/></g><g><title>&lt;serde_json::value::Value as core::cmp::PartialEq&gt;::eq (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.147%" y="933" fill="#E5CA13" fg:w="1" fg:x="4303"/></g><g><title>&lt;serde_json::map::Map&lt;alloc::string::String,serde_json::value::Value&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.147%" y="917" fill="#E5692E" fg:w="1" fg:x="4303"/></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.147%" y="901" fill="#EB6C01" fg:w="1" fg:x="4303"/></g><g><title>core::iter::traits::iterator::Iterator::all (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.147%" y="885" fill="#F56F23" fg:w="1" fg:x="4303"/></g><g><title>core::iter::traits::iterator::Iterator::try_fold (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.147%" y="869" fill="#DBB91F" fg:w="1" fg:x="4303"/></g><g><title>core::iter::traits::iterator::Iterator::all::check::_{{closure}} (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.147%" y="853" fill="#D6042B" fg:w="1" fg:x="4303"/></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq::_{{closure}} (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.147%" y="837" fill="#EBE328" fg:w="1" fg:x="4303"/></g><g><title>core::tuple::&lt;impl core::cmp::PartialEq for (U,T)&gt;::eq (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.147%" y="821" fill="#E6581E" fg:w="1" fg:x="4303"/></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.147%" y="805" fill="#D8D901" fg:w="1" fg:x="4303"/></g><g><title>&lt;serde_json::value::Value as core::cmp::PartialEq&gt;::eq (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.147%" y="789" fill="#F88B32" fg:w="1" fg:x="4303"/></g><g><title>&lt;serde_json::map::Map&lt;alloc::string::String,serde_json::value::Value&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.147%" y="773" fill="#E90115" fg:w="1" fg:x="4303"/></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.147%" y="757" fill="#D7B70C" fg:w="1" fg:x="4303"/></g><g><title>core::iter::traits::iterator::Iterator::all (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.147%" y="741" fill="#E5682A" fg:w="1" fg:x="4303"/></g><g><title>core::iter::traits::iterator::Iterator::try_fold (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.147%" y="725" fill="#F32230" fg:w="1" fg:x="4303"/></g><g><title>core::iter::traits::iterator::Iterator::all::check::_{{closure}} (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.147%" y="709" fill="#EF0B2C" fg:w="1" fg:x="4303"/></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq::_{{closure}} (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.147%" y="693" fill="#E76223" fg:w="1" fg:x="4303"/></g><g><title>core::tuple::&lt;impl core::cmp::PartialEq for (U,T)&gt;::eq (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.147%" y="677" fill="#E91C19" fg:w="1" fg:x="4303"/></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.147%" y="661" fill="#EA7B0B" fg:w="1" fg:x="4303"/></g><g><title>&lt;serde_json::value::Value as core::cmp::PartialEq&gt;::eq (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.147%" y="645" fill="#DC4503" fg:w="1" fg:x="4303"/></g><g><title>&lt;serde_json::map::Map&lt;alloc::string::String,serde_json::value::Value&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.147%" y="629" fill="#D64024" fg:w="1" fg:x="4303"/></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.147%" y="613" fill="#D38A20" fg:w="1" fg:x="4303"/></g><g><title>core::iter::traits::iterator::Iterator::all (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.147%" y="597" fill="#D5762F" fg:w="1" fg:x="4303"/></g><g><title>core::iter::traits::iterator::Iterator::try_fold (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.147%" y="581" fill="#F37C31" fg:w="1" fg:x="4303"/></g><g><title>core::iter::traits::iterator::Iterator::all::check::_{{closure}} (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.147%" y="565" fill="#DD1E1C" fg:w="1" fg:x="4303"/></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq::_{{closure}} (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.147%" y="549" fill="#F6250D" fg:w="1" fg:x="4303"/></g><g><title>core::tuple::&lt;impl core::cmp::PartialEq for (U,T)&gt;::eq (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.147%" y="533" fill="#F9420E" fg:w="1" fg:x="4303"/></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.147%" y="517" fill="#D5A605" fg:w="1" fg:x="4303"/></g><g><title>&lt;serde_json::value::Value as core::cmp::PartialEq&gt;::eq (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.147%" y="501" fill="#DD4218" fg:w="1" fg:x="4303"/></g><g><title>alloc::vec::partial_eq::&lt;impl core::cmp::PartialEq&lt;alloc::vec::Vec&lt;U,A2&gt;&gt; for alloc::vec::Vec&lt;T,A1&gt;&gt;::eq (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.147%" y="485" fill="#D28411" fg:w="1" fg:x="4303"/></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.147%" y="469" fill="#F3CA05" fg:w="1" fg:x="4303"/></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.147%" y="453" fill="#E94630" fg:w="1" fg:x="4303"/></g><g><title>core::iter::traits::iterator::Iterator::all (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.147%" y="437" fill="#EE291A" fg:w="1" fg:x="4303"/></g><g><title>core::iter::traits::iterator::Iterator::try_fold (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.147%" y="421" fill="#F1131F" fg:w="1" fg:x="4303"/></g><g><title>core::iter::traits::iterator::Iterator::all::check::_{{closure}} (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.147%" y="405" fill="#D64C0A" fg:w="1" fg:x="4303"/></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal::_{{closure}} (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.147%" y="389" fill="#FECA16" fg:w="1" fg:x="4303"/></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.147%" y="373" fill="#D64818" fg:w="1" fg:x="4303"/></g><g><title>&lt;serde_json::value::Value as core::cmp::PartialEq&gt;::eq (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.147%" y="357" fill="#DD5C2E" fg:w="1" fg:x="4303"/></g><g><title>&lt;serde_json::map::Map&lt;alloc::string::String,serde_json::value::Value&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.147%" y="341" fill="#F60D32" fg:w="1" fg:x="4303"/></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.147%" y="325" fill="#F0A526" fg:w="1" fg:x="4303"/></g><g><title>core::iter::traits::iterator::Iterator::all (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.147%" y="309" fill="#F11833" fg:w="1" fg:x="4303"/></g><g><title>core::iter::traits::iterator::Iterator::try_fold (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.147%" y="293" fill="#E3332C" fg:w="1" fg:x="4303"/></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.147%" y="277" fill="#E77903" fg:w="1" fg:x="4303"/></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::next (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.147%" y="261" fill="#F50329" fg:w="1" fg:x="4303"/></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.147%" y="245" fill="#D60D1A" fg:w="1" fg:x="4303"/></g><g><title>?? (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.147%" y="229" fill="#FC4B0B" fg:w="1" fg:x="4303"/></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.147%" y="213" fill="#DAE211" fg:w="1" fg:x="4303"/></g><g><title>_rjem_sdallocx (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.171%" y="1173" fill="#F85926" fg:w="1" fg:x="4304"/></g><g><title>free_fastpath (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.171%" y="1157" fill="#ED492E" fg:w="1" fg:x="4304"/></g><g><title>cache_bin_dalloc_easy (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.171%" y="1141" fill="#F24E21" fg:w="1" fg:x="4304"/></g><g><title>cache_bin_full (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.171%" y="1125" fill="#EB3C03" fg:w="1" fg:x="4304"/></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.07%)</title><rect width=".069%" height="15" x="99.171%" y="1525" fill="#D8AC13" fg:w="3" fg:x="4304"/></g><g><title>core::ptr::drop_in_place&lt;serde_json::map::Map&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (3 samples, 0.07%)</title><rect width=".069%" height="15" x="99.171%" y="1509" fill="#E3062A" fg:w="3" fg:x="4304"/></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::BTreeMap&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (3 samples, 0.07%)</title><rect width=".069%" height="15" x="99.171%" y="1493" fill="#DFCF2A" fg:w="3" fg:x="4304"/></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.07%)</title><rect width=".069%" height="15" x="99.171%" y="1477" fill="#F68A1E" fg:w="3" fg:x="4304"/></g><g><title>core::mem::drop (3 samples, 0.07%)</title><rect width=".069%" height="15" x="99.171%" y="1461" fill="#FBC72F" fg:w="3" fg:x="4304"/></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (3 samples, 0.07%)</title><rect width=".069%" height="15" x="99.171%" y="1445" fill="#E4DA2C" fg:w="3" fg:x="4304"/></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.07%)</title><rect width=".069%" height="15" x="99.171%" y="1429" fill="#DC4406" fg:w="3" fg:x="4304"/></g><g><title>?? (3 samples, 0.07%)</title><rect width=".069%" height="15" x="99.171%" y="1413" fill="#F03C1A" fg:w="3" fg:x="4304"/></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (3 samples, 0.07%)</title><rect width=".069%" height="15" x="99.171%" y="1397" fill="#D3C813" fg:w="3" fg:x="4304"/></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.07%)</title><rect width=".069%" height="15" x="99.171%" y="1381" fill="#F2911E" fg:w="3" fg:x="4304"/></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;serde_json::value::Value&gt;&gt; (3 samples, 0.07%)</title><rect width=".069%" height="15" x="99.171%" y="1365" fill="#E1400D" fg:w="3" fg:x="4304"/></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.07%)</title><rect width=".069%" height="15" x="99.171%" y="1349" fill="#DA6723" fg:w="3" fg:x="4304"/></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (3 samples, 0.07%)</title><rect width=".069%" height="15" x="99.171%" y="1333" fill="#D85D2E" fg:w="3" fg:x="4304"/></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.07%)</title><rect width=".069%" height="15" x="99.171%" y="1317" fill="#E19F1B" fg:w="3" fg:x="4304"/></g><g><title>core::ptr::drop_in_place&lt;serde_json::map::Map&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (3 samples, 0.07%)</title><rect width=".069%" height="15" x="99.171%" y="1301" fill="#E1CC0B" fg:w="3" fg:x="4304"/></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::BTreeMap&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (3 samples, 0.07%)</title><rect width=".069%" height="15" x="99.171%" y="1285" fill="#CD3804" fg:w="3" fg:x="4304"/></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.07%)</title><rect width=".069%" height="15" x="99.171%" y="1269" fill="#CE0623" fg:w="3" fg:x="4304"/></g><g><title>core::mem::drop (3 samples, 0.07%)</title><rect width=".069%" height="15" x="99.171%" y="1253" fill="#F74934" fg:w="3" fg:x="4304"/></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (3 samples, 0.07%)</title><rect width=".069%" height="15" x="99.171%" y="1237" fill="#F66104" fg:w="3" fg:x="4304"/></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.07%)</title><rect width=".069%" height="15" x="99.171%" y="1221" fill="#D4250F" fg:w="3" fg:x="4304"/></g><g><title>?? (3 samples, 0.07%)</title><rect width=".069%" height="15" x="99.171%" y="1205" fill="#D08228" fg:w="3" fg:x="4304"/></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (3 samples, 0.07%)</title><rect width=".069%" height="15" x="99.171%" y="1189" fill="#EC371D" fg:w="3" fg:x="4304"/></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.05%)</title><rect width=".046%" height="15" x="99.194%" y="1173" fill="#D19C2D" fg:w="2" fg:x="4305"/></g><g><title>core::ptr::drop_in_place&lt;serde_json::map::Map&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.05%)</title><rect width=".046%" height="15" x="99.194%" y="1157" fill="#F96B04" fg:w="2" fg:x="4305"/></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::BTreeMap&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.05%)</title><rect width=".046%" height="15" x="99.194%" y="1141" fill="#E3070D" fg:w="2" fg:x="4305"/></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.05%)</title><rect width=".046%" height="15" x="99.194%" y="1125" fill="#FA810E" fg:w="2" fg:x="4305"/></g><g><title>core::mem::drop (2 samples, 0.05%)</title><rect width=".046%" height="15" x="99.194%" y="1109" fill="#E55C0D" fg:w="2" fg:x="4305"/></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.05%)</title><rect width=".046%" height="15" x="99.194%" y="1093" fill="#F56227" fg:w="2" fg:x="4305"/></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.05%)</title><rect width=".046%" height="15" x="99.194%" y="1077" fill="#EA8730" fg:w="2" fg:x="4305"/></g><g><title>?? (2 samples, 0.05%)</title><rect width=".046%" height="15" x="99.194%" y="1061" fill="#E6621C" fg:w="2" fg:x="4305"/></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.05%)</title><rect width=".046%" height="15" x="99.194%" y="1045" fill="#DF7900" fg:w="2" fg:x="4305"/></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.05%)</title><rect width=".046%" height="15" x="99.194%" y="1029" fill="#EAAD21" fg:w="2" fg:x="4305"/></g><g><title>core::ptr::drop_in_place&lt;serde_json::map::Map&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.217%" y="1013" fill="#F52F08" fg:w="1" fg:x="4306"/></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::BTreeMap&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.217%" y="997" fill="#CD1114" fg:w="1" fg:x="4306"/></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.217%" y="981" fill="#E89710" fg:w="1" fg:x="4306"/></g><g><title>core::mem::drop (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.217%" y="965" fill="#D01E20" fg:w="1" fg:x="4306"/></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.217%" y="949" fill="#FE1A03" fg:w="1" fg:x="4306"/></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.217%" y="933" fill="#F0B11E" fg:w="1" fg:x="4306"/></g><g><title>?? (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.217%" y="917" fill="#F84C2C" fg:w="1" fg:x="4306"/></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked_mut (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.217%" y="901" fill="#F1BA36" fg:w="1" fg:x="4306"/></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked_mut (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.217%" y="885" fill="#F9AB1D" fg:w="1" fg:x="4306"/></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.217%" y="869" fill="#ED972C" fg:w="1" fg:x="4306"/></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.263%" y="1253" fill="#E4AE1E" fg:w="1" fg:x="4308"/></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.263%" y="1237" fill="#FC0E25" fg:w="1" fg:x="4308"/></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for alloc::string::String&gt;::deserialize (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.263%" y="1221" fill="#CF6F28" fg:w="1" fg:x="4308"/></g><g><title>&lt;serde_json::de::MapKey&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_string (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.263%" y="1205" fill="#F8AB36" fg:w="1" fg:x="4308"/></g><g><title>&lt;serde_json::de::MapKey&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.263%" y="1189" fill="#D37F02" fg:w="1" fg:x="4308"/></g><g><title>_rjem_malloc (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.263%" y="1173" fill="#EC572F" fg:w="1" fg:x="4308"/></g><g><title>imalloc_fastpath (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.263%" y="1157" fill="#DFBE2D" fg:w="1" fg:x="4308"/></g><g><title>cache_bin_alloc_easy (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.263%" y="1141" fill="#D70510" fg:w="1" fg:x="4308"/></g><g><title>cache_bin_alloc_impl (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.263%" y="1125" fill="#FC5221" fg:w="1" fg:x="4308"/></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.286%" y="1189" fill="#F7D52C" fg:w="1" fg:x="4309"/></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.286%" y="1173" fill="#CDC42C" fg:w="1" fg:x="4309"/></g><g><title>serde_json::read::parse_escape (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.286%" y="1157" fill="#ED6036" fg:w="1" fg:x="4309"/></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.309%" y="1141" fill="#E67122" fg:w="1" fg:x="4310"/></g><g><title>serde::de::MapAccess::next_entry (2 samples, 0.05%)</title><rect width=".046%" height="15" x="99.332%" y="1061" fill="#DDE00C" fg:w="2" fg:x="4311"/></g><g><title>serde::de::MapAccess::next_entry_seed (2 samples, 0.05%)</title><rect width=".046%" height="15" x="99.332%" y="1045" fill="#DB702C" fg:w="2" fg:x="4311"/></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.355%" y="1029" fill="#D21F0D" fg:w="1" fg:x="4312"/></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.355%" y="1013" fill="#E61910" fg:w="1" fg:x="4312"/></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.355%" y="997" fill="#F66C35" fg:w="1" fg:x="4312"/></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.355%" y="981" fill="#F1AC32" fg:w="1" fg:x="4312"/></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_str (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.355%" y="965" fill="#EB8D0A" fg:w="1" fg:x="4312"/></g><g><title>&lt;alloc::string::String as core::convert::From&lt;&amp;str&gt;&gt;::from (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.355%" y="949" fill="#DCAE2B" fg:w="1" fg:x="4312"/></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.355%" y="933" fill="#D7B528" fg:w="1" fg:x="4312"/></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.355%" y="917" fill="#E66102" fg:w="1" fg:x="4312"/></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.355%" y="901" fill="#D3191B" fg:w="1" fg:x="4312"/></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.355%" y="885" fill="#E6571A" fg:w="1" fg:x="4312"/></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.355%" y="869" fill="#E3A011" fg:w="1" fg:x="4312"/></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.355%" y="853" fill="#F45522" fg:w="1" fg:x="4312"/></g><g><title>?? (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.355%" y="837" fill="#CF4600" fg:w="1" fg:x="4312"/></g><g><title>?? (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.355%" y="821" fill="#DF8107" fg:w="1" fg:x="4312"/></g><g><title>?? (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.355%" y="805" fill="#F66907" fg:w="1" fg:x="4312"/></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.355%" y="789" fill="#D79A2A" fg:w="1" fg:x="4312"/></g><g><title>?? (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.355%" y="773" fill="#DCD71E" fg:w="1" fg:x="4312"/></g><g><title>alloc::alloc::alloc (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.355%" y="757" fill="#E45133" fg:w="1" fg:x="4312"/></g><g><title>__rust_alloc (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.355%" y="741" fill="#F74736" fg:w="1" fg:x="4312"/></g><g><title>&lt;jemallocator::Jemalloc as core::alloc::global::GlobalAlloc&gt;::alloc (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.355%" y="725" fill="#EAB022" fg:w="1" fg:x="4312"/></g><g><title>_rjem_malloc (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.355%" y="709" fill="#F16736" fg:w="1" fg:x="4312"/></g><g><title>imalloc_fastpath (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.355%" y="693" fill="#E41622" fg:w="1" fg:x="4312"/></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.07%)</title><rect width=".069%" height="15" x="99.332%" y="1077" fill="#F1B330" fg:w="3" fg:x="4311"/></g><g><title>serde::de::MapAccess::next_value (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.378%" y="1061" fill="#EBA725" fg:w="1" fg:x="4313"/></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.378%" y="1045" fill="#D56D1E" fg:w="1" fg:x="4313"/></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.378%" y="1029" fill="#DEAC10" fg:w="1" fg:x="4313"/></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.378%" y="1013" fill="#E9C005" fg:w="1" fg:x="4313"/></g><g><title>serde::de::MapAccess::next_value (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.378%" y="997" fill="#F7BD29" fg:w="1" fg:x="4313"/></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.378%" y="981" fill="#DA862F" fg:w="1" fg:x="4313"/></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.378%" y="965" fill="#D81D03" fg:w="1" fg:x="4313"/></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_seq (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.378%" y="949" fill="#F68C0C" fg:w="1" fg:x="4313"/></g><g><title>serde::de::SeqAccess::next_element (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.378%" y="933" fill="#E6880B" fg:w="1" fg:x="4313"/></g><g><title>&lt;serde_json::de::SeqAccess&lt;R&gt; as serde::de::SeqAccess&gt;::next_element_seed (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.378%" y="917" fill="#F7162F" fg:w="1" fg:x="4313"/></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.378%" y="901" fill="#DA5416" fg:w="1" fg:x="4313"/></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.378%" y="885" fill="#D85727" fg:w="1" fg:x="4313"/></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.378%" y="869" fill="#DDB208" fg:w="1" fg:x="4313"/></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.378%" y="853" fill="#E62A0B" fg:w="1" fg:x="4313"/></g><g><title>serde::de::MapAccess::next_entry (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.378%" y="837" fill="#EDE504" fg:w="1" fg:x="4313"/></g><g><title>serde::de::MapAccess::next_entry_seed (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.378%" y="821" fill="#DE1F21" fg:w="1" fg:x="4313"/></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.378%" y="805" fill="#D21127" fg:w="1" fg:x="4313"/></g><g><title>?? (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.378%" y="789" fill="#F45D14" fg:w="1" fg:x="4313"/></g><g><title>?? (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.378%" y="773" fill="#D2282F" fg:w="1" fg:x="4313"/></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::discard (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.378%" y="757" fill="#EFD32F" fg:w="1" fg:x="4313"/></g><g><title>&lt;serde_json::read::SliceRead as serde_json::read::Read&gt;::discard (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.378%" y="741" fill="#FBDF31" fg:w="1" fg:x="4313"/></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (4 samples, 0.09%)</title><rect width=".092%" height="15" x="99.332%" y="1125" fill="#DD9505" fg:w="4" fg:x="4311"/></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (4 samples, 0.09%)</title><rect width=".092%" height="15" x="99.332%" y="1109" fill="#DBE033" fg:w="4" fg:x="4311"/></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.09%)</title><rect width=".092%" height="15" x="99.332%" y="1093" fill="#DF0708" fg:w="4" fg:x="4311"/></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_seq (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.401%" y="1077" fill="#F1D916" fg:w="1" fg:x="4314"/></g><g><title>serde::de::SeqAccess::next_element (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.401%" y="1061" fill="#F8D100" fg:w="1" fg:x="4314"/></g><g><title>&lt;serde_json::de::SeqAccess&lt;R&gt; as serde::de::SeqAccess&gt;::next_element_seed (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.401%" y="1045" fill="#D9CD04" fg:w="1" fg:x="4314"/></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.401%" y="1029" fill="#E47C27" fg:w="1" fg:x="4314"/></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.401%" y="1013" fill="#FA742A" fg:w="1" fg:x="4314"/></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.401%" y="997" fill="#DFCA09" fg:w="1" fg:x="4314"/></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.401%" y="981" fill="#F2DE28" fg:w="1" fg:x="4314"/></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.401%" y="965" fill="#E5632E" fg:w="1" fg:x="4314"/></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.401%" y="949" fill="#E1382E" fg:w="1" fg:x="4314"/></g><g><title>serde::de::MapAccess::next_entry (6 samples, 0.14%)</title><rect width=".138%" height="15" x="99.309%" y="1173" fill="#E35E05" fg:w="6" fg:x="4310"/></g><g><title>serde::de::MapAccess::next_entry_seed (6 samples, 0.14%)</title><rect width=".138%" height="15" x="99.309%" y="1157" fill="#CD7026" fg:w="6" fg:x="4310"/></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_value_seed (5 samples, 0.12%)</title><rect width=".115%" height="15" x="99.332%" y="1141" fill="#E7852E" fg:w="5" fg:x="4311"/></g><g><title>?? (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.424%" y="1125" fill="#D91009" fg:w="1" fg:x="4315"/></g><g><title>?? (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.424%" y="1109" fill="#F9AD09" fg:w="1" fg:x="4315"/></g><g><title>?? (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.424%" y="1093" fill="#CDA335" fg:w="1" fg:x="4315"/></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::peek (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.424%" y="1077" fill="#D93629" fg:w="1" fg:x="4315"/></g><g><title>&lt;serde_json::read::SliceRead as serde_json::read::Read&gt;::peek (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.424%" y="1061" fill="#E4D80C" fg:w="1" fg:x="4315"/></g><g><title>deserialize_struct::diff_json (15 samples, 0.35%)</title><rect width=".346%" height="15" x="99.124%" y="1541" fill="#F4E40F" fg:w="15" fg:x="4302"/></g><g><title>serde_json::de::from_str (10 samples, 0.23%)</title><rect width=".23%" height="15" x="99.24%" y="1525" fill="#DDB035" fg:w="10" fg:x="4307"/></g><g><title>serde_json::de::from_trait (10 samples, 0.23%)</title><rect width=".23%" height="15" x="99.24%" y="1509" fill="#CD5E22" fg:w="10" fg:x="4307"/></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (10 samples, 0.23%)</title><rect width=".23%" height="15" x="99.24%" y="1493" fill="#D56E30" fg:w="10" fg:x="4307"/></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (10 samples, 0.23%)</title><rect width=".23%" height="15" x="99.24%" y="1477" fill="#EC8E1C" fg:w="10" fg:x="4307"/></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (10 samples, 0.23%)</title><rect width=".23%" height="15" x="99.24%" y="1461" fill="#E1871D" fg:w="10" fg:x="4307"/></g><g><title>serde::de::MapAccess::next_value (10 samples, 0.23%)</title><rect width=".23%" height="15" x="99.24%" y="1445" fill="#FC2D1F" fg:w="10" fg:x="4307"/></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (10 samples, 0.23%)</title><rect width=".23%" height="15" x="99.24%" y="1429" fill="#D3BB32" fg:w="10" fg:x="4307"/></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (10 samples, 0.23%)</title><rect width=".23%" height="15" x="99.24%" y="1413" fill="#E56D07" fg:w="10" fg:x="4307"/></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_seq (10 samples, 0.23%)</title><rect width=".23%" height="15" x="99.24%" y="1397" fill="#FB8333" fg:w="10" fg:x="4307"/></g><g><title>serde::de::SeqAccess::next_element (10 samples, 0.23%)</title><rect width=".23%" height="15" x="99.24%" y="1381" fill="#FBB423" fg:w="10" fg:x="4307"/></g><g><title>&lt;serde_json::de::SeqAccess&lt;R&gt; as serde::de::SeqAccess&gt;::next_element_seed (10 samples, 0.23%)</title><rect width=".23%" height="15" x="99.24%" y="1365" fill="#D32E20" fg:w="10" fg:x="4307"/></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (10 samples, 0.23%)</title><rect width=".23%" height="15" x="99.24%" y="1349" fill="#F87B11" fg:w="10" fg:x="4307"/></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (10 samples, 0.23%)</title><rect width=".23%" height="15" x="99.24%" y="1333" fill="#E38D12" fg:w="10" fg:x="4307"/></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (10 samples, 0.23%)</title><rect width=".23%" height="15" x="99.24%" y="1317" fill="#D86609" fg:w="10" fg:x="4307"/></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (9 samples, 0.21%)</title><rect width=".207%" height="15" x="99.263%" y="1301" fill="#FD2F0D" fg:w="9" fg:x="4308"/></g><g><title>serde::de::MapAccess::next_entry (9 samples, 0.21%)</title><rect width=".207%" height="15" x="99.263%" y="1285" fill="#E25D17" fg:w="9" fg:x="4308"/></g><g><title>serde::de::MapAccess::next_entry_seed (9 samples, 0.21%)</title><rect width=".207%" height="15" x="99.263%" y="1269" fill="#F76811" fg:w="9" fg:x="4308"/></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_value_seed (8 samples, 0.18%)</title><rect width=".184%" height="15" x="99.286%" y="1253" fill="#E9CB1A" fg:w="8" fg:x="4309"/></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (8 samples, 0.18%)</title><rect width=".184%" height="15" x="99.286%" y="1237" fill="#F46231" fg:w="8" fg:x="4309"/></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (8 samples, 0.18%)</title><rect width=".184%" height="15" x="99.286%" y="1221" fill="#EB8616" fg:w="8" fg:x="4309"/></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (8 samples, 0.18%)</title><rect width=".184%" height="15" x="99.286%" y="1205" fill="#DD4620" fg:w="8" fg:x="4309"/></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (7 samples, 0.16%)</title><rect width=".161%" height="15" x="99.309%" y="1189" fill="#EE0F32" fg:w="7" fg:x="4310"/></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.447%" y="1173" fill="#D7DD30" fg:w="1" fg:x="4316"/></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.447%" y="1157" fill="#EC4903" fg:w="1" fg:x="4316"/></g><g><title>?? (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.447%" y="1141" fill="#FA6B0B" fg:w="1" fg:x="4316"/></g><g><title>?? (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.447%" y="1125" fill="#F2270E" fg:w="1" fg:x="4316"/></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert::_{{closure}} (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.447%" y="1109" fill="#F8A425" fg:w="1" fg:x="4316"/></g><g><title>?? (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.447%" y="1093" fill="#D93C0C" fg:w="1" fg:x="4316"/></g><g><title>alloc::collections::btree::mem::take_mut (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.447%" y="1077" fill="#F07D1D" fg:w="1" fg:x="4316"/></g><g><title>alloc::collections::btree::mem::replace (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.447%" y="1061" fill="#D0CF1C" fg:w="1" fg:x="4316"/></g><g><title>alloc::collections::btree::mem::take_mut::_{{closure}} (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.447%" y="1045" fill="#D19F1B" fg:w="1" fg:x="4316"/></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;::push_internal_level::_{{closure}} (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.447%" y="1029" fill="#FBB035" fg:w="1" fg:x="4316"/></g><g><title>?? (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.447%" y="1013" fill="#D35507" fg:w="1" fg:x="4316"/></g><g><title>?? (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.447%" y="997" fill="#D84036" fg:w="1" fg:x="4316"/></g><g><title>?? (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.447%" y="981" fill="#D93618" fg:w="1" fg:x="4316"/></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.447%" y="965" fill="#D0CE35" fg:w="1" fg:x="4316"/></g><g><title>core::ptr::write (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.447%" y="949" fill="#FB4A27" fg:w="1" fg:x="4316"/></g><g><title>serde::de::MapAccess::next_key (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.47%" y="1461" fill="#E22F05" fg:w="1" fg:x="4317"/></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.47%" y="1445" fill="#EA6F21" fg:w="1" fg:x="4317"/></g><g><title>?? (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.47%" y="1429" fill="#FB0E0A" fg:w="1" fg:x="4317"/></g><g><title>?? (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.47%" y="1413" fill="#E82B00" fg:w="1" fg:x="4317"/></g><g><title>&lt;serde_json::read::SliceRead as serde_json::read::Read&gt;::peek (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.47%" y="1397" fill="#DE442B" fg:w="1" fg:x="4317"/></g><g><title>?? (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.493%" y="1365" fill="#D91817" fg:w="1" fg:x="4318"/></g><g><title>core::ptr::write (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.493%" y="1349" fill="#E5D10E" fg:w="1" fg:x="4318"/></g><g><title>__memmove_avx_unaligned_erms (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.493%" y="1333" fill="#FA9530" fg:w="1" fg:x="4318"/></g><g><title>json_benchmark::copy::twitter::_::&lt;impl serde::de::Deserialize for json_benchmark::copy::twitter::User&gt;::deserialize (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.516%" y="1221" fill="#D27825" fg:w="1" fg:x="4319"/></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_struct (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.516%" y="1205" fill="#D21508" fg:w="1" fg:x="4319"/></g><g><title>&lt;json_benchmark::copy::twitter::_::&lt;impl serde::de::Deserialize for json_benchmark::copy::twitter::User&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.516%" y="1189" fill="#F39107" fg:w="1" fg:x="4319"/></g><g><title>serde::de::MapAccess::next_value (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.516%" y="1173" fill="#EEB220" fg:w="1" fg:x="4319"/></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.516%" y="1157" fill="#DE040A" fg:w="1" fg:x="4319"/></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.516%" y="1141" fill="#EF0725" fg:w="1" fg:x="4319"/></g><g><title>json_benchmark::copy::twitter::_::&lt;impl serde::de::Deserialize for json_benchmark::copy::twitter::UserEntities&gt;::deserialize (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.516%" y="1125" fill="#D71F25" fg:w="1" fg:x="4319"/></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_struct (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.516%" y="1109" fill="#E05321" fg:w="1" fg:x="4319"/></g><g><title>serde_json::de::from_slice (4 samples, 0.09%)</title><rect width=".092%" height="15" x="99.47%" y="1541" fill="#EF3703" fg:w="4" fg:x="4317"/></g><g><title>serde_json::de::from_trait (4 samples, 0.09%)</title><rect width=".092%" height="15" x="99.47%" y="1525" fill="#F75C0B" fg:w="4" fg:x="4317"/></g><g><title>json_benchmark::copy::twitter::_::&lt;impl serde::de::Deserialize for json_benchmark::copy::twitter::Twitter&gt;::deserialize (4 samples, 0.09%)</title><rect width=".092%" height="15" x="99.47%" y="1509" fill="#EFC807" fg:w="4" fg:x="4317"/></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_struct (4 samples, 0.09%)</title><rect width=".092%" height="15" x="99.47%" y="1493" fill="#E37308" fg:w="4" fg:x="4317"/></g><g><title>&lt;json_benchmark::copy::twitter::_::&lt;impl serde::de::Deserialize for json_benchmark::copy::twitter::Twitter&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.09%)</title><rect width=".092%" height="15" x="99.47%" y="1477" fill="#D7BD1B" fg:w="4" fg:x="4317"/></g><g><title>serde::de::MapAccess::next_value (3 samples, 0.07%)</title><rect width=".069%" height="15" x="99.493%" y="1461" fill="#FBD827" fg:w="3" fg:x="4318"/></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_value_seed (3 samples, 0.07%)</title><rect width=".069%" height="15" x="99.493%" y="1445" fill="#CF1D2F" fg:w="3" fg:x="4318"/></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (3 samples, 0.07%)</title><rect width=".069%" height="15" x="99.493%" y="1429" fill="#D24722" fg:w="3" fg:x="4318"/></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize (3 samples, 0.07%)</title><rect width=".069%" height="15" x="99.493%" y="1413" fill="#FDD933" fg:w="3" fg:x="4318"/></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_seq (3 samples, 0.07%)</title><rect width=".069%" height="15" x="99.493%" y="1397" fill="#DE752E" fg:w="3" fg:x="4318"/></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (3 samples, 0.07%)</title><rect width=".069%" height="15" x="99.493%" y="1381" fill="#E28406" fg:w="3" fg:x="4318"/></g><g><title>serde::de::SeqAccess::next_element (2 samples, 0.05%)</title><rect width=".046%" height="15" x="99.516%" y="1365" fill="#FE9133" fg:w="2" fg:x="4319"/></g><g><title>&lt;serde_json::de::SeqAccess&lt;R&gt; as serde::de::SeqAccess&gt;::next_element_seed (2 samples, 0.05%)</title><rect width=".046%" height="15" x="99.516%" y="1349" fill="#E7C71B" fg:w="2" fg:x="4319"/></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (2 samples, 0.05%)</title><rect width=".046%" height="15" x="99.516%" y="1333" fill="#F59E0E" fg:w="2" fg:x="4319"/></g><g><title>json_benchmark::copy::twitter::_::&lt;impl serde::de::Deserialize for json_benchmark::copy::twitter::Status&gt;::deserialize (2 samples, 0.05%)</title><rect width=".046%" height="15" x="99.516%" y="1317" fill="#F0710E" fg:w="2" fg:x="4319"/></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_struct (2 samples, 0.05%)</title><rect width=".046%" height="15" x="99.516%" y="1301" fill="#D2140D" fg:w="2" fg:x="4319"/></g><g><title>&lt;json_benchmark::copy::twitter::_::&lt;impl serde::de::Deserialize for json_benchmark::copy::twitter::Status&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.05%)</title><rect width=".046%" height="15" x="99.516%" y="1285" fill="#F1900D" fg:w="2" fg:x="4319"/></g><g><title>serde::de::MapAccess::next_value (2 samples, 0.05%)</title><rect width=".046%" height="15" x="99.516%" y="1269" fill="#EB2B22" fg:w="2" fg:x="4319"/></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_value_seed (2 samples, 0.05%)</title><rect width=".046%" height="15" x="99.516%" y="1253" fill="#D02414" fg:w="2" fg:x="4319"/></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (2 samples, 0.05%)</title><rect width=".046%" height="15" x="99.516%" y="1237" fill="#EFCC0A" fg:w="2" fg:x="4319"/></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for core::option::Option&lt;T&gt;&gt;::deserialize (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.539%" y="1221" fill="#D9542B" fg:w="1" fg:x="4320"/></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_option (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.539%" y="1205" fill="#F1AA32" fg:w="1" fg:x="4320"/></g><g><title>&lt;serde::de::impls::OptionVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_some (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.539%" y="1189" fill="#E2CD1D" fg:w="1" fg:x="4320"/></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for alloc::boxed::Box&lt;T&gt;&gt;::deserialize (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.539%" y="1173" fill="#E97101" fg:w="1" fg:x="4320"/></g><g><title>json_benchmark::copy::twitter::_::&lt;impl serde::de::Deserialize for json_benchmark::copy::twitter::Status&gt;::deserialize (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.539%" y="1157" fill="#FD620D" fg:w="1" fg:x="4320"/></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_struct (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.539%" y="1141" fill="#D3730C" fg:w="1" fg:x="4320"/></g><g><title>&lt;json_benchmark::copy::twitter::_::&lt;impl serde::de::Deserialize for json_benchmark::copy::twitter::Status&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.539%" y="1125" fill="#D00C10" fg:w="1" fg:x="4320"/></g><g><title>serde::de::MapAccess::next_value (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.539%" y="1109" fill="#EDC136" fg:w="1" fg:x="4320"/></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.539%" y="1093" fill="#F3162A" fg:w="1" fg:x="4320"/></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.539%" y="1077" fill="#E99724" fg:w="1" fg:x="4320"/></g><g><title>json_benchmark::copy::twitter::_::&lt;impl serde::de::Deserialize for json_benchmark::copy::twitter::User&gt;::deserialize (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.539%" y="1061" fill="#ED392D" fg:w="1" fg:x="4320"/></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_struct (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.539%" y="1045" fill="#DD5811" fg:w="1" fg:x="4320"/></g><g><title>&lt;json_benchmark::copy::twitter::_::&lt;impl serde::de::Deserialize for json_benchmark::copy::twitter::User&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.539%" y="1029" fill="#E64F0F" fg:w="1" fg:x="4320"/></g><g><title>serde::de::MapAccess::next_value (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.539%" y="1013" fill="#D5390D" fg:w="1" fg:x="4320"/></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.539%" y="997" fill="#DE7427" fg:w="1" fg:x="4320"/></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.539%" y="981" fill="#F56B02" fg:w="1" fg:x="4320"/></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for bool&gt;::deserialize (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.539%" y="965" fill="#EE010A" fg:w="1" fg:x="4320"/></g><g><title>&lt;json_benchmark::copy::twitter::_::&lt;impl serde::de::Deserialize for json_benchmark::copy::twitter::User&gt;::deserialize::__FieldVisitor as serde::de::Visitor&gt;::visit_str (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.562%" y="1077" fill="#F90430" fg:w="1" fg:x="4321"/></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.562%" y="1061" fill="#DF9712" fg:w="1" fg:x="4321"/></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.562%" y="1045" fill="#E3412B" fg:w="1" fg:x="4321"/></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.562%" y="1029" fill="#DA282D" fg:w="1" fg:x="4321"/></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.562%" y="1013" fill="#FC791F" fg:w="1" fg:x="4321"/></g><g><title>__memcmp_avx2_movbe (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.562%" y="997" fill="#DB9E2B" fg:w="1" fg:x="4321"/></g><g><title>sonic_rs::serde::de::from_slice (2 samples, 0.05%)</title><rect width=".046%" height="15" x="99.562%" y="1541" fill="#E7A22A" fg:w="2" fg:x="4321"/></g><g><title>sonic_rs::serde::de::from_trait (2 samples, 0.05%)</title><rect width=".046%" height="15" x="99.562%" y="1525" fill="#D9B319" fg:w="2" fg:x="4321"/></g><g><title>json_benchmark::copy::twitter::_::&lt;impl serde::de::Deserialize for json_benchmark::copy::twitter::Twitter&gt;::deserialize (2 samples, 0.05%)</title><rect width=".046%" height="15" x="99.562%" y="1509" fill="#CED41F" fg:w="2" fg:x="4321"/></g><g><title>&lt;&amp;mut sonic_rs::serde::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_struct (2 samples, 0.05%)</title><rect width=".046%" height="15" x="99.562%" y="1493" fill="#EB900C" fg:w="2" fg:x="4321"/></g><g><title>&lt;json_benchmark::copy::twitter::_::&lt;impl serde::de::Deserialize for json_benchmark::copy::twitter::Twitter&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.05%)</title><rect width=".046%" height="15" x="99.562%" y="1477" fill="#D5330A" fg:w="2" fg:x="4321"/></g><g><title>&lt;sonic_rs::serde::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_value (2 samples, 0.05%)</title><rect width=".046%" height="15" x="99.562%" y="1461" fill="#E7910E" fg:w="2" fg:x="4321"/></g><g><title>&lt;sonic_rs::serde::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_value_seed (2 samples, 0.05%)</title><rect width=".046%" height="15" x="99.562%" y="1445" fill="#EB0F1C" fg:w="2" fg:x="4321"/></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (2 samples, 0.05%)</title><rect width=".046%" height="15" x="99.562%" y="1429" fill="#EDCE0A" fg:w="2" fg:x="4321"/></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize (2 samples, 0.05%)</title><rect width=".046%" height="15" x="99.562%" y="1413" fill="#ECE31B" fg:w="2" fg:x="4321"/></g><g><title>&lt;&amp;mut sonic_rs::serde::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_seq (2 samples, 0.05%)</title><rect width=".046%" height="15" x="99.562%" y="1397" fill="#F65323" fg:w="2" fg:x="4321"/></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (2 samples, 0.05%)</title><rect width=".046%" height="15" x="99.562%" y="1381" fill="#DC8818" fg:w="2" fg:x="4321"/></g><g><title>serde::de::SeqAccess::next_element (2 samples, 0.05%)</title><rect width=".046%" height="15" x="99.562%" y="1365" fill="#D90319" fg:w="2" fg:x="4321"/></g><g><title>&lt;sonic_rs::serde::de::SeqAccess&lt;R&gt; as serde::de::SeqAccess&gt;::next_element_seed (2 samples, 0.05%)</title><rect width=".046%" height="15" x="99.562%" y="1349" fill="#EF180E" fg:w="2" fg:x="4321"/></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (2 samples, 0.05%)</title><rect width=".046%" height="15" x="99.562%" y="1333" fill="#F41035" fg:w="2" fg:x="4321"/></g><g><title>json_benchmark::copy::twitter::_::&lt;impl serde::de::Deserialize for json_benchmark::copy::twitter::Status&gt;::deserialize (2 samples, 0.05%)</title><rect width=".046%" height="15" x="99.562%" y="1317" fill="#D0AF2C" fg:w="2" fg:x="4321"/></g><g><title>&lt;&amp;mut sonic_rs::serde::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_struct (2 samples, 0.05%)</title><rect width=".046%" height="15" x="99.562%" y="1301" fill="#FC1230" fg:w="2" fg:x="4321"/></g><g><title>&lt;json_benchmark::copy::twitter::_::&lt;impl serde::de::Deserialize for json_benchmark::copy::twitter::Status&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.05%)</title><rect width=".046%" height="15" x="99.562%" y="1285" fill="#EAC720" fg:w="2" fg:x="4321"/></g><g><title>&lt;sonic_rs::serde::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_value (2 samples, 0.05%)</title><rect width=".046%" height="15" x="99.562%" y="1269" fill="#E14D36" fg:w="2" fg:x="4321"/></g><g><title>&lt;sonic_rs::serde::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_value_seed (2 samples, 0.05%)</title><rect width=".046%" height="15" x="99.562%" y="1253" fill="#E12A19" fg:w="2" fg:x="4321"/></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (2 samples, 0.05%)</title><rect width=".046%" height="15" x="99.562%" y="1237" fill="#F2E32E" fg:w="2" fg:x="4321"/></g><g><title>json_benchmark::copy::twitter::_::&lt;impl serde::de::Deserialize for json_benchmark::copy::twitter::User&gt;::deserialize (2 samples, 0.05%)</title><rect width=".046%" height="15" x="99.562%" y="1221" fill="#F6C523" fg:w="2" fg:x="4321"/></g><g><title>&lt;&amp;mut sonic_rs::serde::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_struct (2 samples, 0.05%)</title><rect width=".046%" height="15" x="99.562%" y="1205" fill="#D79F1A" fg:w="2" fg:x="4321"/></g><g><title>&lt;json_benchmark::copy::twitter::_::&lt;impl serde::de::Deserialize for json_benchmark::copy::twitter::User&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.05%)</title><rect width=".046%" height="15" x="99.562%" y="1189" fill="#D4C232" fg:w="2" fg:x="4321"/></g><g><title>serde::de::MapAccess::next_key (2 samples, 0.05%)</title><rect width=".046%" height="15" x="99.562%" y="1173" fill="#F68401" fg:w="2" fg:x="4321"/></g><g><title>&lt;sonic_rs::serde::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (2 samples, 0.05%)</title><rect width=".046%" height="15" x="99.562%" y="1157" fill="#D94707" fg:w="2" fg:x="4321"/></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (2 samples, 0.05%)</title><rect width=".046%" height="15" x="99.562%" y="1141" fill="#FC3B20" fg:w="2" fg:x="4321"/></g><g><title>&lt;json_benchmark::copy::twitter::_::&lt;impl serde::de::Deserialize for json_benchmark::copy::twitter::User&gt;::deserialize::__Field as serde::de::Deserialize&gt;::deserialize (2 samples, 0.05%)</title><rect width=".046%" height="15" x="99.562%" y="1125" fill="#FDCC19" fg:w="2" fg:x="4321"/></g><g><title>&lt;sonic_rs::serde::de::MapKey&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_identifier (2 samples, 0.05%)</title><rect width=".046%" height="15" x="99.562%" y="1109" fill="#E81510" fg:w="2" fg:x="4321"/></g><g><title>&lt;sonic_rs::serde::de::MapKey&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.05%)</title><rect width=".046%" height="15" x="99.562%" y="1093" fill="#F85A1D" fg:w="2" fg:x="4321"/></g><g><title>?? (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.585%" y="1077" fill="#F9DF07" fg:w="1" fg:x="4322"/></g><g><title>?? (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.585%" y="1061" fill="#E7772A" fg:w="1" fg:x="4322"/></g><g><title>?? (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.585%" y="1045" fill="#D72923" fg:w="1" fg:x="4322"/></g><g><title>&lt;json_benchmark::copy::twitter::_::&lt;impl serde::de::Deserialize for json_benchmark::copy::twitter::User&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.585%" y="1029" fill="#DC2C2D" fg:w="1" fg:x="4322"/></g><g><title>json_benchmark::copy::twitter::_::&lt;impl serde::ser::Serialize for json_benchmark::copy::twitter::User&gt;::serialize (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.608%" y="1237" fill="#FDC524" fg:w="1" fg:x="4323"/></g><g><title>__libc_start_main (4,247 samples, 97.86%)</title><rect width="97.857%" height="15" x="1.797%" y="1813" fill="#F5E136" fg:w="4247" fg:x="78"/><text x="2.047%" y="1823.5">__libc_start_main</text></g><g><title>main (4,247 samples, 97.86%)</title><rect width="97.857%" height="15" x="1.797%" y="1797" fill="#EF5E25" fg:w="4247" fg:x="78"/><text x="2.047%" y="1807.5">main</text></g><g><title>std::rt::lang_start_internal (4,247 samples, 97.86%)</title><rect width="97.857%" height="15" x="1.797%" y="1781" fill="#F2D90A" fg:w="4247" fg:x="78"/><text x="2.047%" y="1791.5">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (4,247 samples, 97.86%)</title><rect width="97.857%" height="15" x="1.797%" y="1765" fill="#FAC107" fg:w="4247" fg:x="78"/><text x="2.047%" y="1775.5">std::panic::catch_unwind</text></g><g><title>std::panicking::try (4,247 samples, 97.86%)</title><rect width="97.857%" height="15" x="1.797%" y="1749" fill="#E66813" fg:w="4247" fg:x="78"/><text x="2.047%" y="1759.5">std::panicking::try</text></g><g><title>std::panicking::try::do_call (4,247 samples, 97.86%)</title><rect width="97.857%" height="15" x="1.797%" y="1733" fill="#E6B504" fg:w="4247" fg:x="78"/><text x="2.047%" y="1743.5">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::_{{closure}} (4,247 samples, 97.86%)</title><rect width="97.857%" height="15" x="1.797%" y="1717" fill="#D8DB31" fg:w="4247" fg:x="78"/><text x="2.047%" y="1727.5">std::rt::lang_start_internal::_{{closure}}</text></g><g><title>std::panic::catch_unwind (4,247 samples, 97.86%)</title><rect width="97.857%" height="15" x="1.797%" y="1701" fill="#FE9000" fg:w="4247" fg:x="78"/><text x="2.047%" y="1711.5">std::panic::catch_unwind</text></g><g><title>std::panicking::try (4,247 samples, 97.86%)</title><rect width="97.857%" height="15" x="1.797%" y="1685" fill="#CDD126" fg:w="4247" fg:x="78"/><text x="2.047%" y="1695.5">std::panicking::try</text></g><g><title>std::panicking::try::do_call (4,247 samples, 97.86%)</title><rect width="97.857%" height="15" x="1.797%" y="1669" fill="#F0152A" fg:w="4247" fg:x="78"/><text x="2.047%" y="1679.5">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (4,247 samples, 97.86%)</title><rect width="97.857%" height="15" x="1.797%" y="1653" fill="#F18403" fg:w="4247" fg:x="78"/><text x="2.047%" y="1663.5">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::_{{closure}} (4,247 samples, 97.86%)</title><rect width="97.857%" height="15" x="1.797%" y="1637" fill="#E10E02" fg:w="4247" fg:x="78"/><text x="2.047%" y="1647.5">std::rt::lang_start::_{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (4,247 samples, 97.86%)</title><rect width="97.857%" height="15" x="1.797%" y="1621" fill="#D28D23" fg:w="4247" fg:x="78"/><text x="2.047%" y="1631.5">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (4,247 samples, 97.86%)</title><rect width="97.857%" height="15" x="1.797%" y="1605" fill="#FB0E2C" fg:w="4247" fg:x="78"/><text x="2.047%" y="1615.5">core::ops::function::FnOnce::call_once</text></g><g><title>deserialize_struct::main (4,247 samples, 97.86%)</title><rect width="97.857%" height="15" x="1.797%" y="1589" fill="#F73012" fg:w="4247" fg:x="78"/><text x="2.047%" y="1599.5">deserialize_struct::main</text></g><g><title>deserialize_struct::benches (4,247 samples, 97.86%)</title><rect width="97.857%" height="15" x="1.797%" y="1573" fill="#E10028" fg:w="4247" fg:x="78"/><text x="2.047%" y="1583.5">deserialize_struct::benches</text></g><g><title>deserialize_struct::bench_twitter_Twitter (23 samples, 0.53%)</title><rect width=".53%" height="15" x="99.124%" y="1557" fill="#DD1F21" fg:w="23" fg:x="4302"/></g><g><title>sonic_rs::serde::ser::to_string_pretty (2 samples, 0.05%)</title><rect width=".046%" height="15" x="99.608%" y="1541" fill="#ED2A28" fg:w="2" fg:x="4323"/></g><g><title>sonic_rs::serde::ser::to_vec_pretty (2 samples, 0.05%)</title><rect width=".046%" height="15" x="99.608%" y="1525" fill="#E9331D" fg:w="2" fg:x="4323"/></g><g><title>sonic_rs::serde::ser::to_writer_pretty (2 samples, 0.05%)</title><rect width=".046%" height="15" x="99.608%" y="1509" fill="#E23A14" fg:w="2" fg:x="4323"/></g><g><title>json_benchmark::copy::twitter::_::&lt;impl serde::ser::Serialize for json_benchmark::copy::twitter::Twitter&gt;::serialize (2 samples, 0.05%)</title><rect width=".046%" height="15" x="99.608%" y="1493" fill="#D06207" fg:w="2" fg:x="4323"/></g><g><title>&lt;sonic_rs::serde::ser::Compound&lt;W,F&gt; as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.05%)</title><rect width=".046%" height="15" x="99.608%" y="1477" fill="#E48F2C" fg:w="2" fg:x="4323"/></g><g><title>serde::ser::SerializeMap::serialize_entry (2 samples, 0.05%)</title><rect width=".046%" height="15" x="99.608%" y="1461" fill="#F63726" fg:w="2" fg:x="4323"/></g><g><title>&lt;sonic_rs::serde::ser::Compound&lt;W,F&gt; as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.05%)</title><rect width=".046%" height="15" x="99.608%" y="1445" fill="#F75710" fg:w="2" fg:x="4323"/></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for alloc::vec::Vec&lt;T&gt;&gt;::serialize (2 samples, 0.05%)</title><rect width=".046%" height="15" x="99.608%" y="1429" fill="#EA812A" fg:w="2" fg:x="4323"/></g><g><title>serde::ser::Serializer::collect_seq (2 samples, 0.05%)</title><rect width=".046%" height="15" x="99.608%" y="1413" fill="#DC5210" fg:w="2" fg:x="4323"/></g><g><title>core::iter::traits::iterator::Iterator::try_for_each (2 samples, 0.05%)</title><rect width=".046%" height="15" x="99.608%" y="1397" fill="#D35804" fg:w="2" fg:x="4323"/></g><g><title>core::iter::traits::iterator::Iterator::try_fold (2 samples, 0.05%)</title><rect width=".046%" height="15" x="99.608%" y="1381" fill="#F89715" fg:w="2" fg:x="4323"/></g><g><title>core::iter::traits::iterator::Iterator::try_for_each::call::_{{closure}} (2 samples, 0.05%)</title><rect width=".046%" height="15" x="99.608%" y="1365" fill="#EEA306" fg:w="2" fg:x="4323"/></g><g><title>serde::ser::Serializer::collect_seq::_{{closure}} (2 samples, 0.05%)</title><rect width=".046%" height="15" x="99.608%" y="1349" fill="#D1B70B" fg:w="2" fg:x="4323"/></g><g><title>&lt;sonic_rs::serde::ser::Compound&lt;W,F&gt; as serde::ser::SerializeSeq&gt;::serialize_element (2 samples, 0.05%)</title><rect width=".046%" height="15" x="99.608%" y="1333" fill="#DB2514" fg:w="2" fg:x="4323"/></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.05%)</title><rect width=".046%" height="15" x="99.608%" y="1317" fill="#D29E04" fg:w="2" fg:x="4323"/></g><g><title>json_benchmark::copy::twitter::_::&lt;impl serde::ser::Serialize for json_benchmark::copy::twitter::Status&gt;::serialize (2 samples, 0.05%)</title><rect width=".046%" height="15" x="99.608%" y="1301" fill="#DDA735" fg:w="2" fg:x="4323"/></g><g><title>&lt;sonic_rs::serde::ser::Compound&lt;W,F&gt; as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.05%)</title><rect width=".046%" height="15" x="99.608%" y="1285" fill="#ED972D" fg:w="2" fg:x="4323"/></g><g><title>serde::ser::SerializeMap::serialize_entry (2 samples, 0.05%)</title><rect width=".046%" height="15" x="99.608%" y="1269" fill="#E72703" fg:w="2" fg:x="4323"/></g><g><title>&lt;sonic_rs::serde::ser::Compound&lt;W,F&gt; as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.05%)</title><rect width=".046%" height="15" x="99.608%" y="1253" fill="#D4A71C" fg:w="2" fg:x="4323"/></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for core::option::Option&lt;T&gt;&gt;::serialize (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.631%" y="1237" fill="#E8B208" fg:w="1" fg:x="4324"/></g><g><title>&lt;&amp;mut sonic_rs::serde::ser::Serializer&lt;W,F&gt; as serde::ser::Serializer&gt;::serialize_some (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.631%" y="1221" fill="#E19714" fg:w="1" fg:x="4324"/></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for alloc::boxed::Box&lt;T&gt;&gt;::serialize (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.631%" y="1205" fill="#EE0325" fg:w="1" fg:x="4324"/></g><g><title>json_benchmark::copy::twitter::_::&lt;impl serde::ser::Serialize for json_benchmark::copy::twitter::Status&gt;::serialize (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.631%" y="1189" fill="#FB932A" fg:w="1" fg:x="4324"/></g><g><title>&lt;sonic_rs::serde::ser::Compound&lt;W,F&gt; as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.631%" y="1173" fill="#D0AD0A" fg:w="1" fg:x="4324"/></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.631%" y="1157" fill="#F6E104" fg:w="1" fg:x="4324"/></g><g><title>&lt;sonic_rs::serde::ser::Compound&lt;W,F&gt; as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.631%" y="1141" fill="#F86606" fg:w="1" fg:x="4324"/></g><g><title>json_benchmark::copy::twitter::_::&lt;impl serde::ser::Serialize for json_benchmark::copy::twitter::User&gt;::serialize (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.631%" y="1125" fill="#E80615" fg:w="1" fg:x="4324"/></g><g><title>&lt;sonic_rs::serde::ser::Compound&lt;W,F&gt; as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.631%" y="1109" fill="#DDB316" fg:w="1" fg:x="4324"/></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.631%" y="1093" fill="#FC3214" fg:w="1" fg:x="4324"/></g><g><title>&lt;sonic_rs::serde::ser::Compound&lt;W,F&gt; as serde::ser::SerializeMap&gt;::serialize_key (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.631%" y="1077" fill="#DE3826" fg:w="1" fg:x="4324"/></g><g><title>deserialize_str (4,250 samples, 97.93%)</title><rect width="97.926%" height="15" x="1.751%" y="1845" fill="#CEC11D" fg:w="4250" fg:x="76"/><text x="2.001%" y="1855.5">deserialize_str</text></g><g><title>_start (4,248 samples, 97.88%)</title><rect width="97.88%" height="15" x="1.797%" y="1829" fill="#EFC02D" fg:w="4248" fg:x="78"/><text x="2.047%" y="1839.5">_start</text></g><g><title>_dl_start (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.654%" y="1813" fill="#FE1224" fg:w="1" fg:x="4325"/></g><g><title>_dl_sysdep_start (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.654%" y="1797" fill="#DD7F0B" fg:w="1" fg:x="4325"/></g><g><title>dl_main (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.654%" y="1781" fill="#EA9223" fg:w="1" fg:x="4325"/></g><g><title>_dl_relocate_object (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.654%" y="1765" fill="#FEC925" fg:w="1" fg:x="4325"/></g><g><title>_dl_lookup_symbol_x (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.654%" y="1749" fill="#D3CA17" fg:w="1" fg:x="4325"/></g><g><title>do_lookup_x (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.654%" y="1733" fill="#ED5B02" fg:w="1" fg:x="4325"/></g><g><title>[gnuplot-qt] (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.677%" y="1829" fill="#E2E424" fg:w="1" fg:x="4326"/></g><g><title>__libc_start_main (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.677%" y="1813" fill="#D53F32" fg:w="1" fg:x="4326"/></g><g><title>__GI_exit (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.677%" y="1797" fill="#EBC213" fg:w="1" fg:x="4326"/></g><g><title>__run_exit_handlers (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.677%" y="1781" fill="#CFCC12" fg:w="1" fg:x="4326"/></g><g><title>_dl_fini (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.677%" y="1765" fill="#F80807" fg:w="1" fg:x="4326"/></g><g><title>[libwx_gtk2u_core-3.0.so.0.4.0] (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.677%" y="1749" fill="#DF912F" fg:w="1" fg:x="4326"/></g><g><title>__cxa_finalize (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.677%" y="1733" fill="#E4540B" fg:w="1" fg:x="4326"/></g><g><title>wxEvtHandler::~wxEvtHandler (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.677%" y="1717" fill="#DA4C2D" fg:w="1" fg:x="4326"/></g><g><title>wxMutex::~wxMutex (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.677%" y="1701" fill="#DF500F" fg:w="1" fg:x="4326"/></g><g><title>[libwx_baseu-3.0.so.0.4.0] (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.677%" y="1685" fill="#DBDA21" fg:w="1" fg:x="4326"/></g><g><title>_dl_runtime_resolve_xsavec (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.677%" y="1669" fill="#D0330B" fg:w="1" fg:x="4326"/></g><g><title>_dl_fixup (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.677%" y="1653" fill="#E5A527" fg:w="1" fg:x="4326"/></g><g><title>_dl_lookup_symbol_x (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.677%" y="1637" fill="#F16418" fg:w="1" fg:x="4326"/></g><g><title>do_lookup_x (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.677%" y="1621" fill="#E40E17" fg:w="1" fg:x="4326"/></g><g><title>_dl_name_match_p (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.677%" y="1605" fill="#F77434" fg:w="1" fg:x="4326"/></g><g><title>strcmp (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.677%" y="1589" fill="#D89521" fg:w="1" fg:x="4326"/></g><g><title>_dl_start_user (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.701%" y="1829" fill="#EE8E1D" fg:w="1" fg:x="4327"/></g><g><title>_dl_init (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.701%" y="1813" fill="#E05328" fg:w="1" fg:x="4327"/></g><g><title>call_init.part.0 (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.701%" y="1797" fill="#EAA50B" fg:w="1" fg:x="4327"/></g><g><title>[libpixman-1.so.0.36.0] (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.701%" y="1781" fill="#D76017" fg:w="1" fg:x="4327"/></g><g><title>[libpixman-1.so.0.36.0] (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.701%" y="1765" fill="#E9B31A" fg:w="1" fg:x="4327"/></g><g><title>_dl_map_object_deps (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.724%" y="1765" fill="#E18121" fg:w="1" fg:x="4328"/></g><g><title>_dl_catch_exception (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.724%" y="1749" fill="#ED310D" fg:w="1" fg:x="4328"/></g><g><title>openaux (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.724%" y="1733" fill="#D3031F" fg:w="1" fg:x="4328"/></g><g><title>_dl_map_object (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.724%" y="1717" fill="#D89813" fg:w="1" fg:x="4328"/></g><g><title>open_path (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.724%" y="1701" fill="#FB7923" fg:w="1" fg:x="4328"/></g><g><title>memmove (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.724%" y="1685" fill="#D2D92F" fg:w="1" fg:x="4328"/></g><g><title>_dl_name_match_p (2 samples, 0.05%)</title><rect width=".046%" height="15" x="99.885%" y="1717" fill="#F47416" fg:w="2" fg:x="4335"/></g><g><title>strcmp (2 samples, 0.05%)</title><rect width=".046%" height="15" x="99.885%" y="1701" fill="#E41115" fg:w="2" fg:x="4335"/></g><g><title>_dl_lookup_symbol_x (8 samples, 0.18%)</title><rect width=".184%" height="15" x="99.793%" y="1749" fill="#F09522" fg:w="8" fg:x="4331"/></g><g><title>do_lookup_x (6 samples, 0.14%)</title><rect width=".138%" height="15" x="99.839%" y="1733" fill="#D07D2F" fg:w="6" fg:x="4333"/></g><g><title>check_match (2 samples, 0.05%)</title><rect width=".046%" height="15" x="99.931%" y="1717" fill="#F9BA27" fg:w="2" fg:x="4337"/></g><g><title>strcmp (2 samples, 0.05%)</title><rect width=".046%" height="15" x="99.931%" y="1701" fill="#F0DC21" fg:w="2" fg:x="4337"/></g><g><title>all (4,340 samples, 100%)</title><rect width="100%" height="15" x="0%" y="1861" fill="#F36E17" fg:w="4340" fg:x="0"/></g><g><title>gnuplot (14 samples, 0.32%)</title><rect width=".323%" height="15" x="99.677%" y="1845" fill="#DBA32E" fg:w="14" fg:x="4326"/></g><g><title>_start (12 samples, 0.28%)</title><rect width=".277%" height="15" x="99.724%" y="1829" fill="#D87E1E" fg:w="12" fg:x="4328"/></g><g><title>_dl_start (12 samples, 0.28%)</title><rect width=".277%" height="15" x="99.724%" y="1813" fill="#D08B0B" fg:w="12" fg:x="4328"/></g><g><title>_dl_sysdep_start (12 samples, 0.28%)</title><rect width=".277%" height="15" x="99.724%" y="1797" fill="#D57624" fg:w="12" fg:x="4328"/></g><g><title>dl_main (12 samples, 0.28%)</title><rect width=".277%" height="15" x="99.724%" y="1781" fill="#E22B11" fg:w="12" fg:x="4328"/></g><g><title>_dl_relocate_object (11 samples, 0.25%)</title><rect width=".254%" height="15" x="99.746%" y="1765" fill="#FED904" fg:w="11" fg:x="4329"/></g><g><title>_dl_protect_relro (1 samples, 0.02%)</title><rect width=".023%" height="15" x="99.977%" y="1749" fill="#D2862F" fg:w="1" fg:x="4339"/></g></svg></svg>